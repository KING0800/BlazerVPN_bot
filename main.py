import logging
import sqlite3 as sq
import os
import datetime

from aiogram import types, Dispatcher, Bot, executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import ChatNotFound
from dotenv import load_dotenv, find_dotenv
from typing import NamedTuple
from keyboards import location_keyboard, pay_sweden_keyboard, replenishment_balance, start_keyboard, back_keyboard, reply_keyboard, insturtion_keyboard, pay_finland_keyboard, pay_germany_keyboard, buy_keyboard, extend_keyboard
from database import db_start, edit_profile, get_balance, buy_operation, pay_operation, checking_balance, get_vpn_state, update_vpn_state
from payment import create_payment, check

load_dotenv(find_dotenv())
bot_token = os.getenv("bot_token") 
Blazer_chat_token = os.getenv("Blazer_chat_token") 
Anush_chat_token = os.getenv("Anush_chat_token")
paymaster_token = os.getenv("paymaster_token") 
VPN_price_token = os.getenv("VPN_price_token") 
Account_payment_id_token = os.getenv("Account_payment_id_token") 
Secret_payment_key_token = os.getenv("Secret_payment_key_token")

TOKEN_API = bot_token
bot = Bot(TOKEN_API)

async def on_startup(dp):
    await db_start()

dp = Dispatcher(bot, storage=MemoryStorage())
previous_states = {}
support_requests = []

class SendMessageStates(StatesGroup):
    WAITING_FOR_MESSAGE_TEXT = State()
    WAITING_FOR_AMOUNT = State()

class SupportStates(StatesGroup):
    WAITING_FOR_QUESTION = State()
    WAITING_FOR_ANSWER = State()
    WAITING_FOR_MODERATOR_ANSWER = State()
    WAITING_FOR_MODERATOR_TEXT = State()

class SupportRequest(NamedTuple):
    user_id: int
    user_name: str
    question: str
    answer: str = None

previous_markup = None

"""************************************************* –ë–ê–ó–û–í–´–ï –ö–û–ú–ê–ù–î–´ (/start, /help, /balance) *****************************************************"""
# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'], state="*")
async def start_cmd(message: types.Message):
    user_name = message.from_user.username
    user_id = message.from_user.id
    await edit_profile(user_name, user_id)
    await message.answer("""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BlazerVPN ‚Äì –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –≤ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Å–≤—è–∑–∏ –≤ —Å–µ—Ç–∏.
 
–ù–∞—à —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ–º –ª–æ–∫–∞—Ü–∏—è–º:
‚Ä¢ –®–≤–µ—Ü–∏—è üá∏üá™
‚Ä¢ –§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ
‚Ä¢ –ì–µ—Ä–º–∞–Ω–∏—è üá©üá™

–û–±–µ—Å–ø–µ—á–∏–≤–∞—è –±—ã—Å—Ç—Ä—É—é –∏ –∑–∞—â–∏—â–µ–Ω–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö. –ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å, BlazerVPN –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–µ–π –æ–Ω–ª–∞–π–Ω –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –û–±–µ—Å–ø–µ—á—å—Ç–µ —Å–µ–±–µ —Å–≤–æ–±–æ–¥—É –∏ –∑–∞—â–∏—Ç—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —Å BlazerVPN!""", reply_markup=start_keyboard)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=['text'])
async def handle_text(message: types.Message):
    if message.text == "/help":
        await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                           "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                           "/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
                           "/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", reply_markup=start_keyboard)
    elif message.text == "/balance":
        user_name = message.from_user.username
        balance = await get_balance(user_name)
        await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ", reply_markup=start_keyboard)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.", reply_markup=start_keyboard)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ balance(balance)
@dp.callback_query_handler(lambda c: c.data == "balance")
async def balance_def(callback: types.CallbackQuery):
    user_name = callback.from_user.username
    balance = await get_balance(user_name)
    await callback.message.edit_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ", reply_markup=replenishment_balance)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ help(help_callback)
@dp.callback_query_handler(lambda c: c.data == "help_callback")
async def help_kb_handle(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–î–ª—è —Å–≤—è–∑–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: \nhttps://t.me/KING_08001", reply_markup=back_keyboard)
    async with state.proxy() as data:
        data['previous_text'] = callback.message.text
        data['previous_markup'] = callback.message.reply_markup

"""*********************************************** –í–´–ë–û–† –õ–û–ö–ê–¶–ò–ò –ò –ü–û–ö–£–ü–ö–ê –í–ü–ù ************************************************************************"""
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏ (buy_vpn)
@dp.callback_query_handler(lambda c: c.data == "buy_vpn")
async def buying_VPN_handle(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:", reply_markup=location_keyboard)
    async with state.proxy() as data:
        data['previous_text'] = callback.message.text
        data['previous_markup'] = callback.message.reply_markup

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ª–æ–∫–∞—Ü–∏–π (Sweden_callback, Finland_callback, Germany_callback)
@dp.callback_query_handler(lambda c: c.data == "Sweden_callback" or c.data == "Finland_callback" or c.data == "Germany_callback")
async def location_choose_def(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "Sweden_callback":
        await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é: –®–≤–µ—Ü–∏—è üá∏üá™\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ {VPN_price_token} ‚ÇΩ", reply_markup=pay_sweden_keyboard)
        async with state.proxy() as data:
            data['previous_text'] = callback.message.text
            data['previous_markup'] = callback.message.reply_markup
        await callback.answer("")

    elif callback.data == "Finland_callback":
        await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é: –§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ {VPN_price_token} ‚ÇΩ", reply_markup=pay_finland_keyboard)
        async with state.proxy() as data:
            data['previous_text'] = callback.message.text
            data['previous_markup'] = callback.message.reply_markup
        await callback.answer("")

    elif callback.data == "Germany_callback":
        await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é: –ì–µ—Ä–º–∞–Ω–∏—è üá©üá™\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ {VPN_price_token} ‚ÇΩ", reply_markup=pay_germany_keyboard)
        async with state.proxy() as data:
            data['previous_text'] = callback.message.text
            data['previous_markup'] = callback.message.reply_markup
        await callback.answer("")

# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É VPN.
async def buying_VPN_def(callback, country,  state):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ VPN –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã"""
    user_name = callback.from_user.username
    balance = await get_balance(user_name)
    if float(balance) < float(VPN_price_token):
        await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå")
        await callback.message.edit_text("–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.", reply_markup=replenishment_balance)
        async with state.proxy() as data:
            data['previous_text'] = callback.message.text
            data['previous_markup'] = callback.message.reply_markup
    else:
        payment_key = await buy_operation(user_name)
        await callback.message.edit_text("–í—ã –∫—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä ‚úÖ! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏. –ö–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VPN –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        user_id = callback.from_user.id
        async with state.proxy() as data:
            data['payment_key'] = payment_key
        await bot.send_message(Blazer_chat_token, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: {user_id})\n–ó–∞–∫–∞–∑–∞–ª VPN –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏: {country}\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.", reply_markup=reply_keyboard)
        await bot.send_message(Anush_chat_token, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: {user_id})\n–ó–∞–∫–∞–∑–∞–ª VPN –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏: {country}\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.", reply_markup=reply_keyboard)
        await update_vpn_state(user_id=user_id, location=country, active=True, expiration_date=30)
        async with state.proxy() as data:
            data['previous_text'] = callback.message.text
            data['previous_markup'] = callback.message.reply_markup

# —Ö–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é, –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏ VPN. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ (Buying_sweden_VPN, Buying_finland_VPN, Buying_germany_VPN)
@dp.callback_query_handler(lambda c: c.data == "Buying_sweden_VPN" or c.data == "Buying_finland_VPN" or c.data == "Buying_germany_VPN")
async def buying_VPN_handle(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "Buying_sweden_VPN":
        await buying_VPN_def(callback, "–®–≤–µ—Ü–∏—è üá∏üá™", state)

    elif callback.data == "Buying_finland_VPN":
        await buying_VPN_def(callback, "–§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ", state) 

    elif callback.data == "Buying_germany_VPN":
        await buying_VPN_def(callback, "–ì–µ—Ä–º–∞–Ω–∏—è üá©üá™", state)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ (payment_callback)
@dp.callback_query_handler(lambda c: c.data == "payment_callback")
async def payment_handle(callback: types.CallbackQuery):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=back_keyboard)
    await SendMessageStates.WAITING_FOR_MESSAGE_TEXT.set()
    await callback.answer("")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.
@dp.message_handler(state=SendMessageStates.WAITING_FOR_MESSAGE_TEXT)
async def send_message(message: types.Message, state: FSMContext):
    message_text = message.text
    async with state.proxy() as data:
        payment_key = str(data.get('payment_key'))
    if payment_key:
        try:
            db = sq.connect('UserINFO.db')
            cur = db.cursor()
            cur.execute(
                "SELECT user_id FROM UserINFO WHERE payment_key = ?",
                (payment_key,)
            )
            row = cur.fetchone()
            db.close()
            if row:
                user_id = row[0]
                await bot.send_message(
                    user_id,
                    text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É\n–í–∞—à –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: <pre>{message.text}</pre>\n–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VPN",
                    reply_markup=insturtion_keyboard,
                    parse_mode="HTML"
                )
                await message.answer(
                    f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è @{user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ: {message_text}",
                    reply_markup=back_keyboard
                )
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é. –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞. ‚ùå")
        except ChatNotFound:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é. –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ùå")
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é. –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ùå")
    else:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå", reply_markup=back_keyboard)
    await state.finish()


"""***************************************************** –ü–†–û–î–õ–ï–ù–ò–ï VPN *************************************************************************"""
# —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è VPN(extension_vpn, extend_callback)
@dp.callback_query_handler(lambda c: c.data == "extension_vpn" or c.data == "extend_callback")
async def example_name_def(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "extension_vpn":
        user_id = callback.from_user.id
        active, days_remaining = await get_vpn_state(user_id)
        if active is None:
            await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç—É –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ VPN! –í–∞–º –µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ", reply_markup=buy_keyboard)
        else:
            await callback.message.edit_text(f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN –Ω–∞ –º–µ—Å—è—Ü —Å—Ç–æ–∏—Ç {VPN_price_token} ‚ÇΩ\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–ª–∏—Ç—å VPN", reply_markup=extend_keyboard)
        async with state.proxy() as data:
            data['previous_text'] = callback.message.text
            data['previous_markup'] = callback.message.reply_markup

    elif callback.data == "extend_callback":
        user_name = callback.from_user.username
        user_id = callback.from_user.id
        balance = await get_balance(user_name)
        if float(balance) >= float(VPN_price_token):
            await pay_operation(user_name)
            active, days_remaining = await get_vpn_state(user_id)
            if days_remaining is not None:
                expiration_date = datetime.datetime.now() + datetime.timedelta(days=30)
                await update_vpn_state(user_id, True, expiration_date)
                await callback.message.edit_text(f"VPN –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ 1 –º–µ—Å—è—Ü. –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è VPN –æ—Å—Ç–∞–ª–æ—Å—å {days_remaining + 30} –¥–Ω–µ–π")
            else:
                await callback.message.edit_text("VPN —É–∂–µ –±—ã–ª –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫.")
        else:
            await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå")
            await callback.message.edit_text("–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.", reply_markup=replenishment_balance)
            async with state.proxy() as data:
                data['previous_text'] = callback.message.text
                data['previous_markup'] = callback.message.reply_markup

"""************************************************** –ü–û–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê*************************************************"""
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã(replenishment)
@dp.callback_query_handler(lambda c: c.data == "replenishment")
async def replenishment_handle(callback: types.CallbackQuery):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=back_keyboard)
    await SendMessageStates.WAITING_FOR_AMOUNT.set()
    await callback.answer("")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
@dp.message_handler(state=SendMessageStates.WAITING_FOR_AMOUNT)
async def handle_amount(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        if amount > 0:
            try:
                payment_url, payment_id = create_payment(amount, message.from_user.id)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e} ‚ùå")
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ùå")
                return

            payment_button = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url),
                        InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"checking_payment_{payment_id}")
                    ]
                ]
            )
            await message.answer(f"–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. ‚úÖ", reply_markup=payment_button)
            async with state.proxy() as data:
                data['previous_text'] = message.text
                data['previous_markup'] = message.reply_markup
        else:
            await message.answer("–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ).")
    
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏, –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è(checking_payment_)
@dp.callback_query_handler(lambda c: "checking_payment_" in c.data)
async def succesfull_payment(callback: types.CallbackQuery):
    result = check(callback.data.split('_')[-1])
    if result:
        await callback.message.answer('–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞. ')
        return
    else:
        await callback.message.answer('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. ')

"""****************************************************** –°–ò–°–¢–ï–ú–ê –ü–û–î–î–ï–†–ñ–ö–ò *******************************************************"""
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (help_command_callback)
@dp.callback_query_handler(lambda c: c.data == "help_command_callback")
async def support_handle(callback: types.CallbackQuery):
    await callback.message.edit_text("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=back_keyboard)
    await SupportStates.WAITING_FOR_QUESTION.set()
    await callback.answer("")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
@dp.message_handler(state=SupportStates.WAITING_FOR_QUESTION)
async def process_question(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user.username
    question = message.text

    support_request = SupportRequest(user_id=user_id, user_name=user_name, question=question)
    support_requests.append(support_request)

    await message.answer("–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ.", reply_markup=start_keyboard)
    await bot.send_message(Blazer_chat_token, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: {user_id})\n–ó–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å:\n{question}", reply_markup=reply_keyboard)
    await bot.send_message(Anush_chat_token, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: {user_id})\n–ó–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å:\n{question}", reply_markup=reply_keyboard)
    await SupportStates.WAITING_FOR_MODERATOR_TEXT.set()

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏, –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (reply_keyboard)
@dp.callback_query_handler(lambda c: c.data == "reply_keyboard", state=SupportStates.WAITING_FOR_MODERATOR_TEXT)
async def process_answer(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç:")
    await SupportStates.WAITING_FOR_MODERATOR_ANSWER.set()

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
@dp.message_handler(state=SupportStates.WAITING_FOR_MODERATOR_ANSWER)
async def replying_for_moder(message: types.Message):
    user_name = message.from_user.username
    user_id = message.from_user.id
    answer = message.text
    for i, support_request in enumerate(support_requests):
        if support_request.user_id == message.from_user.id:
            support_requests[i] = SupportRequest(
                user_id=support_request.user_id,
                user_name=support_request.user_name,
                question=support_request.question,
                answer=answer
            )
            try:
                await bot.send_message(support_request.user_id, f"–û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:\n{answer}", reply_markup=start_keyboard)
                await message.answer(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user_name} (ID: {user_id})")
            except ChatNotFound:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            break

"""********************************************** –°–ò–°–¢–ï–ú–ê –í–û–ó–í–†–ê–©–ï–ù–ò–Ø –ö –ü–†–ï–î–´–î–£–©–ò–ú –°–û–û–ë–©–ï–ù–ò–Ø–ú ****************************************"""

@dp.callback_query_handler(lambda c: c.data == "back")
async def back_handle(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if 'previous_text' in data and 'previous_markup' in data:
            await callback.message.edit_text(data['previous_text'], reply_markup=data['previous_markup'])
            await callback.answer("")
            data.pop('previous_text', None)
            data.pop('previous_markup', None)
        else:
            await callback.message.edit_text("–í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é.", reply_markup=start_keyboard)
            await callback.answer("")

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
