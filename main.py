import sqlite3 as sq
import os
import datetime
import json
import re
import dns.resolver

from aiogram import types, Dispatcher, Bot
from aiogram.utils import executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext 
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import ChatNotFound
from dotenv import load_dotenv, find_dotenv
from typing import NamedTuple
from functools import wraps
from keyboards import support_keyboard, user_find_data, adm_panel_keyboard, device_keyboard, addind_count_for_extend, own_vpn_keyboard, numbers_for_replenishment, location_keyboard, reply_buy_keyboard, pay_sweden_keyboard, replenishment_balance, start_kb_handle, back_keyboard, reply_keyboard, insturtion_keyboard, pay_finland_keyboard, pay_germany_keyboard, buy_keyboard, extend_keyboard, payment_type, promocode_keyboard
from database import is_user_ban_check, unban_users_handle, ban_users_handle, find_user_data, db_start, edit_profile, getting_operation_history, extend_vpn_state, edit_operations_history, get_balance, buy_operation, pay_operation, get_vpn_data, update_vpn_state, get_temp_message, delete_temp_message, save_temp_message, find_message_id, find_user, get_referrer_username, save_promocode, check_promocode_used, delete_sum_operation
from payment import create_payment, check

load_dotenv(find_dotenv())
BOT_TOKEN = os.getenv("bot_token") 
BLAZER_CHAT_TOKEN = os.getenv("Blazer_chat_token") 
ANUSH_CHAT_TOKEN = os.getenv("Anush_chat_token")
PAYMASTER_TOKEN = os.getenv("Payment_token") 
VPN_PRICE_TOKEN = os.getenv("VPN_price_token") 
ACCOUNT_PAYMENT_ID_TOKEN = os.getenv("Account_payment_id_token") 
SECRET_PAYMENT_KEY_TOKEN = os.getenv("SECRET_PAYMENT_KEY_TOKEN")
PROMOCODE_TOKEN = os.getenv("Promocode_token")

bot = Bot(BOT_TOKEN)

async def on_startup(dp):
    await db_start()

dp = Dispatcher(bot, storage=MemoryStorage())
previous_states = {}
support_requests = []

class BuyVPNStates(StatesGroup):
    WAITING_FOR_MESSAGE_TEXT = State()

class PaymentStates(StatesGroup):
    WAITING_FOR_AMOUNT = State()
    WAITING_FOR_USER_EMAIL_HANDLE = State()
    WAINING_FOR_PAYMENT_TYPE = State()
    WAITING_FOR_MESSAGE_TEXT = State()

class SupportStates(StatesGroup):
    WAITING_FOR_QUESTION = State()
    WAITING_FOR_MODERATOR_ANSWER = State()

class PromocodeStates(StatesGroup):
    WAITING_FOR_USER_PROMOCODE = State()

class AdmCommandState(StatesGroup):
    WAITING_ID_OF_USER_FOR_DELETE = State()
    WAITING_ID_OF_USER_FOR_ADD = State()
    WAITING_ID_OF_USER_HANDLE_FOR_ADD = State()
    WAITING_ID_OF_USER_HANDLE_FOR_DELETE = State()
    WAITING_FOR_SUM_HANDLE_FOR_ADD = State()
    WAITING_FOR_SUM_HANDLE_FOR_DELETE = State()

class AdmButtonState(StatesGroup):
    WAITING_FOR_USER_ID_FOR_USER_INFO = State()
    WAITING_FOR_CALLBACK_BUTTONS = State()

class UserVPNInfo(StatesGroup):
    WAITING_FOR_USER_ID_FOR_USER_VPN_INFO = State()

class BanUserState(StatesGroup):
    WAITING_FOR_USER_ID = State()

class UnbanUserState(StatesGroup):
    WAITING_FOR_USER_ID = State()

class SupportRequest(NamedTuple):
    user_id: int
    user_name: str
    question: str
    answer: str = None

previous_markup = None

def deserialize_keyboard(keyboard_json: str) -> InlineKeyboardMarkup:
    keyboard_data = json.loads(keyboard_json)
    keyboard = InlineKeyboardMarkup()

    for row in keyboard_data['inline_keyboard']:
        keyboard.row(*[
            InlineKeyboardButton(text=button['text'], callback_data=button['callback_data'])
            for button in row
        ])

    return keyboard

def block_check(func):
    @wraps(func)
    async def wrapper(message: types.Message, *args, **kwargs):
        user_id = message.from_user.id
        if await is_user_ban_check(user_id):
            await message.reply("<b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ‚ùå</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
            return
        return await func(message, *args, *kwargs)
    return wrapper

"""************************************************* –ë–ê–ó–û–í–´–ï –ö–û–ú–ê–ù–î–´ (/start, /help, /balance) *****************************************************"""
# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'], state="*")
@block_check
async def start_cmd(message: types.Message, state):
    user_name = message.from_user.username
    user_id = message.from_user.id
    if not await find_user(user_id):
        start_command = message.text
        referrer_id = str(start_command[7:])
        if referrer_id != "":
            if referrer_id != str(user_id):
                await edit_profile(user_name, user_id, referrer_id)
                await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –ë–æ–Ω—É—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–∏–ª–∏—Å—å —Ä–µ—Ñ–µ—Ä–µ—Ä—É –Ω–∞ –±–∞–ª–∞–Ω—Å. ")
                try:
                    await bot.send_message(referrer_id, "–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω—ã 15 ‚ÇΩ ")
                    await pay_operation(int(5), referrer_id)
                except:
                    pass
            else:
                await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ! ")
                await edit_profile(user_name, user_id)
        else:
            await edit_profile(user_name, user_id)
    start_kb = await start_kb_handle(user_id)
    await message.answer("""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>BlazerVPN</b> ‚Äì –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –≤ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Å–≤—è–∑–∏ –≤ —Å–µ—Ç–∏.
 
–ù–∞—à —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ–º –ª–æ–∫–∞—Ü–∏—è–º üìç:<b>
‚Ä¢ üá∏üá™ –®–≤–µ—Ü–∏—è
‚Ä¢ üá´üáÆ –§–∏–Ω–ª—è–Ω–¥–∏—è
‚Ä¢ üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è
</b>
–û–±–µ—Å–ø–µ—á–∏–≤–∞—è –±—ã—Å—Ç—Ä—É—é –∏ –∑–∞—â–∏—â–µ–Ω–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö. –ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å, <b>BlazerVPN</b> –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–µ–π –æ–Ω–ª–∞–π–Ω –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –û–±–µ—Å–ø–µ—á—å—Ç–µ —Å–µ–±–µ —Å–≤–æ–±–æ–¥—É –∏ –∑–∞—â–∏—Ç—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —Å <b>BlazerVPN!</b>""", reply_markup=start_kb, parse_mode="HTML")
 
    await save_temp_message(user_id, None, None)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=['text'])
@block_check
async def handle_text(message: types.Message, state):
    user_id = message.from_user.id
    start_kb = await start_kb_handle(user_id)
    if message.text == "/help":
        await message.answer("<b>‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                           "/start - –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n"
                           "/help - –£–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
                           "/balance - –£–∑–Ω–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å\n"
                           "/connect_with_dev - –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –±–æ—Ç–∞\n"
                           "/buy - –ö—É–ø–∏—Ç—å VPN\n"
                           "/extend_vpn - –ü—Ä–æ–¥–ª–∏—Ç—å VPN\n"
                           "/replenishment - –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
                           "/support - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
                           "/my_vpn - –ú–æ–∏ VPN\n"
                           "/ref_system - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n"
                           "/promocode - –ü—Ä–æ–º–æ–∫–æ–¥—ã\n"
                           "/history_of_operations - –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π\n"
                           "/instruction - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é VPN", reply_markup=start_kb, parse_mode="HTML")
         
    elif message.text == "/balance":
        user_name = message.from_user.username
        balance = await get_balance(user_name)
        await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ", reply_markup=replenishment_balance)

    elif message.text == "/connect_with_dev":
        await message.answer("–î–ª—è —Å–≤—è–∑–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: \n\nhttps://t.me/KING_08001", reply_markup=back_keyboard)

    elif message.text == "/buy":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é üìç:\n\n<tg-spoiler><i>–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏</i></tg-spoiler>", reply_markup=location_keyboard, parse_mode="HTML")
        
    elif message.text == "/extend_vpn":
        user_id = message.from_user.id
        vpn_data = await get_vpn_data(user_id)
        if vpn_data:
            numbers = 0
            vpn_info_text = ""
            for vpn in vpn_data:
                numbers += 1
                location = vpn[3]
                active = vpn[4]
                expiration_date = datetime.datetime.strptime(str(vpn[5]), "%d.%m.%Y %H:%M:%S")
                days_remaining = (expiration_date - datetime.datetime.now()).days
                vpn_info_text += f"{numbers}. –õ–æ–∫–∞—Ü–∏—è:   {location}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:   {expiration_date.strftime('%d.%m.%Y %H:%M:%S')}\n–û—Å—Ç–∞–ª–æ—Å—å:   {days_remaining} –¥–Ω–µ–π\n\n"
            kb_for_count = await addind_count_for_extend(count=numbers)
            if numbers == 1:
                await message.answer("<b>‚Ä¢ –£ –≤–∞—Å –æ–¥–∏–Ω VPN:</b>\n\n" + vpn_info_text + f"<b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN üõ° –Ω–∞ 30 –¥–Ω–µ–π —Å—Ç–æ–∏—Ç {VPN_PRICE_TOKEN} ‚ÇΩ üíµ\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–ª–∏—Ç—å VPN</b>", reply_markup=extend_keyboard, parse_mode="HTML")
            else:
                await message.answer(f"<b>‚Ä¢ –í–∞—à–∏ VPN üõ°:</b>\n\n{vpn_info_text}<b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN üõ° –Ω–∞ 30 –¥–Ω–µ–π —Å—Ç–æ–∏—Ç {VPN_PRICE_TOKEN} ‚ÇΩ üíµ. –í—ã–±–µ—Ä–∏—Ç–µ VPN, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å:</b>", reply_markup=kb_for_count, parse_mode="HTML") 
            if message.reply_markup:
                await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
            else:
                await save_temp_message(message.from_user.id, message.text, None)
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç—É –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ VPN ‚ùå! –í–∞–º –µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ", reply_markup=buy_keyboard)
            if message.reply_markup:
                await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
            else:
                await save_temp_message(message.from_user.id, message.text, None)

    elif message.text == "/replenishment":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ: ", reply_markup=numbers_for_replenishment)
        if message.reply_markup:
            await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
        else:
            await save_temp_message(message.from_user.id, message.text, None)
        await PaymentStates.WAITING_FOR_AMOUNT.set()

    elif message.text == "/support":
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ß–µ–º –º–æ–∂–µ–º –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã?", reply_markup=back_keyboard)
        if message.reply_markup:
            await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
        else:
            await save_temp_message(message.from_user.id, message.text, None)
        await SupportStates.WAITING_FOR_QUESTION.set()

    elif message.text == "/ref_system":
        user_id = message.from_user.id
        referrals = await get_referrer_username(user_id)
        text = f"‚Ä¢ –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <pre>https://t.me/blazervpnbot?start={user_id}</pre>\n\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å–æ —Å–≤–æ–∏–º–∏ –∑–Ω–∞–∫–æ–º—ã–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å 15 ‚ÇΩ —Å–µ–±–µ –Ω–∞ –±–∞–ª–∞–Ω—Å.\n\n"
        if referrals:
            text += "–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n"
            for username in referrals:
                text += f"@{username}\n"
        else:
            text += "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤."
        await message.answer(text, reply_markup=back_keyboard, parse_mode="HTML")
        if message.reply_markup:
            await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
        else:
            await save_temp_message(message.from_user.id, message.text, None)

    elif message.text == "/promocode":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=back_keyboard)
        if message.reply_markup:
            await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
        else:
            await save_temp_message(message.from_user.id, message.text, None)
        await PromocodeStates.WAITING_FOR_USER_PROMOCODE.set()

    elif message.text == "/instruction":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é VPN üõ°:", reply_markup=device_keyboard)

    elif message.text == "/my_vpn":
        user_id = message.from_user.id
        vpn_data = await get_vpn_data(user_id)
        if vpn_data:
            vpn_info_text = "<b>‚Ä¢ –í–∞—à–∏ VPN üõ°</b>:\n\n"
            for vpn in vpn_data:
                location = vpn[3]
                active = vpn[4]
                expiration_date = datetime.datetime.strptime(vpn[5], "%d.%m.%Y %H:%M:%S")
                days_remaining = (expiration_date - datetime.datetime.now()).days
                vpn_info_text += f"–õ–æ–∫–∞—Ü–∏—è:   {location}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:   {expiration_date.strftime('%d.%m.%Y %H:%M:%S')}\n–û—Å—Ç–∞–ª–æ—Å—å:   {days_remaining} –¥–Ω–µ–π\n\n"
            await message.answer(vpn_info_text, reply_markup=back_keyboard, parse_mode="HTML")
        else:
            await message.answer(f"–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ VPN ‚ùå", reply_markup=own_vpn_keyboard)
        if message.reply_markup:
            await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
        else:
            await save_temp_message(message.from_user.id, message.text, None)
    
    elif message.text == "/history_of_operations":
        user_id = message.from_user.id
        user_name = message.from_user.username
        operation_history = await getting_operation_history(user_id=user_id)
        if operation_history is None:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π ‚ùå", reply_markup=replenishment_balance)
            return
        message_text = "<b>‚Ä¢ üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:</b>\n\n"
        for operation in operation_history:
            id, user_db_id, user_db_name, operations, time_of_operation, description_of_operation = operation

            operations = operations.split(",")
            time_of_operation = time_of_operation.split(",")
            description_of_operation = description_of_operation.split(",")

            for i in range(len(operations)):
                operation_value = operations[i]
                if "-" not in operation_value:
                    operation_value = "+" + operation_value

                message_text += f"<i>{time_of_operation[i]}</i> - <b>{description_of_operation[i]}</b>:  <code>{operation_value}</code> ‚ÇΩ\n"

        await message.answer(message_text, reply_markup=back_keyboard, parse_mode="HTML")
        await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
    ##### ADM COMMANDS
    elif message.text == "/add":
        await message.answer("‚Ä¢ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: </b>\n\n–í–≤–µ–¥–∏—Ç–µ <b>ID</b> –∏–ª–∏ <b>USERNAME</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=back_keyboard, parse_mode="HTML")
        if message.reply_markup:
            await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
        else:
            await save_temp_message(message.from_user.id, message.text, None)
        await AdmCommandState.WAITING_ID_OF_USER_FOR_ADD.set()
    elif message.text == "/delete":
        await message.answer("‚Ä¢ <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: </b>\n\n–í–≤–µ–¥–∏—Ç–µ <b>ID</b> –∏–ª–∏ <b>USERNAME</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=back_keyboard, parse_mode="HTML")
        if message.reply_markup:
            await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
        else:
            await save_temp_message(message.from_user.id, message.text, None)
        await AdmCommandState.WAITING_ID_OF_USER_HANDLE_FOR_DELETE.set()
    else:
        start_kb = await start_kb_handle(user_id)
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (/help)", reply_markup=start_kb)   
    
        
# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ balance(balance)
@dp.callback_query_handler(lambda c: c.data == "balance", state="*")
@block_check
async def balance_def(callback: types.CallbackQuery):
    user_name = callback.from_user.username
    balance = await get_balance(user_name)
    await callback.message.edit_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å üíµ: {balance} ‚ÇΩ", reply_markup=replenishment_balance)
    await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ help(help_callback)
@dp.callback_query_handler(lambda c: c.data == "help_callback", state="*")
@block_check
async def help_kb_handle(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–î–ª—è —Å–≤—è–∑–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –±–æ—Ç–∞ üßë‚Äçüíª –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: \n\nhttps://t.me/KING_08001", reply_markup=back_keyboard)
    await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())

"""*********************************************** –í–´–ë–û–† –õ–û–ö–ê–¶–ò–ò –ò –ü–û–ö–£–ü–ö–ê –í–ü–ù ************************************************************************"""
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏ (buy)
@dp.callback_query_handler(lambda c: c.data == "buy", state="*")
@block_check
async def buying_VPN_handle(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é üìç:\n\n<tg-spoiler><i>–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏</i></tg-spoiler>", reply_markup=location_keyboard, parse_mode="HTML")
    await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ª–æ–∫–∞—Ü–∏–π (Sweden_callback, Finland_callback, Germany_callback)
@dp.callback_query_handler(lambda c: c.data == "Sweden_callback" or c.data == "Finland_callback" or c.data == "Germany_callback")
@block_check
async def location_choose_def(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "Sweden_callback":
        await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é üìç: –®–≤–µ—Ü–∏—è üá∏üá™\nVPN –Ω–∞ –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ —Å–µ–π—á–∞—Å –Ω–µ—Ç—É –≤ –Ω–∞–ª–∏—á–∏–∏ ‚ùå", reply_markup=back_keyboard)
        #await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é: –®–≤–µ—Ü–∏—è üá∏üá™\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ {VPN_PRICE_TOKEN} ‚ÇΩ", reply_markup=pay_sweden_keyboard)
        #await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
        #await callback.answer("")

    elif callback.data == "Finland_callback":
        await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é üìç: –§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ {VPN_PRICE_TOKEN} ‚ÇΩ", reply_markup=pay_finland_keyboard)
        await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
        await callback.answer("")

    elif callback.data == "Germany_callback":
        await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é üìç: –ì–µ—Ä–º–∞–Ω–∏—è üá©üá™\nVPN –Ω–∞ –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ —Å–µ–π—á–∞—Å –Ω–µ—Ç—É –≤ –Ω–∞–ª–∏—á–∏–∏ ‚ùå", reply_markup=back_keyboard)
        #await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é: –ì–µ—Ä–º–∞–Ω–∏—è üá©üá™\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ {VPN_PRICE_TOKEN} ‚ÇΩ", reply_markup=pay_germany_keyboard)
        #await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
        #await callback.answer("")

# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É VPN.
async def buying_VPN_def(callback, country,  state):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ VPN –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã"""
    user_name = callback.from_user.username
    user_id = callback.from_user.id
    balance = await get_balance(user_name)
    if float(balance) < float(VPN_PRICE_TOKEN):
        await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå")
        await callback.message.edit_text("–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å üíµ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.", reply_markup=replenishment_balance)
        await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
    else:
        payment_key = await buy_operation(user_id=user_id, user_name=user_name)
        await callback.message.edit_text("–í—ã –∫—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä ‚úÖ! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏. –ö–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VPN –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        user_id = callback.from_user.id
        async with state.proxy() as data:
            data['payment_key'] = payment_key
        await edit_operations_history(user_id=user_id, user_name=user_name, operations=(-(float(VPN_PRICE_TOKEN))), description_of_operation="–ü–æ–∫—É–ø–∫–∞ VPN")
        await bot.send_message(BLAZER_CHAT_TOKEN, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: {user_id})\n–ó–∞–∫–∞–∑–∞–ª VPN –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏ üìç: {country}\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.", reply_markup=reply_buy_keyboard)
        await bot.send_message(ANUSH_CHAT_TOKEN, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: {user_id})\n–ó–∞–∫–∞–∑–∞–ª VPN –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏ üìç: {country}\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.", reply_markup=reply_buy_keyboard)
        await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())

# —Ö–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é, –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏ VPN. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ (Buying_sweden_VPN, Buying_finland_VPN, Buying_germany_VPN)
@dp.callback_query_handler(lambda c: c.data == "Buying_sweden_VPN" or c.data == "Buying_finland_VPN" or c.data == "Buying_germany_VPN")
@block_check
async def buying_VPN_handle(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "Buying_sweden_VPN":
        await buying_VPN_def(callback, "–®–≤–µ—Ü–∏—è üá∏üá™", state)
        await state.update_data(country="–®–≤–µ—Ü–∏—è üá∏üá™") 
    elif callback.data == "Buying_finland_VPN":
        await buying_VPN_def(callback, "–§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ", state)
        await state.update_data(country="–§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ")
    elif callback.data == "Buying_germany_VPN":
        await buying_VPN_def(callback, "–ì–µ—Ä–º–∞–Ω–∏—è üá©üá™", state)
        await state.update_data(country="–ì–µ—Ä–º–∞–Ω–∏—è üá©üá™")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.
@dp.callback_query_handler(lambda c: c.data == "reply_buy_keyboard")
@block_check
async def send_message(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–°–∫–∏–Ω—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
    await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
    await BuyVPNStates.WAITING_FOR_MESSAGE_TEXT.set()

@dp.message_handler(content_types=['text', 'document'],  state=BuyVPNStates.WAITING_FOR_MESSAGE_TEXT)
@block_check
async def send_message_handle(message: types.Message, state):
    user_name = message.from_user.username
    if message.document:
        file_id = message.document.file_id
        file_name = message.document.file_name
        async with state.proxy() as data:
            payment_key = str(data.get('payment_key'))
            country = data.get('country')
        if payment_key:
            try:
                db = sq.connect('UserINFO.db')
                cur = db.cursor()
                cur.execute(
                    "SELECT user_id FROM TempData WHERE payment_key = ?",
                    (payment_key,)
                )
                row = cur.fetchone()
                db.close()
                if row:
                    user_id = row[0]
                    await bot.send_document(user_id, file_id, caption="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VPN", reply_markup=insturtion_keyboard)
                    await update_vpn_state(user_id=user_id, user_name=user_name, location=country, active=True, expiration_days=30, name_of_vpn=file_name, vpn_config=file_id)
                    await bot.send_document(BLAZER_CHAT_TOKEN, file_id, caption=f"–§–∞–π–ª –¥–ª—è @{user_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úÖ")
                    await bot.send_document(ANUSH_CHAT_TOKEN, file_id, caption=f"–§–∞–π–ª –¥–ª—è @{user_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úÖ")
                    if message.reply_markup:
                        await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
                    else:
                        await save_temp_message(message.from_user.id, message.text, None)
                else:
                    await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é. –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞. ‚ùå")
            except ChatNotFound:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é. –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ùå")
        else:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå", reply_markup=back_keyboard)
        await state.finish()
    else:
        attempts = await state.get_data()
        if attempts.get("attempts", 0) >= 3:
            await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ ‚ùå")
            await state.finish()
        else:
            await state.update_data(attempts=attempts.get("attempts", 0) + 1)
            await message.answer("–ù—É–∂–Ω–æ —Å–∫–∏–Ω—É—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥–∞ VPN ‚ùå")

"""*********************************************************** –û–ë–†–ê–ë–û–¢–ö–ê –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ VPN *********************************************"""

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ (instruction_keyboard)
@dp.callback_query_handler(lambda c: c.data == "instruction_keyboard")
@block_check
async def instruction_handle(callback: types.CallbackQuery):
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é VPN üõ°:", reply_markup=device_keyboard)
    await callback.answer('')

@dp.callback_query_handler(lambda c: c.data == "Android_device_callback" or c.data == "IOS_device_callback" or c.data == "komp_device_callback" or c.data == "MacOS_callback")
@block_check
async def device_instruction_handle(callback: types.CallbackQuery):
    if callback.data == "Android_device_callback":
        await callback.message.answer_photo(photo="https://i.imgur.com/0feN5h0.jpeg", caption="""
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Android:
    1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –∏–∑ Google Play.
    2. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—É–Ω–Ω–µ–ª—è WireGuard –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ø–ª—é—Å¬ª –≤ –Ω–∏–∂–Ω–µ–º —É–≥–ª—É —ç–∫—Ä–∞–Ω–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–∫–æ—Ç–æ—Ä—É—é –º—ã –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ –∫ —ç—Ç–æ–π –Ω–∏–∂–µ) –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é.""")
        await callback.message.answer_photo(photo="https://i.imgur.com/MvB2M5t.png", caption="""
    3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä—è–¥–æ–º —Å –ø–æ—è–≤–∏–≤—à–∏–º—Å—è –∏–º–µ–Ω–µ–º —Ç—É–Ω–Ω–µ–ª—è. –°–∏—Å—Ç–µ–º–∞ Android –ø–æ–ø—Ä–æ—Å–∏—Ç –≤—ã–¥–∞—Ç—å WireGuard —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ VPN. –î–∞–π—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–Ω–∞–∫ –≤ –≤–∏–¥–µ –∫–ª—é—á–∞""", reply_markup=back_keyboard)
        
    elif callback.data == "IOS_device_callback":
        await callback.message.answer_photo(photo="https://i.imgur.com/x6Cawdu.png", caption="1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ AppStore."
"2. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥. –ö–æ–Ω—Ñ–∏–≥ –∏ QR-–∫–æ–¥ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –ø–∏—Å—å–º–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏—à–ª–æ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞, –∏–ª–∏ –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å VPN."
"3. –î–∞–ª–µ–µ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é ¬´–û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ ‚ÄúWireGuard‚Äù¬ª.")
        await callback.message.answer_photo(photo="https://i.imgur.com/fj5p8dJ.png", caption="4. –û—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–†–∞–∑—Ä–µ—à–∏—Ç—å¬ª (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞).")
        await callback.message.answer_photo(photo="https://i.imgur.com/scb4Or8.png", caption="1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ¬´WireGuard¬ª."
"2. –ù–∞–π–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å—Ç–∞—Ç—É—Å –≤ –ø–æ–ª–æ–∂–µ–Ω–∏–µ ¬´–í–∫–ª—é—á–µ–Ω–æ¬ª.", reply_markup=back_keyboard)

    elif callback.data == "komp_device_callback":
        await callback.message.answer_photo(photo="https://i.imgur.com/rzF9gGw.png", caption="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Windows:"
"1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞."
"2. –°–∫–∞—á–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª ‚Äî –∏–∑ –ø–∏—Å—å–º–∞, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏—à–ª–æ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞, –∏–ª–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å VPN."
"3. –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ WireGuard –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ò–º–ø–æ—Ä—Ç —Ç—É–Ω–Ω–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞¬ª (–ª–∏–±–æ ¬´–î–æ–±–∞–≤–∏—Ç—å —Ç—É–Ω–Ω–µ–ª—å¬ª) –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .conf.")  
        await callback.message.answer_photo(photo="https://i.imgur.com/Hk7mmoc.png", caption="4. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å¬ª –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å VPN-—Å–µ—Ä–≤–µ—Ä–æ–º.", reply_markup=back_keyboard)
    
    elif callback.data == "MacOS_callback":
        await callback.message.answer_photo(photo="https://i.imgur.com/2SjrQTL.png", caption="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è MacOS:"
"1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Wireguard —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ –∏–ª–∏ –∏–∑ AppStore."
"2. –°–∫–∞—á–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª ‚Äî –∏–∑ –ø–∏—Å—å–º–∞, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏—à–ª–æ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞, –∏–ª–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å VPN."
"3. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–£–ø—Ä–∞–≤–ª—è—Ç—å —Ç—É–Ω–Ω–µ–ª—è–º–∏ Wireguard¬ª."
"4. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ò–º–ø–æ—Ä—Ç —Ç—É–Ω–Ω–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞¬ª.")
        await callback.message.answer_photo(photo="https://i.imgur.com/ZGpSp5V.png", caption="5. –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª .conf. –î–∞–ª–µ–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
        await callback.message.answer_photo(photo="https://i.imgur.com/tRCkXZf.png", caption="–ì–æ—Ç–æ–≤–æ. –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å¬ª.", reply_markup=back_keyboard)
    await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
"""****************************************************************** –ü–†–û–î–õ–ï–ù–ò–ï VPN *************************************************************************"""
# —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è VPN(extension_vpn, extend_callback)
@dp.callback_query_handler(lambda c: c.data == "extension_vpn" or c.data == "extend_callback" or "extend_vpn" in c.data, state="*")
@block_check
async def extend_vpn_handle(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "extension_vpn":
        user_id = callback.from_user.id
        vpn_data = await get_vpn_data(user_id)
        if vpn_data:
            numbers = 0
            vpn_info_text = ""
            for vpn in vpn_data:
                numbers += 1
                location = vpn[3]
                active = vpn[4]
                expiration_date = datetime.datetime.strptime(str(vpn[5]), "%d.%m.%Y %H:%M:%S")
                days_remaining = (expiration_date - datetime.datetime.now()).days
                vpn_info_text += f"{numbers}. –õ–æ–∫–∞—Ü–∏—è üìç:   {location}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è üïò:   {expiration_date.strftime('%d.%m.%Y %H:%M:%S')}\n–û—Å—Ç–∞–ª–æ—Å—å ‚è≥:   {days_remaining} –¥–Ω–µ–π\n\n"
            kb_for_count = await addind_count_for_extend(count=numbers)
            if numbers == 1:
                await callback.message.edit_text("<b>‚Ä¢ –£ –≤–∞—Å –æ–¥–∏–Ω VPN üõ°:</b>\n\n" + vpn_info_text + f"<b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN –Ω–∞ 30 –¥–Ω–µ–π —Å—Ç–æ–∏—Ç {VPN_PRICE_TOKEN} ‚ÇΩ üíµ\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–ª–∏—Ç—å VPN üõ°</b>", reply_markup=extend_keyboard, parse_mode="HTML")
            else:
                await callback.message.edit_text(f"<b>‚Ä¢ –í–∞—à–∏ VPN üõ°:</b>\n\n{vpn_info_text}<b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN –Ω–∞ 30 –¥–Ω–µ–π —Å—Ç–æ–∏—Ç {VPN_PRICE_TOKEN} ‚ÇΩ üíµ. –í—ã–±–µ—Ä–∏—Ç–µ VPN üõ°, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å:</b>", reply_markup=kb_for_count, parse_mode="HTML") 
            await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
        else: 
            await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç—É –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ VPN ‚ùå! –í–∞–º –µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ", reply_markup=buy_keyboard)
            await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())

    elif callback.data == "extend_callback":
        user_name = callback.from_user.username
        balance = await get_balance(user_name)
        user_id = callback.from_user.id
        if float(balance) >= float(VPN_PRICE_TOKEN):
            await pay_operation(VPN_PRICE_TOKEN, user_id)
            await edit_operations_history(user_id=user_id, user_name=user_name, operations=(-(float(VPN_PRICE_TOKEN))), description_of_operation="–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN")
            vpn_data = await get_vpn_data(user_id)
            days_remaining = ""
            for vpn in vpn_data:
                id = vpn[0]
                location = vpn[3]
                active = vpn[4]
                expiration_date = datetime.datetime.strptime(vpn[5], "%d.%m.%Y %H:%M:%S")
                name_of_vpn = vpn[6]
                vpn_config = vpn[7]
                days_remaining = (expiration_date - datetime.datetime.now()).days
            new_expiration_date = expiration_date + datetime.timedelta(days=30)
            await extend_vpn_state(user_id=user_id, location=location, active=True, expiration_date=new_expiration_date, id=id)    
            await callback.message.edit_text(f"VPN üõ° –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ 30 –¥–Ω–µ–π ‚úÖ \n\n–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è VPN üõ° –æ—Å—Ç–∞–ª–æ—Å—å {days_remaining + 30} –¥–Ω–µ–π ‚è≥", reply_markup=back_keyboard)
            vpn_info_text = f"–õ–æ–∫–∞—Ü–∏—è üìç:   {location}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è üïò:   {expiration_date.strftime('%d.%m.%Y %H:%M:%S')}\n–û—Å—Ç–∞–ª–æ—Å—å ‚è≥:   {days_remaining} –¥–Ω–µ–π\n\n"
            await bot.send_document(ANUSH_CHAT_TOKEN, vpn_config, caption=f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: {user_id})\n–ü—Ä–æ–¥–ª–∏–ª VPN üõ° –Ω–∞ 30 –¥–Ω–µ–π:</b>\n\n{vpn_info_text}", parse_mode="HTML")
            await bot.send_document(BLAZER_CHAT_TOKEN, vpn_config, caption=f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: {user_id})\n–ü—Ä–æ–¥–ª–∏–ª VPN üõ° –Ω–∞ 30 –¥–Ω–µ–π:</b>\n\n{vpn_info_text}")
            await save_temp_message(callback.from_user.id, callback.message.text, None)
        else:
            await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå")
            await callback.message.edit_text("–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å üíµ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.", reply_markup=replenishment_balance)
            await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
    
    elif "extend_vpn" in callback.data:
        user_id = callback.from_user.id
        user_name = callback.from_user.username
        vpn_number = callback.data.split('_')[2]
        vpn_data = await get_vpn_data(user_id)
        vpn = vpn_data[int(vpn_number) - int(1)]
        balance = await get_balance(user_name)
        if float(balance) >= float(VPN_PRICE_TOKEN):
            await pay_operation(VPN_PRICE_TOKEN, user_id)
            await edit_operations_history(user_id=user_id, user_name=user_name, operations=int(-(float(VPN_PRICE_TOKEN))), description_of_operation="–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN")
            id = vpn[0]
            location = vpn[3]
            expiration_date = datetime.datetime.strptime(vpn[5], "%d.%m.%Y %H:%M:%S")
            name_of_vpn = vpn[6]
            vpn_config = vpn[7]
            days_remaining = (expiration_date - datetime.datetime.now()).days
            new_expiration_date = expiration_date + datetime.timedelta(days=30)
            vpn_info_text = f"–õ–æ–∫–∞—Ü–∏—è üìç:   {location}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è üïò:   {expiration_date.strftime('%d.%m.%Y %H:%M:%S')}\n–û—Å—Ç–∞–ª–æ—Å—å ‚è≥:   {days_remaining} –¥–Ω–µ–π\n\n"
            await extend_vpn_state(user_id=user_id, location=location, active=True, expiration_date=new_expiration_date, id=id)
            await callback.message.edit_text(f"VPN üõ° –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ 1 –º–µ—Å—è—Ü ‚úÖ \n\n–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è VPN üõ° –æ—Å—Ç–∞–ª–æ—Å—å {days_remaining + 30} –¥–Ω–µ–π ‚è≥", reply_markup=back_keyboard)
            await bot.send_document(ANUSH_CHAT_TOKEN, vpn_config, caption=f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: {user_id})\n–ü—Ä–æ–¥–ª–∏–ª VPN üõ° –Ω–∞ 30 –¥–Ω–µ–π:</b>\n\n{vpn_info_text}", parse_mode="HTML")
            await bot.send_document(BLAZER_CHAT_TOKEN, vpn_config, caption=f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: {user_id})\n–ü—Ä–æ–¥–ª–∏–ª VPN üõ° –Ω–∞ 30 –¥–Ω–µ–π:</b>\n\n{vpn_info_text}")
            await save_temp_message(callback.from_user.id, callback.message.text, None)
        else:
            await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå")
            await callback.message.edit_text("–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å üíµ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.", reply_markup=replenishment_balance)
            await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())

            
"""************************************************** –°–ò–°–¢–ï–ú–ê –ü–û–ü–û–õ–ù–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê *************************************************"""

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã(replenishment)
@dp.callback_query_handler(lambda c: c.data == "replenishment", state="*")
@block_check
async def replenishment_handle(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è üíµ, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ: ", reply_markup=numbers_for_replenishment)
    await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
    await PaymentStates.WAITING_FOR_AMOUNT.set()
    await callback.answer("")

@dp.callback_query_handler(lambda c: c.data == "200_for_replenishment_callback" or c.data == "500_for_replenishment_callback" or c.data == "1000_for_replenishment_callback", state="*")
@block_check
async def rubls_200_for_replenishment(callback: types.CallbackQuery, state):
    global amount
    if callback.data == "200_for_replenishment_callback":
        amount = 200
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–≤–æ–µ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã üì©:", reply_markup=back_keyboard)
    elif callback.data == "500_for_replenishment_callback":
        amount = 500
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–≤–æ–µ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã üì©:", reply_markup=back_keyboard)
    elif callback.data == "1000_for_replenishment_callback":
        amount = 1000
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–≤–æ–µ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã üì©: ", reply_markup=back_keyboard)
    await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
    await PaymentStates.WAITING_FOR_USER_EMAIL_HANDLE.set()           

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
@dp.message_handler(state=PaymentStates.WAITING_FOR_AMOUNT)
@block_check
async def handle_amount(message: types.Message, state):
    try:
        global amount
        amount = int(message.text)
        if amount > 0:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–≤–æ–µ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã üì©: ", reply_markup=back_keyboard)
            await PaymentStates.WAITING_FOR_USER_EMAIL_HANDLE.set()
        else:
            attempts = await state.get_data()
            if attempts.get("attempts", 0) >= 3:
                await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /replenishment", back_keyboard)
                await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
                await state.finish()
            else:
                await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                await message.answer("–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 ‚ùå")
    except ValueError:
        attempts = await state.get_data()
        if attempts.get("attempts", 0) >= 3:
            await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /replenishment ")
            await state.finish()
        else:
            await state.update_data(attempts=attempts.get("attempts", 0) + 1)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ).")

@dp.message_handler(state=PaymentStates.WAITING_FOR_USER_EMAIL_HANDLE)
@block_check
async def user_email_handle(message: types.Message, state: FSMContext):
    global user_email
    user_email = message.text
    if not re.match(r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", user_email):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã üì©. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞ ‚ùå", reply_markup=back_keyboard)
        return
    
    if len(user_email) > 254:
        await message.answer("–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞.", reply_markup=back_keyboard)
        return

    try:
        dns.resolver.resolve(user_email.split('@')[1], 'MX')
    except dns.resolver.NXDOMAIN:
        await message.answer("–î–æ–º–µ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞.", reply_markup=back_keyboard)
        return

    await message.answer("–í–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –ø—Ä–∏–Ω—è—Ç ‚úÖ \n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É:", reply_markup=payment_type)
    await PaymentStates.WAINING_FOR_PAYMENT_TYPE.set()

       
@dp.callback_query_handler(lambda c: c.data == "bank_card_payment_callback" or c.data == "yoomoney_payment_callback" or c.data == "TinkoffPay_callback" or c.data == "SberPay_callback" or c.data == "SBP_callback", state=PaymentStates.WAINING_FOR_PAYMENT_TYPE)
@block_check
async def payment_type_handle(callback: types.CallbackQuery, state):
    if callback.data == "bank_card_payment_callback":
        try:
            payment_url, payment_id = create_payment(float(amount), callback.from_user.id, "bank_card", user_email)
        except Exception as e:
            await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ùå", reply_markup=back_keyboard)
            return
    elif callback.data == "yoomoney_payment_callback":
        try:
            payment_url, payment_id = create_payment(float(amount), callback.from_user.id, "yoo_money", user_email)
        except Exception as e:
            await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ùå", reply_markup=back_keyboard)
            return
    elif callback.data == "TinkoffPay_callback":
        try:
            payment_url, payment_id = create_payment(float(amount), callback.from_user.id, "tinkoff_bank", user_email)
        except Exception as e:
            await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ùå", reply_markup=back_keyboard)
            return
    elif callback.data == "SberPay_callback":
        try:
            payment_url, payment_id = create_payment(float(amount), callback.from_user.id, "sberbank", user_email)
        except Exception as e:
            await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ùå", reply_markup=back_keyboard)
            return
    elif callback.data == "SBP_callback":
        try:
            payment_url, payment_id = create_payment(float(amount), callback.from_user.id, "sbp", user_email)
        except Exception as e:
            await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ùå", reply_markup=back_keyboard)
            return
    await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
        
    payment_button = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url),
                    InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"checking_payment_{payment_id}")
                ]
            ]
        )
    await callback.message.edit_text("–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. ‚úÖ", reply_markup=payment_button) 
    await state.finish() 

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏, –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è(checking_payment_)
@dp.callback_query_handler(lambda c: "checking_payment" in c.data)
@block_check
async def succesfull_payment(callback: types.CallbackQuery):
    payment_id = check(callback.data.split('_')[-1])
    user_name = callback.from_user.username
    user_id = callback.from_user.id
    if payment_id:
        await callback.message.edit_text('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ \n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å /balance')
        await pay_operation(amount, user_id)
        await edit_operations_history(user_id=user_id, user_name=user_name, operations=(+(int(amount))), description_of_operation="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")
        await callback.answer("")
    else:
        await callback.answer('–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞.')

"""****************************************************** –°–ò–°–¢–ï–ú–ê –ü–û–î–î–ï–†–ñ–ö–ò *******************************************************"""
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (support_callback)
@dp.callback_query_handler(lambda c: c.data == "support_callback", state="*")
async def support_handle(callback: types.CallbackQuery):
    await callback.message.edit_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ß–µ–º –º–æ–∂–µ–º –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã?", reply_markup=back_keyboard)
    await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
    await SupportStates.WAITING_FOR_QUESTION.set()
    await callback.answer("")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
@dp.message_handler(state=SupportStates.WAITING_FOR_QUESTION)
async def process_question(message: types.Message,  state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user.username
    question = message.text

    support_request = SupportRequest(user_id=user_id, user_name=user_name, question=question)
    support_requests.append(support_request)
    start_kb = await start_kb_handle(user_id)
    await message.answer("–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ.", reply_markup=start_kb)
    await bot.send_message(BLAZER_CHAT_TOKEN, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: {user_id})\n–ó–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å:\n{question}", reply_markup=reply_keyboard)
    await bot.send_message(ANUSH_CHAT_TOKEN, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: {user_id})\n–ó–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å:\n{question}", reply_markup=reply_keyboard)
    if message.reply_markup:
        await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
    else:
        await save_temp_message(message.from_user.id, message.text, None)
    await state.finish()

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏, –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (reply_keyboard)
@dp.callback_query_handler(lambda c: c.data == "reply_keyboard")
async def process_answer(callback: types.CallbackQuery, state: FSMContext):
    for i, support_request in enumerate(support_requests):
        if support_request.user_id == callback.from_user.id and support_request.answer:
            await callback.message.edit_text("–ù–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –¥–∞–Ω –æ—Ç–≤–µ—Ç. ‚ùå")
            return
        else:
            await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç:", reply_markup=back_keyboard)
            await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
            await callback.answer("")
            await SupportStates.WAITING_FOR_MODERATOR_ANSWER.set()


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
@dp.message_handler(state=SupportStates.WAITING_FOR_MODERATOR_ANSWER, content_types=['text', 'document'])
async def replying_for_moder(message: types.Message, state):
    user_name = message.from_user.username
    user_id = message.from_user.id
    answer = message.text

    for i, support_request in enumerate(support_requests):
        if support_request.user_id == message.from_user.id:
            support_requests[i] = SupportRequest(
                user_id=support_request.user_id,
                user_name=support_request.user_name,
                question=support_request.question,
                answer=answer
            )
            try:
                await bot.send_message(support_request.user_id, f"<b>‚Ä¢ –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{answer}", reply_markup=back_keyboard, parse_mode="HTML")
                await bot.send_message(ANUSH_CHAT_TOKEN, f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user_name} (ID: {user_id})")
                await bot.send_message(BLAZER_CHAT_TOKEN, f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user_name} (ID: {user_id})")
            except ChatNotFound:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            break
    if message.reply_markup:
        await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
    else:  
        await save_temp_message(message.from_user.id, message.text, None)
    await state.finish()


"""********************************************************* –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê *************************************************"""

@dp.callback_query_handler(lambda c: c.data == "ref_system_callback", state="*")
@block_check
async def ref_system(callback: types.CallbackQuery):
    user_id = callback.message.from_user.id
    referrals = await get_referrer_username(user_id)
    if referrals != None:
        referrals = referrals.split("\n")
    else:
        referrals = referrals
    text = f"<b>‚Ä¢ –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b> <pre>https://t.me/blazervpnbot?start={user_id}</pre>\n\n<i>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å–æ —Å–≤–æ–∏–º–∏ –∑–Ω–∞–∫–æ–º—ã–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å 5 ‚ÇΩ —Å–µ–±–µ –Ω–∞ –±–∞–ª–∞–Ω—Å.</i>\n\n"
    if referrals:
        text += "–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n"
        for username in referrals:
            text += f"@{username} \n" 
    else:
        text += "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤."
    await callback.message.edit_text(text, reply_markup=back_keyboard, parse_mode="HTML")
    if callback.message.reply_markup:
        await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
    else:
        await save_temp_message(callback.from_user.id, callback.message.text, None)


"""********************************************************** –°–ò–°–¢–ï–ú–ê –ü–†–û–ú–û–ö–û–î–û–í **************************************************************"""

@dp.callback_query_handler(lambda c: c.data == "promo_callback", state="*")
@block_check
async def promo_handle(callback: types.CallbackQuery, state):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–æ–∫–æ–¥ üéü:", reply_markup=back_keyboard)
    if callback.message.reply_markup:
        await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
    else:
        await save_temp_message(callback.from_user.id, callback.message.text, None)
    await PromocodeStates.WAITING_FOR_USER_PROMOCODE.set()

@dp.message_handler(state=PromocodeStates.WAITING_FOR_USER_PROMOCODE)
@block_check
async def handle_user_promo(message: types.Message, state):
    user_promo = message.text
    user_id = message.from_user.id
    user_name = message.from_user.username
    check_used_promo = await check_promocode_used(user_id, PROMOCODE_TOKEN)
    if str(user_promo) == str(PROMOCODE_TOKEN) and check_used_promo == False:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ ‚úÖ \n–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ: 20 —Ä—É–±–ª–µ–π üíµ!", reply_markup=back_keyboard)
        await pay_operation(20, user_id)
        await edit_operations_history(user_id=user_id, user_name=user_name, operations=(+(int(20))), description_of_operation="–ü—Ä–æ–º–æ–∫–æ–¥")
        await save_promocode(user_id, user_promo)
        if message.reply_markup:
            await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
        else:
            await save_temp_message(message.from_user.id, message.text, None)
    elif str(user_promo) == str(PROMOCODE_TOKEN) and check_used_promo == True:
        await message.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ ‚ùå\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ –≤ –≤–∫", reply_markup=promocode_keyboard)    
    else:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ üéü, –ª–∏–±–æ –æ–Ω –Ω–µ–∞–∫—Ç—É–∞–ª–µ–Ω ‚ùå\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ –≤ –≤–∫", reply_markup=promocode_keyboard)
        if message.reply_markup:
            await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
        else:
            await save_temp_message(message.from_user.id, message.text, None)
    await state.finish()

"""*********************************************** –û–ë–†–ê–ë–û–¢–ö–ê –ò–ù–§–û–†–ú–ê–¶–ò–ò –û VPN –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ******************************************"""

@dp.callback_query_handler(lambda c: c.data == "myvpn_callback", state="*")
@block_check
async def myvpn_handle(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    vpn_data = await get_vpn_data(user_id)
    if vpn_data:
        vpn_info_text = "<b>‚Ä¢ –í–∞—à–∏ VPN üõ°</b>:\n\n"
        for vpn in vpn_data:
            location = vpn[3]
            active = vpn[4]
            expiration_date = datetime.datetime.strptime(vpn[5], "%d.%m.%Y %H:%M:%S")
            days_remaining = (expiration_date - datetime.datetime.now()).days
            vpn_info_text += f"–õ–æ–∫–∞—Ü–∏—è üìç:   {location}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è üïò:   {expiration_date.strftime('%d.%m.%Y %H:%M:%S')}\n–û—Å—Ç–∞–ª–æ—Å—å ‚è≥:   {days_remaining} –¥–Ω–µ–π\n\n"
        await callback.message.edit_text(vpn_info_text, reply_markup=buy_keyboard, parse_mode="HTML")
        if callback.message.reply_markup:
            await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
        else:
            await save_temp_message(callback.from_user.id, callback.message.text, None)
    else:
        await callback.message.edit_text(f"–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ VPN ‚ùå", reply_markup=own_vpn_keyboard)
        if callback.message.reply_markup:
            await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
        else:
            await save_temp_message(callback.from_user.id, callback.message.text, None)

"""**************************************************** –û–ë–†–ê–ë–û–¢–ö–ê –ò–°–¢–û–†–ò–ò –û–ü–ï–†–ê–¶–ò–ô ***********************************************"""

@dp.callback_query_handler(lambda c: c.data == "history_of_operations_callback")
@block_check
async def history_of_opeartions_handle(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_name = callback.from_user.username
    operation_history = await getting_operation_history(user_id=user_id)
    if operation_history is None:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π ‚ùå", reply_markup=replenishment_balance)
        return
    message_text = "<b>‚Ä¢ üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:</b>\n\n"
    for operation in operation_history:
        id, user_db_id, user_db_name, operations, time_of_operation, description_of_operation = operation

        operations = operations.split(",")
        time_of_operation = time_of_operation.split(",")
        description_of_operation = description_of_operation.split(",")

        for i in range(len(operations)):
            operation_value = operations[i]
            if "-" not in operation_value:
                operation_value = "+" + operation_value

            message_text += f"<i>{time_of_operation[i]}</i> - <b>{description_of_operation[i]}</b>:  <code>{operation_value}</code> ‚ÇΩ\n"

    await callback.message.edit_text(message_text, reply_markup=back_keyboard, parse_mode="HTML")
    await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())


"""************************************************************* –í–†–ï–ú–ï–ù–ù–´–ï –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ******************************************************"""
@dp.callback_query_handler(lambda c: c.data == "adm_panel_callback")
@block_check
async def adm_panel_handle(callback: types.CallbackQuery):
    await callback.message.edit_text("<b>‚Ä¢ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ü§ñ: </b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: ", reply_markup=adm_panel_keyboard, parse_mode="HTML")
    if callback.message.reply_markup:
        await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
    else:
        await save_temp_message(callback.from_user.id, callback.message.text, None)
    await callback.answer('')


@dp.callback_query_handler(lambda c: c.data == "addind_balance_callback" or c.data == "deleting_balance_callback" or c.data == "user_data_callback" or c.data == "vpn_user_callback" or c.data == "ban_user_callback" or c.data == "unban_user_callback")
@block_check
async def adm_panel_buttons_handler(callback: types.CallbackQuery):
    # —É–¥–∞–ª–µ–Ω–∏–µ –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    if callback.data == "addind_balance_callback":
        await callback.message.edit_text("‚Ä¢ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: </b>\n\n–í–≤–µ–¥–∏—Ç–µ <b>ID</b> –∏–ª–∏ <b>USERNAME</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=back_keyboard, parse_mode="HTML")
        if callback.message.reply_markup:
            await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
        else:
            await save_temp_message(callback.from_user.id, callback.message.text, None)
        await AdmCommandState.WAITING_ID_OF_USER_FOR_ADD.set()
    elif callback.data == "deleting_balance_callback":
        await callback.message.edit_text("‚Ä¢ <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: </b>\n\n–í–≤–µ–¥–∏—Ç–µ <b>ID</b> –∏–ª–∏ <b>USERNAME</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=back_keyboard, parse_mode="HTML")
        if callback.message.reply_markup:
            await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
        else:
            await save_temp_message(callback.from_user.id, callback.message.text, None)
        await AdmCommandState.WAITING_ID_OF_USER_HANDLE_FOR_DELETE.set()

    elif callback.data == "user_data_callback":
        await callback.message.edit_text("<b>‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ üóÉ:</b> \n\n–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ USERNAME –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å: ", reply_markup=back_keyboard, parse_mode="HTML")
        await callback.answer('')
        if callback.message.reply_markup:
            await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
        else:
            await save_temp_message(callback.from_user.id, callback.message.text, None)
        await AdmButtonState.WAITING_FOR_USER_ID_FOR_USER_INFO.set()

    elif callback.data == "vpn_user_callback":
        await callback.message.edit_text("<b>‚Ä¢ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üõ°Ô∏è: </b>\n\n–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ USERNAME –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ VPN –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å: ", reply_markup=back_keyboard, parse_mode="HTML")
        await callback.answer('')
        if callback.message.reply_markup:
            await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
        else:
            await save_temp_message(callback.from_user.id, callback.message.text, None)
        await UserVPNInfo.WAITING_FOR_USER_ID_FOR_USER_VPN_INFO.set()
    elif callback.data == "ban_user_callback":
        await callback.message.edit_text("<b>‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ùå:</b>\n\n–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ USERNAME –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:", parse_mode="HTML", reply_markup=back_keyboard)
        await callback.answer('')
        if callback.message.reply_markup:
            await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
        else:
            await save_temp_message(callback.from_user.id, callback.message.text, None)
        await BanUserState.WAITING_FOR_USER_ID.set()
    elif callback.data == "unban_user_callback":
        await callback.message.edit_text("<b>‚Ä¢ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚úÖ:</b>\n\n–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ USERNAME –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:", parse_mode="HTML", reply_markup=back_keyboard)
        await callback.answer('')
        if callback.message.reply_markup:
            await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
        else:
            await save_temp_message(callback.from_user.id, callback.message.text, None)
        await UnbanUserState.WAITING_FOR_USER_ID.set()

@dp.callback_query_handler(state=AdmButtonState.WAITING_FOR_CALLBACK_BUTTONS)
@block_check
async def unban_user2_handle(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    try:
        user_id = int(data.get("user_id"))
        user_name = None
        is_registrated_user = await find_user_data(user_id=user_id)
        if is_registrated_user:
            result = await unban_users_handle(user_id=user_id)
            if result != "unbanned":
                await callback.message.answer("<b>‚Ä¢ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚úÖ:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚úÖ", parse_mode="HTML", reply_markup=back_keyboard)
            else:
                await callback.message.answer("<b>‚Ä¢ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚úÖ:</b>\n\n–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)
            await state.finish()
        else:
            attempts = await state.get_data()
            if attempts.get("attempts", 0) >= 3:
                await callback.message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /add –ò–ó–ú–ï–ù–ò–¢–¢–¢–¨–¨–¨–¨ ")
                await state.finish()
            else:
                await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                await callback.message.answer("<b>‚Ä¢ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚úÖ:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>ID</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∏–ª–∏ USERNAME –∑–∞–Ω–æ–≤–æ:", parse_mode="HTML", reply_markup=back_keyboard)
    except Exception as e:
        user_name = data.get("user_name")
        user_id = None
        is_registrated_user = await find_user_data(user_name=user_name)
        if is_registrated_user:
            result = await unban_users_handle(user_name=user_name)
            if result != "unbanned":
                await callback.message.answer("<b>‚Ä¢ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚úÖ:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚úÖ", parse_mode="HTML", reply_markup=back_keyboard)
            else:
                await callback.message.answer("<b>‚Ä¢ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚úÖ:</b>\n\n–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)

            await state.finish()
        else:
            attempts = await state.get_data()
            if attempts.get("attempts", 0) >= 3:
                await callback.message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /add –ò–ó–ú–ï–ù–ò–¢–¢–¢–¨–¨–¨–¨ ")
                await state.finish()
            else:
                await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                await callback.message.answer("<b>‚Ä¢ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚úÖ:</b>\n\nn–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>USERNAME</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∏–ª–∏ USERNAME –∑–∞–Ω–æ–≤–æ:", parse_mode="HTML", reply_markup=back_keyboard)



@dp.message_handler(state=UnbanUserState.WAITING_FOR_USER_ID)
@block_check
async def unban_user_handle(message: types.Message, state):
    try:
        user_id = int(message.text)
        user_name = None
        is_registrated_user = await find_user_data(user_id=user_id)
        if is_registrated_user:
            result = await unban_users_handle(user_id=user_id)
            if result != "unbanned":
                await message.answer("<b>‚Ä¢ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚úÖ:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚úÖ", parse_mode="HTML", reply_markup=back_keyboard)
            else:
                await message.answer("<b>‚Ä¢ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚úÖ:</b>\n\n–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)
            await state.finish()
        else:
            attempts = await state.get_data()
            if attempts.get("attempts", 0) >= 3:
                await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /add –ò–ó–ú–ï–ù–ò–¢–¢–¢–¨–¨–¨–¨ ")
                await state.finish()
            else:
                await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                await message.answer("<b>‚Ä¢ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚úÖ:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>ID</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∏–ª–∏ USERNAME –∑–∞–Ω–æ–≤–æ:", parse_mode="HTML", reply_markup=back_keyboard)
    except Exception as e:
        user_name = message.text
        user_id = None
        is_registrated_user = await find_user_data(user_name=user_name)
        if is_registrated_user:
            result = await unban_users_handle(user_name=user_name)
            if result != "unbanned":
                await message.answer("<b>‚Ä¢ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚úÖ:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚úÖ", parse_mode="HTML", reply_markup=back_keyboard)
            else:
                await message.answer("<b>‚Ä¢ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚úÖ:</b>\n\n–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)

            await state.finish()
        else:
            attempts = await state.get_data()
            if attempts.get("attempts", 0) >= 3:
                await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /add –ò–ó–ú–ï–ù–ò–¢–¢–¢–¨–¨–¨–¨ ")
                await state.finish()
            else:
                await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                await message.answer("<b>‚Ä¢ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚úÖ:</b>\n\nn–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>USERNAME</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∏–ª–∏ USERNAME –∑–∞–Ω–æ–≤–æ:", parse_mode="HTML", reply_markup=back_keyboard)




@dp.callback_query_handler(lambda c: c.data == "ban_user2_callback", state=AdmButtonState.WAITING_FOR_CALLBACK_BUTTONS)
@block_check
async def ban_user2_handle(callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        try:
            user_id = int(data.get("user_id"))
            user_name = None
            is_registrated_user = await find_user_data(user_id=user_id)
            if is_registrated_user:
                result = await ban_users_handle(user_id=user_id)
                if result != "banned":
                    await callback.message.answer("<b>‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ùå:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚úÖ", parse_mode="HTML", reply_markup=back_keyboard)
                else:
                    await callback.message.answer("<b>‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ùå:</b>\n\n–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–Ω–µ.", parse_mode="HTML", reply_markup=back_keyboard)
                await state.finish()
            else:
                attempts = await state.get_data()
                if attempts.get("attempts", 0) >= 3:
                    await callback.message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /add –ò–ó–ú–ï–ù–ò–¢–¢–¢–¨–¨–¨–¨ ")
                    await state.finish()
                else:
                    await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                    await callback.message.answer("<b>‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ùå:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>ID</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∏–ª–∏ USERNAME –∑–∞–Ω–æ–≤–æ:", parse_mode="HTML", reply_markup=back_keyboard)
        except Exception as e:
            user_name = data.get("user_name")
            user_id = None
            is_registrated_user = await find_user_data(user_name=user_name)
            if is_registrated_user:
                result = await ban_users_handle(user_name=user_name)
                if result != "banned":
                    await callback.message.answer("<b>‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ùå:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚úÖ", parse_mode="HTML", reply_markup=back_keyboard)
                else:
                    await callback.message.answer("<b>‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ùå:</b>\n\n–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–Ω–µ.", parse_mode="HTML", reply_markup=back_keyboard)

                await state.finish()
            else:
                attempts = await state.get_data()
                if attempts.get("attempts", 0) >= 3:
                    await callback.message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /add –ò–ó–ú–ï–ù–ò–¢–¢–¢–¨–¨–¨–¨ ")
                    await state.finish()
                else:
                    await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                    await callback.message.answer("<b>‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ùå:</b>\n\nn–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>USERNAME</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∏–ª–∏ USERNAME –∑–∞–Ω–æ–≤–æ:", parse_mode="HTML", reply_markup=back_keyboard)


@dp.message_handler(state=BanUserState.WAITING_FOR_USER_ID)
@block_check
async def ban_user_handle(message: types.Message, state):
    try:
        user_id = int(message.text)
        user_name = None
        is_registrated_user = await find_user_data(user_id=user_id)
        if is_registrated_user:
            result = await ban_users_handle(user_id=user_id)
            if result != "banned":
                await message.answer("<b>‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ùå:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚úÖ", parse_mode="HTML", reply_markup=back_keyboard)
            else:
                await message.answer("<b>‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ùå:</b>\n\n–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–Ω–µ.", parse_mode="HTML", reply_markup=back_keyboard)
            await state.finish()
        else:
            attempts = await state.get_data()
            if attempts.get("attempts", 0) >= 3:
                await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /add –ò–ó–ú–ï–ù–ò–¢–¢–¢–¨–¨–¨–¨ ")
                await state.finish()
            else:
                await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                await message.answer("<b>‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ùå:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>ID</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∏–ª–∏ USERNAME –∑–∞–Ω–æ–≤–æ:", parse_mode="HTML", reply_markup=back_keyboard)
    except Exception as e:
        user_name = message.text
        user_id = None
        is_registrated_user = await find_user_data(user_name=user_name)
        if is_registrated_user:
            result = await ban_users_handle(user_name=user_name)
            if result != "banned":
                await message.answer("<b>‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ùå:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚úÖ", parse_mode="HTML", reply_markup=back_keyboard)
            else:
                await message.answer("<b>‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ùå:</b>\n\n–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–Ω–µ.", parse_mode="HTML", reply_markup=back_keyboard)

            await state.finish()
        else:
            attempts = await state.get_data()
            if attempts.get("attempts", 0) >= 3:
                await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /add –ò–ó–ú–ï–ù–ò–¢–¢–¢–¨–¨–¨–¨ ")
                await state.finish()
            else:
                await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                await message.answer("<b>‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ùå:</b>\n\nn–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>USERNAME</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∏–ª–∏ USERNAME –∑–∞–Ω–æ–≤–æ:", parse_mode="HTML", reply_markup=back_keyboard)



# –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message_handler(state=UserVPNInfo.WAITING_FOR_USER_ID_FOR_USER_VPN_INFO)
@block_check
async def find_info_about_users_vpn(message: types.Message, state):
    try:
        user_id = int(message.text)
        user_name = None
        vpn_data = await get_vpn_data(user_id=user_id)
        if vpn_data != None:
            for vpn in vpn_data:
                id = vpn[0]
                user_id = vpn[1]
                user_name = vpn[2]
                location = vpn[3]
                active = vpn[4]
                expiration_date = datetime.datetime.strptime(vpn[5], "%d.%m.%Y %H:%M:%S")
                days_remaining = (expiration_date - datetime.datetime.now()).days
                name_of_vpn = vpn[6]
                vpn_config = vpn[7]
                await bot.send_document(message.from_user.id, vpn_config, caption=f"<b>‚Ä¢ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üõ°Ô∏è: </b>\n\n–õ–æ–∫–∞—Ü–∏—è üìç:   {location}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è üïò:   {expiration_date.strftime('%d.%m.%Y %H:%M:%S')}\n–û—Å—Ç–∞–ª–æ—Å—å ‚è≥:   {days_remaining} –¥–Ω–µ–π\n\n", parse_mode="HTML")
        else:
            await message.answer("<b>‚Ä¢ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üõ°Ô∏è: </b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞ –Ω–µ –∏–º–µ–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ VPN ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)
    except Exception as e:
        user_name = message.text
        user_id = None
        vpn_data = await get_vpn_data(user_name=user_name)
        user_info = await find_user_data(user_name=user_name)
        if user_info != None:
            if vpn_data != None:
                for vpn in vpn_data:
                    id = vpn[0]
                    user_id = vpn[1]
                    user_name = vpn[2]
                    location = vpn[3]
                    active = vpn[4]
                    expiration_date = datetime.datetime.strptime(vpn[5], "%d.%m.%Y %H:%M:%S")
                    days_remaining = (expiration_date - datetime.datetime.now()).days
                    name_of_vpn = vpn[6]
                    vpn_config = vpn[7]
                    await bot.send_document(message.from_user.id, vpn_config, caption=f"<b>‚Ä¢ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üõ°Ô∏è: </b>\n\n–õ–æ–∫–∞—Ü–∏—è üìç:   {location}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è üïò:   {expiration_date.strftime('%d.%m.%Y %H:%M:%S')}\n–û—Å—Ç–∞–ª–æ—Å—å ‚è≥:   {days_remaining} –¥–Ω–µ–π\n\n", parse_mode="HTML")
            else:
                await message.answer("<b>‚Ä¢ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üõ°Ô∏è: </b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞ –Ω–µ –∏–º–µ–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ VPN ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)
        else:
            attempts = await state.get_data()
            if attempts.get("attempts", 0) >= 3:
                await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /add –ò–ó–ú–ï–ù–ò–¢–¢–¢–¨–¨–¨–¨ ")
                await state.finish()
            else:
                await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                await message.answer("<b>‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ üóÉ</b>:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>USERNAME</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∏–ª–∏ USERNAME –∑–∞–Ω–æ–≤–æ: ", parse_mode="HTML", reply_markup=back_keyboard)
        
            await message.answer("<b>‚Ä¢ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üõ°Ô∏è: </b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º USERNAME –Ω–µ –Ω–∞–π–¥–µ—Ç ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ USERNAME –∏–ª–∏ ID –∑–∞–Ω–æ–≤–æ:", parse_mode="HTML", reply_markup=back_keyboard)
            
# –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@dp.message_handler(state=AdmButtonState.WAITING_FOR_USER_ID_FOR_USER_INFO)
@block_check
async def find_user_info_for_adm_panel(message: types.Message, state: FSMContext):
    try:
        user_id_for_find_info = int(message.text)
        user_name_for_find_info = None
        user_info = await find_user_data(user_id=user_id_for_find_info)
    except Exception as e:
        user_name_for_find_info = message.text
        user_id_for_find_info = None
        user_info = await find_user_data(user_name=user_name_for_find_info)
    await state.update_data(user_name=user_name_for_find_info, user_id=user_id_for_find_info)
    if user_info != []:
        used_promocodes, referrer_id, id, user_id, user_name, balance, time_of_registration = None, None, None, None, None, None, None
        for info in user_info:
            id = info[0]
            user_id = info[1]
            user_name = info[2]
            balance = info[3]
            time_of_registration = info[4]
            referrer_id = info[5]
            used_promocodes = info[6]
            is_banned = info[7]

        used_promocodes_text = "-"
        if used_promocodes:
            used_promocodes_list = used_promocodes.split(",")
            used_promocodes_text = ", ".join(used_promocodes_list)[:-2]

        if is_banned == "False":
            is_banned = "-"
        else:
            is_banned = "+"

        if referrer_id == None:
            referrer_id = "-"
            user_info_text = f"<b>‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ üóÉ</b>:\n\nID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: <code>{id}</code>\nTelegram ID: <code>{user_id}</code>\nUsername –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{user_name}</code>\n–ë–∞–ª–∞–Ω—Å: <code>{balance}</code> ‚ÇΩ\n–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <code>{time_of_registration}</code>\n–†–µ—Ñ–µ—Ä–µ—Ä: <code>-</code>\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã: <code>{used_promocodes_text}</code>\n–ó–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{is_banned}</code>"
        else:
            referrer_username = await get_referrer_username(user_id=referrer_id)
            user_info_text = f"<b>‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ üóÉ</b>:\n\nID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: <code>{id}</code>\nTelegram ID: <code>{user_id}</code>\nUsername –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{user_name}</code>\n–ë–∞–ª–∞–Ω—Å: <code>{balance}</code> ‚ÇΩ\n–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <code>{time_of_registration}</code>\n–†–µ—Ñ–µ—Ä–µ—Ä: {referrer_username}({referrer_id})\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã: <code>{used_promocodes_text}</code>\n–ó–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{is_banned}</code>"
        await message.answer(user_info_text, reply_markup=user_find_data, parse_mode="HTML")
        if message.reply_markup:
            await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
        else:
            await save_temp_message(message.from_user.id, message.text, None)
        await AdmButtonState.WAITING_FOR_CALLBACK_BUTTONS.set()

    elif user_id_for_find_info == None and user_info == []:
        attempts = await state.get_data()
        if attempts.get("attempts", 0) >= 3:
            await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /add –ò–ó–ú–ï–ù–ò–¢–¢–¢–¨–¨–¨–¨ ")
            await AdmButtonState.WAITING_FOR_CALLBACK_BUTTONS.set()
        else:
            await state.update_data(attempts=attempts.get("attempts", 0) + 1)
            await message.answer("<b>‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ üóÉ</b>:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>USERNAME</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∏–ª–∏ USERNAME –∑–∞–Ω–æ–≤–æ: ", parse_mode="HTML", reply_markup=back_keyboard)
    elif user_name_for_find_info == None and user_info == []:
        attempts = await state.get_data()
        if attempts.get("attempts", 0) >= 3:
            await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /add –ò–ó–ú–ï–ù–ò–¢–¢–¢–¨–¨–¨–¨ ", reply_markup=back_keyboard)
            await AdmButtonState.WAITING_FOR_CALLBACK_BUTTONS.set()
        else:
            await state.update_data(attempts=attempts.get("attempts", 0) + 1)
            await message.answer("<b>‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ üóÉ</b>:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>ID</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)

# –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –±–µ–∑ —É–∑–Ω–∞–≤–∞–Ω–∏—è user_id, —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@dp.callback_query_handler(lambda c: c.data == "vpn_user2_callback", state=AdmButtonState.WAITING_FOR_CALLBACK_BUTTONS)
@block_check
async def vpn_info_handle(callback: types.CallbackQuery, state: FSMContext):   
    data = await state.get_data()
    try:
        user_id = int(data.get("user_id"))
        user_name = None
        vpn_data = await get_vpn_data(user_id=user_id)
        if vpn_data != None:
            for vpn in vpn_data:
                id = vpn[0]
                user_id = vpn[1]
                user_name = vpn[2]
                location = vpn[3]
                active = vpn[4]
                expiration_date = datetime.datetime.strptime(vpn[5], "%d.%m.%Y %H:%M:%S")
                days_remaining = (expiration_date - datetime.datetime.now()).days
                name_of_vpn = vpn[6]
                vpn_config = vpn[7]
                await bot.send_document(callback.from_user.id, vpn_config, caption=f"<b>‚Ä¢ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üõ°Ô∏è: </b>\n\n–õ–æ–∫–∞—Ü–∏—è üìç:   {location}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è üïò:   {expiration_date.strftime('%d.%m.%Y %H:%M:%S')}\n–û—Å—Ç–∞–ª–æ—Å—å ‚è≥:   {days_remaining} –¥–Ω–µ–π\n\n", parse_mode="HTML")
        else:
            await callback.message.answer("<b>‚Ä¢ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üõ°Ô∏è: </b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞ –Ω–µ –∏–º–µ–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ VPN ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)
    except Exception as e:
        user_name = data.get("user_name")
        user_id = None
        vpn_data = await get_vpn_data(user_name=user_name)
        user_info = await find_user_data(user_name=user_name)
        if user_info != None:
            if vpn_data != None:
                for vpn in vpn_data:
                    id = vpn[0]
                    user_id = vpn[1]
                    user_name = vpn[2]
                    location = vpn[3]
                    active = vpn[4]
                    expiration_date = datetime.datetime.strptime(vpn[5], "%d.%m.%Y %H:%M:%S")
                    days_remaining = (expiration_date - datetime.datetime.now()).days
                    name_of_vpn = vpn[6]
                    vpn_config = vpn[7]
                    await bot.send_document(callback.from_user.id, vpn_config, caption=f"<b>‚Ä¢ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üõ°Ô∏è: </b>\n\n–õ–æ–∫–∞—Ü–∏—è üìç:   {location}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è üïò:   {expiration_date.strftime('%d.%m.%Y %H:%M:%S')}\n–û—Å—Ç–∞–ª–æ—Å—å ‚è≥:   {days_remaining} –¥–Ω–µ–π\n\n", parse_mode="HTML")
            else:
                await callback.message.answer("<b>‚Ä¢ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üõ°Ô∏è: </b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞ –Ω–µ –∏–º–µ–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ VPN ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)
        else:
            attempts = await state.get_data()
            if attempts.get("attempts", 0) >= 3:
                await callback.message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /add –ò–ó–ú–ï–ù–ò–¢–¢–¢–¨–¨–¨–¨ ")
                await state.finish()
            else:
                await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                await callback.message.answer("<b>‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ üóÉ</b>:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>USERNAME</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∏–ª–∏ USERNAME –∑–∞–Ω–æ–≤–æ: ", parse_mode="HTML", reply_markup=back_keyboard)
        
            await callback.message.answer("<b>‚Ä¢ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üõ°Ô∏è: </b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º USERNAME –Ω–µ –Ω–∞–π–¥–µ—Ç ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ USERNAME –∏–ª–∏ ID –∑–∞–Ω–æ–≤–æ:", parse_mode="HTML", reply_markup=back_keyboard)

# –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
@dp.message_handler(state=AdmCommandState.WAITING_ID_OF_USER_FOR_ADD)
@block_check
async def handling_user_name(message: types.Message):
    global user_id_for_add
    global user_name_for_add
    try:
        user_id_for_add = int(message.text)
        user_name_for_add = None
    except Exception as e:
        user_name_for_add = message.text
        user_id_for_add = None
    await message.answer("‚Ä¢ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: </b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", reply_markup=back_keyboard, parse_mode="HTML")
    if message.reply_markup:
        await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
    else:
        await save_temp_message(message.from_user.id, message.text, None)
    await AdmCommandState.WAITING_FOR_SUM_HANDLE_FOR_ADD.set()

@dp.message_handler(state=AdmCommandState.WAITING_FOR_SUM_HANDLE_FOR_ADD)
@block_check
async def handle_for_adm_add_sum(message: types.Message, state):
    try:
        adm_sum_for_add = int(message.text)
    except Exception as e:
        attempts = await state.get_data()
        if attempts.get("attempts", 0) >= 3:
            await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /add ")
            await state.finish()
        else:
            await state.update_data(attempts=attempts.get("attempts", 0) + 1)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ) ‚ùå")
    if user_id_for_add != None:
        await pay_operation(int(adm_sum_for_add), user_id=user_id_for_add)
    elif user_name_for_add != None:
        await pay_operation(int(adm_sum_for_add), user_name=user_name_for_add)
    await message.answer(f"‚Ä¢ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: </b>\n\n–ë–∞–ª–∞–Ω—Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞: {adm_sum_for_add} ‚ÇΩ ‚úÖ", reply_markup=back_keyboard, parse_mode="HTML")
    await edit_operations_history(user_id=user_id_for_add, user_name=user_name_for_add, operations=(+(int(adm_sum_for_add))), description_of_operation="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä")
    

# —É–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
@dp.message_handler(state=AdmCommandState.WAITING_ID_OF_USER_HANDLE_FOR_DELETE)
@block_check
async def handling_user_name_for_delete(message: types.Message):
    global user_id_for_delete
    global user_name_for_delete
    try:
        user_id_for_delete = int(message.text)
        user_name_for_delete = None
    except Exception as e:
        user_name_for_delete = message.text
        user_id_for_delete = None
    await message.answer("‚Ä¢ <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: </b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", reply_markup=back_keyboard, parse_mode="HTML")
    if message.reply_markup:
        await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
    else:
        await save_temp_message(message.from_user.id, message.text, None)
    await AdmCommandState.WAITING_FOR_SUM_HANDLE_FOR_DELETE.set()

@dp.message_handler(state=AdmCommandState.WAITING_FOR_SUM_HANDLE_FOR_DELETE)
@block_check
async def handle_for_adm_delete_sum(message: types.Message, state):
    try:
        adm_sum_for_delete = int(message.text)
    except Exception as e:
        attempts = await state.get_data()
        if attempts.get("attempts", 0) >= 3:
            await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /delete ")
            await state.finish()
        else:
            await state.update_data(attempts=attempts.get("attempts", 0) + 1)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ) ‚ùå")
    if message.reply_markup:
        await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
    else:
        await save_temp_message(message.from_user.id, message.text, None)

    if user_id_for_delete != None:
        balance = await get_balance(user_id=user_id_for_delete)
        if balance >= int(adm_sum_for_delete):
            await delete_sum_operation(int(adm_sum_for_delete), user_id=user_id_for_delete)
            await edit_operations_history(user_id=user_id_for_delete, user_name=user_name_for_delete, operations=(-(int(adm_sum_for_delete))), description_of_operation="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä")
            await message.answer(f"‚Ä¢ <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: </b>\n\n–ë–∞–ª–∞–Ω—Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω –Ω–∞: {adm_sum_for_delete} ‚ÇΩ ‚úÖ", reply_markup=back_keyboard, parse_mode="HTML")
            await state.finish()
        else:
            attempts = await state.get_data()
            if attempts.get("attempts", 0) >= 3:
                await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /delete ")
                await state.finish()
            else:
                await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                await message.answer('‚Ä¢ <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: </b>\n\n–£ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ, —á–µ–º –≤—ã—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ:', parse_mode="HTML")
        if message.reply_markup:
            await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
        else:
            await save_temp_message(message.from_user.id, message.text, None)
    elif user_name_for_delete != None:
        balance = await get_balance(user_name=user_name_for_delete)
        if balance >= int(adm_sum_for_delete):
            await delete_sum_operation(int(adm_sum_for_delete), user_name=user_name_for_delete)
            await message.answer(f"‚Ä¢ <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: </b>\n\n–ë–∞–ª–∞–Ω—Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω –Ω–∞: {adm_sum_for_delete} ‚ÇΩ ‚úÖ", reply_markup=back_keyboard, parse_mode="HTML")
            await edit_operations_history(user_id=user_id_for_delete, user_name=user_name_for_delete, operations=(-(int(adm_sum_for_delete))), description_of_operation="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä")
            await state.finish()
        else: 
            attempts = await state.get_data()
            if attempts.get("attempts", 0) >= 3:
                await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /delete ")
                await state.finish()
            else:
                await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                await message.answer('‚Ä¢ <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: </b>\n\n–£ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ, —á–µ–º –≤—ã—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ:', parse_mode="HTML")
        if message.reply_markup:
            await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
        else:
            await save_temp_message(message.from_user.id, message.text, None)

"""********************************************** –°–ò–°–¢–ï–ú–ê –í–û–ó–í–†–ê–©–ï–ù–ò–Ø –ö –ü–†–ï–î–´–î–£–©–ò–ú –°–û–û–ë–©–ï–ù–ò–Ø–ú ****************************************"""

@dp.callback_query_handler(lambda c: c.data == "back", state="*")
@block_check
async def back_handle(callback: types.CallbackQuery, state):
    await state.finish()
    user_id = callback.from_user.id
    message_id = await find_message_id(user_id)
    message_text, message_markup = await get_temp_message(user_id, message_id)
    start_kb = await start_kb_handle(user_id) 
    try:
        if message_text and message_markup:
            message_markup = deserialize_keyboard(message_markup)
            await callback.message.edit_text(message_text, reply_markup=message_markup)
            await delete_temp_message(user_id, message_id)
        else:
            await callback.message.edit_text("–í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é.", reply_markup=start_kb)
    except Exception as e:
        await callback.message.answer("–í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é.", reply_markup=start_kb)

    
    await callback.answer("")
    

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
