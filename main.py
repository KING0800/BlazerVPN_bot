import sqlite3 as sq
import os
import datetime
import json
import re

from aiogram import types, Dispatcher, Bot
from aiogram.utils import executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext 
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import ChatNotFound
from dotenv import load_dotenv, find_dotenv
from typing import NamedTuple
from keyboards import addind_count_for_extend, own_vpn_keyboard, numbers_for_replenishment, location_keyboard, reply_buy_keyboard, pay_sweden_keyboard, replenishment_balance, start_keyboard, back_keyboard, reply_keyboard, insturtion_keyboard, pay_finland_keyboard, pay_germany_keyboard, buy_keyboard, extend_keyboard, payment_type, promocode_keyboard
from database import db_start, edit_profile, extend_vpn_state, get_balance, buy_operation, pay_operation, get_vpn_data, update_vpn_state, get_temp_message, delete_temp_message, save_temp_message, find_message_id, find_user, get_referrer_username, save_promocode, check_promocode_used, delete_sum_operation
from payment import create_payment, check

load_dotenv(find_dotenv())
bot_token = os.getenv("bot_token") 
Blazer_chat_token = os.getenv("Blazer_chat_token") 
Anush_chat_token = os.getenv("Anush_chat_token")
paymaster_token = os.getenv("paymaster_token") 
VPN_price_token = os.getenv("VPN_price_token") 
Account_payment_id_token = os.getenv("Account_payment_id_token") 
Secret_payment_key_token = os.getenv("Secret_payment_key_token")
Promocode = os.getenv("Promocode")

TOKEN_API = bot_token
bot = Bot(TOKEN_API)

async def on_startup(dp):
    await db_start()

dp = Dispatcher(bot, storage=MemoryStorage())
previous_states = {}
support_requests = []

class BuyVPNStates(StatesGroup):
    WAITING_FOR_MESSAGE_TEXT = State()

class PaymentStates(StatesGroup):
    WAITING_FOR_AMOUNT = State()
    WAINING_FOR_PAYMENT_TYPE = State()
    WAITING_FOR_MESSAGE_TEXT = State()

class SupportStates(StatesGroup):
    WAITING_FOR_QUESTION = State()
    WAITING_FOR_MODERATOR_ANSWER = State()

class PromocodeStates(StatesGroup):
    WAITING_FOR_USER_PROMOCODE = State()

class AdmCommandState(StatesGroup):
    WAITING_FOR_SUM_MONEY = State()
    WAITING_FOR_DELETE_SUM_MONEY = State()

class SupportRequest(NamedTuple):
    user_id: int
    user_name: str
    question: str
    answer: str = None

previous_markup = None

def deserialize_keyboard(keyboard_json: str) -> InlineKeyboardMarkup:
    keyboard_data = json.loads(keyboard_json)
    keyboard = InlineKeyboardMarkup()

    for row in keyboard_data['inline_keyboard']:
        keyboard.row(*[
            InlineKeyboardButton(text=button['text'], callback_data=button['callback_data'])
            for button in row
        ])

    return keyboard

"""************************************************* –ë–ê–ó–û–í–´–ï –ö–û–ú–ê–ù–î–´ (/start, /help, /balance) *****************************************************"""
# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'], state="*")
async def start_cmd(message: types.Message, state):
    user_name = message.from_user.username
    user_id = message.from_user.id
    if not await find_user(user_id):
        start_command = message.text
        referrer_id = str(start_command[7:])
        if referrer_id != "":
            if referrer_id != str(user_id):
                await edit_profile(user_name, user_id, referrer_id)
                await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –ë–æ–Ω—É—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–∏–ª–∏—Å—å —Ä–µ—Ñ–µ—Ä–µ—Ä—É –Ω–∞ –±–∞–ª–∞–Ω—Å. ")
                try:
                    await bot.send_message(referrer_id, "–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω—ã 15 ‚ÇΩ ")
                    await pay_operation(int(5), referrer_id)
                except:
                    pass
            else:
                await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ! ")
                await edit_profile(user_name, user_id)
        else:
            await edit_profile(user_name, user_id)
    await message.answer("""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BlazerVPN ‚Äì –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –≤ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Å–≤—è–∑–∏ –≤ —Å–µ—Ç–∏.
 
–ù–∞—à —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ–º –ª–æ–∫–∞—Ü–∏—è–º:
‚Ä¢ –®–≤–µ—Ü–∏—è üá∏üá™
‚Ä¢ –§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ
‚Ä¢ –ì–µ—Ä–º–∞–Ω–∏—è üá©üá™

–û–±–µ—Å–ø–µ—á–∏–≤–∞—è –±—ã—Å—Ç—Ä—É—é –∏ –∑–∞—â–∏—â–µ–Ω–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö. –ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å, BlazerVPN –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–µ–π –æ–Ω–ª–∞–π–Ω –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –û–±–µ—Å–ø–µ—á—å—Ç–µ —Å–µ–±–µ —Å–≤–æ–±–æ–¥—É –∏ –∑–∞—â–∏—Ç—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —Å BlazerVPN!""", reply_markup=start_keyboard)
 
    await save_temp_message(user_id, None, None)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=['text'])
async def handle_text(message: types.Message, state):
    if message.text == "/help":
        await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                           "/start - –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n"
                           "/help - –£–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
                           "/balance - –£–∑–Ω–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å\n"
                           "/connect_with_dev - –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –±–æ—Ç–∞\n"
                           "/buy_vpn - –ö—É–ø–∏—Ç—å VPN\n"
                           "/extension_vpn - –ü—Ä–æ–¥–ª–∏—Ç—å VPN\n"
                           "/replenishment - –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
                           "/support - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
                           "/my_vpn - –ú–æ–∏ VPN\n"
                           "/ref_system - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n"
                           "/promocode - –ü—Ä–æ–º–æ–∫–æ–¥—ã\n"
                           "/instruction - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é VPN", reply_markup=start_keyboard, parse_mode="HTML")
         
    elif message.text == "/balance":
        user_name = message.from_user.username
        balance = await get_balance(user_name)
        await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ", reply_markup=replenishment_balance)

    elif message.text == "/connect_with_dev":
        await message.answer("–î–ª—è —Å–≤—è–∑–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: \n\nhttps://t.me/KING_08001", reply_markup=back_keyboard)

    elif message.text == "/buy_vpn":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:", reply_markup=location_keyboard)
        
    elif message.text == "/extension_vpn":
        user_id = message.from_user.id
        vpn_data = await get_vpn_data(user_id)
        if vpn_data:
            numbers = 0
            vpn_info_text = ""
            for vpn in vpn_data:
                numbers += 1
                location = vpn[2]
                active = vpn[3]
                expiration_date = datetime.datetime.strptime(str(vpn[4]), "%Y.%m.%d %H:%M:%S")
                days_remaining = (expiration_date - datetime.datetime.now()).days
                vpn_info_text += f"{numbers}. –õ–æ–∫–∞—Ü–∏—è: {location}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {expiration_date.strftime('%Y.%m.%d %H:%M:%S')}\n–û—Å—Ç–∞–ª–æ—Å—å: {days_remaining} –¥–Ω–µ–π\n\n"
            kb_for_count = await addind_count_for_extend(count=numbers)
            if numbers == 1:
                await message.answer("<b>–£ –≤–∞—Å –æ–¥–∏–Ω VPN:</b>\n\n" + vpn_info_text + f"<b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN –Ω–∞ 30 –¥–Ω–µ–π —Å—Ç–æ–∏—Ç {VPN_price_token} ‚ÇΩ üíµ\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–ª–∏—Ç—å VPN</b>", reply_markup=extend_keyboard, parse_mode="HTML")
            else:
                await message.answer(f"<b>–í–∞—à–∏ VPN üõ°:</b>\n\n{vpn_info_text}<b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN –Ω–∞ 30 –¥–Ω–µ–π —Å—Ç–æ–∏—Ç {VPN_price_token} ‚ÇΩ üíµ. –í—ã–±–µ—Ä–∏—Ç–µ VPN, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å:</b>", reply_markup=kb_for_count, parse_mode="HTML") 
            await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç—É –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ VPN ‚ùå! –í–∞–º –µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ", reply_markup=buy_keyboard)
            await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())

    elif message.text == "/replenishment":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ: ", reply_markup=numbers_for_replenishment)
        if message.reply_markup:
            await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
        else:
            await save_temp_message(message.from_user.id, message.text, None)
        await PaymentStates.WAITING_FOR_AMOUNT.set()

    elif message.text == "/support":
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ß–µ–º –º–æ–∂–µ–º –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã?", reply_markup=back_keyboard)
        if message.reply_markup:
            await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
        else:
            await save_temp_message(message.from_user.id, message.text, None)
        await SupportStates.WAITING_FOR_QUESTION.set()

    elif message.text == "/ref_system":
        user_id = message.from_user.id
        referrals = await get_referrer_username(user_id)
        text = f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <pre>https://t.me/blazervpnbot?start={user_id}</pre>\n\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å–æ —Å–≤–æ–∏–º–∏ –∑–Ω–∞–∫–æ–º—ã–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å 15 ‚ÇΩ —Å–µ–±–µ –Ω–∞ –±–∞–ª–∞–Ω—Å.\n\n"
        if referrals:
            text += "–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n"
            for username in referrals:
                text += f"@{username}\n"
        else:
            text += "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤."
        await message.answer(text, reply_markup=back_keyboard, parse_mode="HTML")
        if message.reply_markup:
            await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
        else:
            await save_temp_message(message.from_user.id, message.text, None)

    elif message.text == "/promocode":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=back_keyboard)
        if message.reply_markup:
            await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
        else:
            await save_temp_message(message.from_user.id, message.text, None)
        await PromocodeStates.WAITING_FOR_USER_PROMOCODE.set()

    elif message.text == "/instruction":
        await message.answer_photo(photo="https://i.imgur.com/0feN5h0.jpeg", caption="""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Android:
1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –∏–∑ Google Play.
2. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—É–Ω–Ω–µ–ª—è WireGuard –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ø–ª—é—Å¬ª –≤ –Ω–∏–∂–Ω–µ–º —É–≥–ª—É —ç–∫—Ä–∞–Ω–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–∫–æ—Ç–æ—Ä—É—é –º—ã –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ –∫ —ç—Ç–æ–π –Ω–∏–∂–µ) –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é.""")
        await message.answer_photo(photo="https://i.imgur.com/MvB2M5t.png", caption="""
3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä—è–¥–æ–º —Å –ø–æ—è–≤–∏–≤—à–∏–º—Å—è –∏–º–µ–Ω–µ–º —Ç—É–Ω–Ω–µ–ª—è. –°–∏—Å—Ç–µ–º–∞ Android –ø–æ–ø—Ä–æ—Å–∏—Ç –≤—ã–¥–∞—Ç—å WireGuard —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ VPN. –î–∞–π—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–Ω–∞–∫ –≤ –≤–∏–¥–µ –∫–ª—é—á–∞""")
    
    elif message.text == "/my_vpn":
        user_id = message.from_user.id
        vpn_data = await get_vpn_data(user_id)
        if vpn_data:
            vpn_info_text = "–í–∞—à–∏ VPN üõ°:\n\n"
            for vpn in vpn_data:
                location = vpn[3]
                active = vpn[4]
                expiration_date = datetime.datetime.strptime(vpn[5], "%Y.%m.%d %H:%M:%S")
                days_remaining = (expiration_date - datetime.datetime.now()).days
                vpn_info_text += f"–õ–æ–∫–∞—Ü–∏—è: {location}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {expiration_date.strftime('%Y.%m.%d %H:%M:%S')}\n–û—Å—Ç–∞–ª–æ—Å—å: {days_remaining} –¥–Ω–µ–π\n\n"
            await message.answer(vpn_info_text, reply_markup=back_keyboard)
        else:
            await message.answer(f"–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ VPN ‚ùå", reply_markup=own_vpn_keyboard)
        if message.reply_markup:
            await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
        else:
            await save_temp_message(message.from_user.id, message.text, None)
    ##### ADM COMMANDS
    elif message.text == "/add":
        await message.answer("–≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ")
        await AdmCommandState.WAITING_FOR_SUM_MONEY.set()
    elif message.text == "/delete":
        await message.answer("–≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
        await AdmCommandState.WAITING_FOR_DELETE_SUM_MONEY.set()

    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (/help)", reply_markup=start_keyboard)   
    
        
# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ balance(balance)
@dp.callback_query_handler(lambda c: c.data == "balance", state="*")
async def balance_def(callback: types.CallbackQuery):
    user_name = callback.from_user.username
    balance = await get_balance(user_name)
    await callback.message.edit_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ", reply_markup=replenishment_balance)
    await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ help(help_callback)
@dp.callback_query_handler(lambda c: c.data == "help_callback", state="*")
async def help_kb_handle(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–î–ª—è —Å–≤—è–∑–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: \n\nhttps://t.me/KING_08001", reply_markup=back_keyboard)
    await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())

"""*********************************************** –í–´–ë–û–† –õ–û–ö–ê–¶–ò–ò –ò –ü–û–ö–£–ü–ö–ê –í–ü–ù ************************************************************************"""
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏ (buy_vpn)
@dp.callback_query_handler(lambda c: c.data == "buy_vpn", state="*")
async def buying_VPN_handle(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:", reply_markup=location_keyboard)
    await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ª–æ–∫–∞—Ü–∏–π (Sweden_callback, Finland_callback, Germany_callback)
@dp.callback_query_handler(lambda c: c.data == "Sweden_callback" or c.data == "Finland_callback" or c.data == "Germany_callback")
async def location_choose_def(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "Sweden_callback":
        await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é: –®–≤–µ—Ü–∏—è üá∏üá™\nVPN –Ω–∞ –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ —Å–µ–π—á–∞—Å –Ω–µ—Ç—É –≤ –Ω–∞–ª–∏—á–∏–∏ ‚ùå", reply_markup=back_keyboard)
        #await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é: –®–≤–µ—Ü–∏—è üá∏üá™\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ {VPN_price_token} ‚ÇΩ", reply_markup=pay_sweden_keyboard)
        #await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
        #await callback.answer("")

    elif callback.data == "Finland_callback":
        await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é: –§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ {VPN_price_token} ‚ÇΩ", reply_markup=pay_finland_keyboard)
        await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
        await callback.answer("")

    elif callback.data == "Germany_callback":
        await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é: –ì–µ—Ä–º–∞–Ω–∏—è üá©üá™\nVPN –Ω–∞ –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ —Å–µ–π—á–∞—Å –Ω–µ—Ç—É –≤ –Ω–∞–ª–∏—á–∏–∏ ‚ùå", reply_markup=back_keyboard)
        #await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é: –ì–µ—Ä–º–∞–Ω–∏—è üá©üá™\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ {VPN_price_token} ‚ÇΩ", reply_markup=pay_germany_keyboard)
        #await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
        #await callback.answer("")

# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É VPN.
async def buying_VPN_def(callback, country,  state):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ VPN –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã"""
    user_name = callback.from_user.username
    user_id = callback.from_user.id
    balance = await get_balance(user_name)
    if float(balance) < float(VPN_price_token):
        await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå")
        await callback.message.edit_text("–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.", reply_markup=replenishment_balance)
        await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
    else:
        payment_key = await buy_operation(user_id=user_id, user_name=user_name)
        await callback.message.edit_text("–í—ã –∫—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä ‚úÖ! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏. –ö–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VPN –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        user_id = callback.from_user.id
        async with state.proxy() as data:
            data['payment_key'] = payment_key
        await bot.send_message(Blazer_chat_token, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: {user_id})\n–ó–∞–∫–∞–∑–∞–ª VPN –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏: {country}\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.", reply_markup=reply_buy_keyboard)
        await bot.send_message(Anush_chat_token, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: {user_id})\n–ó–∞–∫–∞–∑–∞–ª VPN –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏: {country}\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.", reply_markup=reply_buy_keyboard)
        await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
        await BuyVPNStates.WAITING_FOR_MESSAGE_TEXT.set()

# —Ö–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é, –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏ VPN. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ (Buying_sweden_VPN, Buying_finland_VPN, Buying_germany_VPN)
@dp.callback_query_handler(lambda c: c.data == "Buying_sweden_VPN" or c.data == "Buying_finland_VPN" or c.data == "Buying_germany_VPN")
async def buying_VPN_handle(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "Buying_sweden_VPN":
        await buying_VPN_def(callback, "–®–≤–µ—Ü–∏—è üá∏üá™", state)
        await state.update_data(country="–®–≤–µ—Ü–∏—è üá∏üá™") 
    elif callback.data == "Buying_finland_VPN":
        await buying_VPN_def(callback, "–§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ", state)
        await state.update_data(country="–§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ")
    elif callback.data == "Buying_germany_VPN":
        await buying_VPN_def(callback, "–ì–µ—Ä–º–∞–Ω–∏—è üá©üá™", state)
        await state.update_data(country="–ì–µ—Ä–º–∞–Ω–∏—è üá©üá™")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ (payment_callback)
@dp.callback_query_handler(lambda c: c.data == "payment_callback")
async def payment_handle(callback: types.CallbackQuery):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=back_keyboard)
    await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
    await BuyVPNStates.WAITING_FOR_MESSAGE_TEXT.set()
    await callback.answer("")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.
@dp.callback_query_handler(lambda c: c.data == "reply_buy_keyboard", state=BuyVPNStates.WAITING_FOR_MESSAGE_TEXT)
async def send_message(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–°–∫–∏–Ω—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
    await BuyVPNStates.WAITING_FOR_MESSAGE_TEXT.set()

@dp.message_handler(content_types=['text', 'document'],  state=BuyVPNStates.WAITING_FOR_MESSAGE_TEXT)
async def send_message_handle(message: types.Message, state):
    user_name = message.from_user.username
    if message.document:
        file_id = message.document.file_id
        file_name = message.document.file_name
    else:
        answer = message.text
        file_id = None
        file_name = None    
    async with state.proxy() as data:
        payment_key = str(data.get('payment_key'))
        country = data.get('country')
    if payment_key:
        try:
            db = sq.connect('UserINFO.db')
            cur = db.cursor()
            cur.execute(
                "SELECT user_id FROM TempData WHERE payment_key = ?",
                (payment_key,)
            )
            row = cur.fetchone()
            db.close()
            if row:
                user_id = row[0]
                if file_id is not None and file_name is not None:
                    await bot.send_document(user_id, file_id, caption="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VPN", reply_markup=insturtion_keyboard)
                    await update_vpn_state(user_id=user_id, user_name=user_name, location=country, active=True, expiration_days=30)
                    await bot.send_document(message.from_user.id, file_id, caption=f"–§–∞–π–ª –¥–ª—è @{user_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úÖ", reply_markup=start_keyboard)

                else:
                    await bot.send_message(user_id, text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É\n–í–∞—à –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: <pre>{answer}</pre>\n–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VPN", reply_markup=insturtion_keyboard, parse_mode="HTML")
                    await update_vpn_state(user_id=user_id, user_name=user_name, location=country, active=True, expiration_days=30)
                    await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è @{user_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ: {answer}", reply_markup=start_keyboard)

                if message.reply_markup:
                    await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
                else:
                    await save_temp_message(message.from_user.id, message.text, None)
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é. –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞. ‚ùå")
        except ChatNotFound:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é. –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ùå")
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é. –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ùå")
    else:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå", reply_markup=back_keyboard)
    await state.finish()

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ (instruction_keyboard)
@dp.callback_query_handler(lambda c: c.data == "instruction_keyboard")
async def instruction_handle(callback: types.CallbackQuery):
    await callback.message.answer_photo(photo="https://i.imgur.com/0feN5h0.jpeg", caption="""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Android:
1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –∏–∑ Google Play.
2. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—É–Ω–Ω–µ–ª—è WireGuard –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ø–ª—é—Å¬ª –≤ –Ω–∏–∂–Ω–µ–º —É–≥–ª—É —ç–∫—Ä–∞–Ω–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–∫–æ—Ç–æ—Ä—É—é –º—ã –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ –∫ —ç—Ç–æ–π –Ω–∏–∂–µ) –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é.""")
    await callback.message.answer_photo(photo="https://i.imgur.com/MvB2M5t.png", caption="""
3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä—è–¥–æ–º —Å –ø–æ—è–≤–∏–≤—à–∏–º—Å—è –∏–º–µ–Ω–µ–º —Ç—É–Ω–Ω–µ–ª—è. –°–∏—Å—Ç–µ–º–∞ Android –ø–æ–ø—Ä–æ—Å–∏—Ç –≤—ã–¥–∞—Ç—å WireGuard —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ VPN. –î–∞–π—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–Ω–∞–∫ –≤ –≤–∏–¥–µ –∫–ª—é—á–∞""")


"""****************************************************************** –ü–†–û–î–õ–ï–ù–ò–ï VPN *************************************************************************"""
# —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è VPN(extension_vpn, extend_callback)
@dp.callback_query_handler(lambda c: c.data == "extension_vpn" or c.data == "extend_callback" or "extend_vpn" in c.data, state="*")
async def extend_vpn_handle(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "extension_vpn":
        user_id = callback.from_user.id
        vpn_data = await get_vpn_data(user_id)
        if vpn_data:
            numbers = 0
            vpn_info_text = ""
            for vpn in vpn_data:
                numbers += 1
                location = vpn[3]
                active = vpn[4]
                expiration_date = datetime.datetime.strptime(str(vpn[5]), "%Y.%m.%d %H:%M:%S")
                days_remaining = (expiration_date - datetime.datetime.now()).days
                vpn_info_text += f"{numbers}. –õ–æ–∫–∞—Ü–∏—è: {location}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {expiration_date.strftime('%Y.%m.%d %H:%M:%S')}\n–û—Å—Ç–∞–ª–æ—Å—å: {days_remaining} –¥–Ω–µ–π\n\n"
            kb_for_count = await addind_count_for_extend(count=numbers)
            if numbers == 1:
                await callback.message.edit_text("<b>–£ –≤–∞—Å –æ–¥–∏–Ω VPN:</b>\n\n" + vpn_info_text + f"<b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN –Ω–∞ 30 –¥–Ω–µ–π —Å—Ç–æ–∏—Ç {VPN_price_token} ‚ÇΩ üíµ\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–ª–∏—Ç—å VPN</b>", reply_markup=extend_keyboard, parse_mode="HTML")
            else:
                await callback.message.edit_text(f"<b>–í–∞—à–∏ VPN üõ°:</b>\n\n{vpn_info_text}<b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN –Ω–∞ 30 –¥–Ω–µ–π —Å—Ç–æ–∏—Ç {VPN_price_token} ‚ÇΩ üíµ. –í—ã–±–µ—Ä–∏—Ç–µ VPN, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å:</b>", reply_markup=kb_for_count, parse_mode="HTML") 
            await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
        else:
            await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç—É –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ VPN ‚ùå! –í–∞–º –µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ", reply_markup=buy_keyboard)
            await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())

    elif callback.data == "extend_callback":
        user_name = callback.from_user.username
        balance = await get_balance(user_name)
        user_id = callback.from_user.id
        if float(balance) >= float(VPN_price_token):
            await pay_operation(VPN_price_token, user_id)
            vpn_data = await get_vpn_data(user_id)
            days_remaining = ""
            for vpn in vpn_data:
                id = vpn[0]
                location = vpn[3]
                active = vpn[4]
                expiration_date = datetime.datetime.strptime(vpn[5], "%Y.%m.%d %H:%M:%S")
                days_remaining = (expiration_date - datetime.datetime.now()).days
            new_expiration_date = expiration_date + datetime.timedelta(days=30)
            await extend_vpn_state(user_id=user_id, location=location, active=True, expiration_date=new_expiration_date, id=id)    
            await callback.message.edit_text(f"VPN –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ 30 –¥–Ω–µ–π ‚úÖ \n\n–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è VPN –æ—Å—Ç–∞–ª–æ—Å—å {days_remaining + 30} –¥–Ω–µ–π", reply_markup=back_keyboard)
            await bot.send_message(Blazer_chat_token, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: {user_id})\n–ü—Ä–æ–¥–ª–∏–ª VPN –Ω–∞ 30 –¥–Ω–µ–π.")
            await bot.send_message(Anush_chat_token, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: {user_id})\n–ü—Ä–æ–¥–ª–∏–ª VPN –Ω–∞ 30 –¥–Ω–µ–π.")
            await save_temp_message(callback.from_user.id, callback.message.text, None)
        else:
            await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå")
            await callback.message.edit_text("–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.", reply_markup=replenishment_balance)
            await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
    
    elif "extend_vpn" in callback.data:
        user_id = callback.from_user.id
        user_name = callback.from_user.username
        vpn_number = callback.data.split('_')[2]
        vpn_data = await get_vpn_data(user_id)
        vpn = vpn_data[int(vpn_number) - int(1)]
        balance = await get_balance(user_name)
        if float(balance) >= float(VPN_price_token):
            await pay_operation(VPN_price_token, user_id)
            id = vpn[0]
            location = vpn[3]
            expiration_date = datetime.datetime.strptime(vpn[5], "%Y.%m.%d %H:%M:%S")
            days_remaining = (expiration_date - datetime.datetime.now()).days
            new_expiration_date = expiration_date + datetime.timedelta(days=30)
            await extend_vpn_state(user_id=user_id, location=location, active=True, expiration_date=new_expiration_date, id=id)
            await callback.message.edit_text(f"VPN –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ 1 –º–µ—Å—è—Ü ‚úÖ \n\n–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è VPN –æ—Å—Ç–∞–ª–æ—Å—å {days_remaining + 30} –¥–Ω–µ–π", reply_markup=back_keyboard)
            await bot.send_message(Anush_chat_token, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: {user_id})\n–ü—Ä–æ–¥–ª–∏–ª VPN –Ω–∞ 30 –¥–Ω–µ–π.")
            await bot.send_message(Blazer_chat_token, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: {user_id})\n–ü—Ä–æ–¥–ª–∏–ª VPN –Ω–∞ 30 –¥–Ω–µ–π.")
            await save_temp_message(callback.from_user.id, callback.message.text, None)
        else:
            await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå")
            await callback.message.edit_text("–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.", reply_markup=replenishment_balance)
            await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())

        
            
"""************************************************** –ü–û–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê *************************************************"""

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã(replenishment)
@dp.callback_query_handler(lambda c: c.data == "replenishment", state="*")
async def replenishment_handle(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ: ", reply_markup=numbers_for_replenishment)
    await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
    await PaymentStates.WAITING_FOR_AMOUNT.set()
    await callback.answer("")

@dp.callback_query_handler(lambda c: c.data == "200_for_replenishment_callback" or c.data == "500_for_replenishment_callback" or c.data == "1000_for_replenishment_callback", state=PaymentStates.WAITING_FOR_AMOUNT)
async def rubls_200_for_replenishment(callback: types.CallbackQuery, state):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É: ", reply_markup=payment_type)
    global amount
    if callback.data == "200_for_replenishment_callback":
        amount = 200
    elif callback.data == "500_for_replenishment_callback":
        amount = 500
    elif callback.data == "1000_for_replenishment_callback":
        amount = 1000
    await PaymentStates.WAINING_FOR_PAYMENT_TYPE.set()           

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
@dp.message_handler(state=PaymentStates.WAITING_FOR_AMOUNT)
async def handle_amount(message: types.Message, state: FSMContext):
    try:
        global amount
        amount = int(message.text)
        if amount > 0:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É:", reply_markup=payment_type)
            await PaymentStates.WAINING_FOR_PAYMENT_TYPE.set()
        else:
            attempts = await state.get_data()
            if attempts.get("attempts", 0) >= 3:
                await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /replenishment")
                await state.finish()
            else:
                await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                await message.answer("–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
    except ValueError:
        attempts = await state.get_data()
        if attempts.get("attempts", 0) >= 3:
            await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /replenishment")
            await state.finish()
        else:
            await state.update_data(attempts=attempts.get("attempts", 0) + 1)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ).")
       
@dp.callback_query_handler(lambda c: c.data == "bank_card_payment_callback" or c.data == "yoomoney_payment_callback" or c.data == "TinkoffPay_callback" or c.data == "SberPay_callback", state=PaymentStates.WAINING_FOR_PAYMENT_TYPE)
async def payment_type_handle(callback: types.CallbackQuery, state):
    if callback.data == "bank_card_payment_callback":
        try:
            payment_url, payment_id = create_payment(amount, callback.from_user.id, "bank_card")
        except Exception as e:
            await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ùå")
            return
    elif callback.data == "yoomoney_payment_callback":
        try:
            payment_url, payment_id = create_payment(amount, callback.from_user.id, "yoo_money")
        except Exception as e:
            await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ùå")
            return
    elif callback.data == "TinkoffPay_callback":
        try:
            payment_url, payment_id = create_payment(amount, callback.from_user.id, "tinkoff_bank")
        except Exception as e:
            await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ùå")
            return
    elif callback.data == "SberPay_callback":
        try:
            payment_url, payment_id = create_payment(amount, callback.from_user.id, "sberbank")
        except Exception as e:
            await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ùå")
            return
        
    payment_button = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url),
                    InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"checking_payment_{payment_id}")
                ]
            ]
        )
    await callback.message.edit_text("–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. ‚úÖ", reply_markup=payment_button) 
    await state.finish() 

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏, –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è(checking_payment_)
@dp.callback_query_handler(lambda c: "checking_payment" in c.data)
async def succesfull_payment(callback: types.CallbackQuery):
    payment_id = check(callback.data.split('_')[-1])
    user_id = callback.from_user.id
    if payment_id:
        await callback.message.answer('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ \n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å /balance')
        await pay_operation(amount, user_id)
        await callback.answer("")
    else:
        await callback.answer('–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞. ')

"""****************************************************** –°–ò–°–¢–ï–ú–ê –ü–û–î–î–ï–†–ñ–ö–ò *******************************************************"""
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (support_callback)
@dp.callback_query_handler(lambda c: c.data == "support_callback", state="*")
async def support_handle(callback: types.CallbackQuery):
    await callback.message.edit_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ß–µ–º –º–æ–∂–µ–º –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã?", reply_markup=back_keyboard)
    await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
    await SupportStates.WAITING_FOR_QUESTION.set()
    await callback.answer("")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
@dp.message_handler(state=SupportStates.WAITING_FOR_QUESTION)
async def process_question(message: types.Message,  state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user.username
    question = message.text

    support_request = SupportRequest(user_id=user_id, user_name=user_name, question=question)
    support_requests.append(support_request)

    await message.answer("–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ.", reply_markup=start_keyboard)
    await bot.send_message(Blazer_chat_token, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: {user_id})\n–ó–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å:\n{question}", reply_markup=reply_keyboard)
    await bot.send_message(Anush_chat_token, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: {user_id})\n–ó–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å:\n{question}", reply_markup=reply_keyboard)
    if message.reply_markup:
        await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
    else:
        await save_temp_message(message.from_user.id, message.text, None)
    await state.finish()

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏, –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (reply_keyboard)
@dp.callback_query_handler(lambda c: c.data == "reply_keyboard")
async def process_answer(callback: types.CallbackQuery, state: FSMContext):
    for i, support_request in enumerate(support_requests):
        if support_request.user_id == callback.from_user.id and support_request.answer:
            await callback.message.edit_text("–ù–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –¥–∞–Ω –æ—Ç–≤–µ—Ç. ‚ùå")
            return
        else:
            await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç:", reply_markup=back_keyboard)
            await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
            await callback.answer("")
            await SupportStates.WAITING_FOR_MODERATOR_ANSWER.set()


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
@dp.message_handler(state=SupportStates.WAITING_FOR_MODERATOR_ANSWER, content_types=['text', 'document'])
async def replying_for_moder(message: types.Message, state):
    user_name = message.from_user.username
    user_id = message.from_user.id
    answer = message.text

    for i, support_request in enumerate(support_requests):
        if support_request.user_id == message.from_user.id:
            support_requests[i] = SupportRequest(
                user_id=support_request.user_id,
                user_name=support_request.user_name,
                question=support_request.question,
                answer=answer
            )
            try:
                await bot.send_message(support_request.user_id, f"–û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:\n\n{answer}", reply_markup=start_keyboard)
                await bot.send_message(Anush_chat_token, f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user_name} (ID: {user_id})")
                await bot.send_message(Blazer_chat_token, f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user_name} (ID: {user_id})")
            except ChatNotFound:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            break
    if message.reply_markup:
        await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
    else:
        await save_temp_message(message.from_user.id, message.text, None)
    await state.finish()


"""********************************************************* –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê *************************************************"""

@dp.callback_query_handler(lambda c: c.data == "ref_system_callback", state="*")
async def ref_system(callback: types.CallbackQuery):
    user_id = callback.message.from_user.id
    referrals = await get_referrer_username(user_id)
    if referrals != None:
        referrals = referrals.split("\n")
    else:
        referrals = referrals
    text = f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <pre>https://t.me/blazervpnbot?start={user_id}</pre>\n\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å–æ —Å–≤–æ–∏–º–∏ –∑–Ω–∞–∫–æ–º—ã–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å 5 ‚ÇΩ —Å–µ–±–µ –Ω–∞ –±–∞–ª–∞–Ω—Å.\n\n"
    if referrals:
        text += "–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n"
        for username in referrals:
            text += f"@{username} \n" 
    else:
        text += "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤."
    await callback.message.edit_text(text, reply_markup=back_keyboard, parse_mode="HTML")
    if callback.message.reply_markup:
        await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
    else:
        await save_temp_message(callback.from_user.id, callback.message.text, None)



"""********************************************************** –°–ò–°–¢–ï–ú–ê –ü–†–û–ú–û–ö–û–î–û–í **************************************************************"""

@dp.callback_query_handler(lambda c: c.data == "promo_callback", state="*")
async def promo_handle(callback: types.CallbackQuery, state):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=back_keyboard)
    if callback.message.reply_markup:
        await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
    else:
        await save_temp_message(callback.from_user.id, callback.message.text, None)
    await PromocodeStates.WAITING_FOR_USER_PROMOCODE.set()

@dp.message_handler(state=PromocodeStates.WAITING_FOR_USER_PROMOCODE)
async def handle_user_promo(message: types.Message, state):
    user_promo = message.text
    user_id = message.from_user.id
    check_used_promo = await check_promocode_used(user_id, Promocode)
    if str(user_promo) == str(Promocode) and check_used_promo == False:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ ‚úÖ \n–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ: 20 —Ä—É–±–ª–µ–π!", reply_markup=back_keyboard)
        await pay_operation(20, user_id)
        await save_promocode(user_id, user_promo)
        if message.reply_markup:
            await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
        else:
            await save_temp_message(message.from_user.id, message.text, None)
    elif str(user_promo) == str(Promocode) and check_used_promo == True:
        await message.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ ‚ùå\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ –≤ –≤–∫", reply_markup=promocode_keyboard)    
    else:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥, –ª–∏–±–æ –æ–Ω –Ω–µ–∞–∫—Ç—É–∞–ª–µ–Ω ‚ùå\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ –≤ –≤–∫", reply_markup=promocode_keyboard)
        if message.reply_markup:
            await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
        else:
            await save_temp_message(message.from_user.id, message.text, None)
    await state.finish()

"""*********************************************** –û–ë–†–ê–ë–û–¢–ö–ê –ò–ù–§–û–†–ú–ê–¶–ò–ò –û VPN –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ******************************************"""

@dp.callback_query_handler(lambda c: c.data == "myvpn_callback", state="*")
async def myvpn_handle(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    vpn_data = await get_vpn_data(user_id)
    if vpn_data:
        vpn_info_text = "–í–∞—à–∏ VPN üõ°:\n\n"
        for vpn in vpn_data:
            location = vpn[3]
            active = vpn[4]
            expiration_date = datetime.datetime.strptime(vpn[5], "%Y.%m.%d %H:%M:%S")
            days_remaining = (expiration_date - datetime.datetime.now()).days
            vpn_info_text += f"–õ–æ–∫–∞—Ü–∏—è: {location}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {expiration_date.strftime('%Y.%m.%d %H:%M:%S')}\n–û—Å—Ç–∞–ª–æ—Å—å: {days_remaining} –¥–Ω–µ–π\n\n"
        await callback.message.edit_text(vpn_info_text, reply_markup=buy_keyboard)
        if callback.message.reply_markup:
            await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
        else:
            await save_temp_message(callback.from_user.id, callback.message.text, None)
    else:
        await callback.message.edit_text(f"–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ VPN ‚ùå", reply_markup=own_vpn_keyboard)
        if callback.message.reply_markup:
            await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
        else:
            await save_temp_message(callback.from_user.id, callback.message.text, None)


"""********************************************** –°–ò–°–¢–ï–ú–ê –í–û–ó–í–†–ê–©–ï–ù–ò–Ø –ö –ü–†–ï–î–´–î–£–©–ò–ú –°–û–û–ë–©–ï–ù–ò–Ø–ú ****************************************"""

@dp.callback_query_handler(lambda c: c.data == "back", state="*")
async def back_handle(callback: types.CallbackQuery, state):
    await state.finish()
    user_id = callback.from_user.id
    message_id = await find_message_id(user_id)
    message_text, message_markup = await get_temp_message(user_id, message_id) 

    if message_text and message_markup:
        message_markup = deserialize_keyboard(message_markup)
        await callback.message.edit_text(message_text, reply_markup=message_markup)
        await delete_temp_message(user_id, message_id)
    else:
        await callback.message.edit_text("–í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é.", reply_markup=start_keyboard)

    await callback.answer("")

"""************************************************************* –í–†–ï–ú–ï–ù–ù–´–ï –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ******************************************************"""

@dp.message_handler(state=AdmCommandState.WAITING_FOR_SUM_MONEY)
async def user_add_sum_handle(message: types.Message, state):
    user_sum = message.text
    user_id = message.from_user.id
    await pay_operation(int(user_sum), user_id)
    await message.answer(f"–≤—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ {user_sum}")
    await state.finish()

@dp.message_handler(state=AdmCommandState.WAITING_FOR_DELETE_SUM_MONEY)
async def user_add_sum_handle(message: types.Message, state):
    user_sum = message.text
    user_id = message.from_user.id
    await delete_sum_operation(int(user_sum), user_id)
    await message.answer(f"–≤—ã —É–¥–∞–ª–∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ {user_sum}")
    await state.finish()



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
