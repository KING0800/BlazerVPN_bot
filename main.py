import asyncio
import logging
import sqlite3 as sq

from aiogram import types, Dispatcher, Bot, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import ChatNotFound
from keyboards import location_keyboard, pay_sweden_keyboard, replenishment_balance, start_keyboard, back_keyboard, reply_keyboard, insturtion_keyboard, pay_finland_keyboard, pay_germany_keyboard
from tokens import bot_token, Blazer_chat, Anush_chat, paymaster_token, VPN_price, Account_id, Secret_key
from database import db_start, edit_profile, get_balance, buy_operation, pay_operation, changing_payment_key
from payment import create_payment, check


TOKEN_API = bot_token
bot = Bot(TOKEN_API)

async def on_startup(dp):
    await db_start()

dp = Dispatcher(bot, storage=MemoryStorage())
previous_states = {}

class SendMessageStates(StatesGroup):
    WAITING_FOR_RECIPIENT_USERNAME = State()
    WAITING_FOR_MESSAGE_TEXT = State()
    WAITING_FOR_AMOUNT = State()

@dp.message_handler(commands=['start'], state="*")
async def start_cmd(message: types.Message):
    user_name = message.from_user.username
    user_id = message.from_user.id
    await edit_profile(user_name, user_id)
    await message.answer("""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BlazerVPN ‚Äì –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –≤ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Å–≤—è–∑–∏ –≤ —Å–µ—Ç–∏.

–ù–∞—à —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ–º –ª–æ–∫–∞—Ü–∏—è–º:
‚Ä¢ –®–≤–µ—Ü–∏—è üá∏üá™
‚Ä¢ –§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ
‚Ä¢ –ì–µ—Ä–º–∞–Ω–∏—è üá©üá™

–û–±–µ—Å–ø–µ—á–∏–≤–∞—è –±—ã—Å—Ç—Ä—É—é –∏ –∑–∞—â–∏—â–µ–Ω–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö. –ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å, BlazerVPN –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–µ–π –æ–Ω–ª–∞–π–Ω –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –û–±–µ—Å–ø–µ—á—å—Ç–µ —Å–µ–±–µ —Å–≤–æ–±–æ–¥—É –∏ –∑–∞—â–∏—Ç—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —Å BlazerVPN!""", reply_markup=start_keyboard)

@dp.callback_query_handler()
async def handle_callback(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "buy_vpn":
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:", reply_markup=location_keyboard)
        previous_data = previous_states.get(callback.message.chat.id, [])
        previous_data.append({
            'text': callback.message.text,
            'reply_markup': callback.message.reply_markup
        })
        previous_states[callback.message.chat.id] = previous_data

    elif callback.data == "help_callback":
        await callback.message.edit_text("–î–ª—è —Å–≤—è–∑–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: \nhttps://t.me/KING_08001", reply_markup=back_keyboard)
        previous_data = previous_states.get(callback.message.chat.id, [])
        previous_data.append({
            'text': callback.message.text,
            'reply_markup': callback.message.reply_markup
        })
        previous_states[callback.message.chat.id] = previous_data
        
    elif callback.data == "extension_vpn":
        await callback.message.edit_text("–ù–µ–¥–æ–¥–µ–ª–∞–Ω–æ", reply_markup=back_keyboard)
        previous_data = previous_states.get(callback.message.chat.id, [])
        previous_data.append({
            'text': callback.message.text,
            'reply_markup': callback.message.reply_markup
        })
        previous_states[callback.message.chat.id] = previous_data

    elif callback.data == "Sweden_callback":
        await callback.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é: –®–≤–µ—Ü–∏—è üá∏üá™\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ 100 ‚ÇΩ", reply_markup=pay_sweden_keyboard)
        previous_data = previous_states.get(callback.message.chat.id, [])
        previous_data.append({
            'text': callback.message.text,
            'reply_markup': callback.message.reply_markup
        })
        previous_states[callback.message.chat.id] = previous_data
        await callback.answer("")


    elif callback.data == "Finland_callback":
        await callback.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é: –§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ 100 ‚ÇΩ", reply_markup=pay_finland_keyboard)
        previous_data = previous_states.get(callback.message.chat.id, [])
        previous_data.append({
            'text': callback.message.text,
            'reply_markup': callback.message.reply_markup
        })
        previous_states[callback.message.chat.id] = previous_data
        await callback.answer("")

    elif callback.data == "Germany_callback":
        await callback.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é: –ì–µ—Ä–º–∞–Ω–∏—è üá©üá™\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ 100 ‚ÇΩ", reply_markup=pay_germany_keyboard)
        previous_data = previous_states.get(callback.message.chat.id, [])
        previous_data.append({
            'text': callback.message.text,
            'reply_markup': callback.message.reply_markup
        })
        previous_states[callback.message.chat.id] = previous_data
        await callback.answer("")


    elif callback.data == "Buying_sweden_VPN":
        user_name = callback.from_user.username
        balance = await get_balance(user_name)
        if balance < 100:
            await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
            await callback.message.edit_text("–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.", reply_markup=replenishment_balance)
            previous_data = previous_states.get(callback.message.chat.id, [])
            previous_data.append({
                'text': callback.message.text,
                'reply_markup': callback.message.reply_markup
            })
            previous_states[callback.message.chat.id] = previous_data
        else:
            payment_key = await buy_operation(user_name)
            await callback.message.answer("–í—ã –∫—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏. –ö–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VPN –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
            user_id = callback.from_user.id

            async with state.proxy() as data:
                data['payment_key'] = payment_key
            await bot.send_message(Blazer_chat, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name}\n–ó–∞–∫–∞–∑–∞–ª VPN –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏: –®–≤–µ—Ü–∏—è üá∏üá™\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.", reply_markup=reply_keyboard)
            await bot.send_message(Anush_chat, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name}\n–ó–∞–∫–∞–∑–∞–ª VPN –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏: –®–≤–µ—Ü–∏—è üá∏üá™\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.", reply_markup=reply_keyboard)
            previous_data = previous_states.get(callback.message.chat.id, []) 
            previous_data.append({
                'text': callback.message.text,
                'reply_markup': callback.message.reply_markup
            })
            previous_states[callback.message.chat.id] = previous_data

    elif callback.data == "Buying_finland_VPN":
        user_name = callback.from_user.username
        balance = await get_balance(user_name)
        if balance < 100:
            await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
            await callback.message.edit_text("–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.", reply_markup=replenishment_balance)
            previous_data = previous_states.get(callback.message.chat.id, [])
            previous_data.append({
                'text': callback.message.text,
                'reply_markup': callback.message.reply_markup
            })
            previous_states[callback.message.chat.id] = previous_data
        else:
            payment_key = await buy_operation(user_name)
            await callback.message.answer("–í—ã –∫—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏. –ö–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VPN –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
            user_id = callback.from_user.id

            async with state.proxy() as data:
                data['payment_key'] = payment_key
            await bot.send_message(Blazer_chat, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name}\n–ó–∞–∫–∞–∑–∞–ª VPN –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏: –§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.", reply_markup=reply_keyboard)
            await bot.send_message(Anush_chat, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name}\n–ó–∞–∫–∞–∑–∞–ª VPN –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏: –§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.", reply_markup=reply_keyboard)
            previous_data = previous_states.get(callback.message.chat.id, []) 
            previous_data.append({
                'text': callback.message.text,
                'reply_markup': callback.message.reply_markup
            })
            previous_states[callback.message.chat.id] = previous_data

    elif callback.data == "Buying_germany_VPN":
        user_name = callback.from_user.username
        balance = await get_balance(user_name)
        if balance < 100:
            await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
            await callback.message.edit_text("–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.", reply_markup=replenishment_balance)
            previous_data = previous_states.get(callback.message.chat.id, [])
            previous_data.append({
                'text': callback.message.text,
                'reply_markup': callback.message.reply_markup
            })
            previous_states[callback.message.chat.id] = previous_data
        else:
            payment_key = await buy_operation(user_name)
            await callback.message.answer("–í—ã –∫—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏. –ö–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VPN –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
            user_id = callback.from_user.id

            async with state.proxy() as data:
                data['payment_key'] = payment_key
            await bot.send_message(Blazer_chat, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name}\n–ó–∞–∫–∞–∑–∞–ª VPN –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏: –ì–µ—Ä–º–∞–Ω–∏—è üá©üá™\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.", reply_markup=reply_keyboard)
            await bot.send_message(Anush_chat, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name}\n–ó–∞–∫–∞–∑–∞–ª VPN –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏: –ì–µ—Ä–º–∞–Ω–∏—è üá©üá™\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.", reply_markup=reply_keyboard)
            previous_data = previous_states.get(callback.message.chat.id, []) 
            previous_data.append({
                'text': callback.message.text,
                'reply_markup': callback.message.reply_markup
            })
            previous_states[callback.message.chat.id] = previous_data

    elif "checking_payment_" in callback.data:
        payment_id = callback.data.split("_")[-1]
        try:
            payment_successful = check(payment_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await callback.message.edit_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã.')
            return

        if payment_successful:
            user_name = callback.message.from_user.username
            await callback.message.edit_text('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.')
            await callback.answer("")
            pay_operation(user_name)
            previous_data = previous_states.get(callback.message.chat.id, [])
            previous_data.append({
                'text': callback.message.text,
                'reply_markup': callback.message.reply_markup
            })
            previous_states[callback.message.chat.id] = previous_data
        else:
            await callback.message.edit_text('–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞.')   
            await callback.answer("")
            previous_data = previous_states.get(callback.message.chat.id, [])
            previous_data.append({
                'text': callback.message.text,
                'reply_markup': callback.message.reply_markup
            })
            previous_states[callback.message.chat.id] = previous_data
    elif callback.data == "balance":
        user_name = callback.from_user.username
        await callback.message.edit_text(f'–í–∞—à –±–∞–ª–∞–Ω—Å: {await get_balance(user_name=user_name)} ‚ÇΩ', reply_markup=replenishment_balance)
        previous_data = previous_states.get(callback.message.chat.id, [])
        previous_data.append({
            'text': callback.message.text,
            'reply_markup': callback.message.reply_markup
        })
        previous_states[callback.message.chat.id] = previous_data

    elif callback.data == "reply_keyboard":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")
        await SendMessageStates.WAITING_FOR_MESSAGE_TEXT.set()
        await callback.answer("")
        previous_data = previous_states.get(callback.message.chat.id, [])
        previous_data.append({
            'text': callback.message.text,
            'reply_markup': callback.message.reply_markup
        })
        previous_states[callback.message.chat.id] = previous_data

    elif callback.data == "replenishment":
        text = "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:"
        await callback.message.edit_text(text, reply_markup=back_keyboard)
        previous_data = previous_states.get(callback.message.chat.id, [])
        previous_data.append({
            'text': callback.message.text,
            'reply_markup': callback.message.reply_markup
        })
        previous_states[callback.message.chat.id] = previous_data

        await SendMessageStates.WAITING_FOR_AMOUNT.set()
        
                    
    elif callback.data == "instruction_keyboard":
        await callback.message.answer("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –¥–æ–¥–µ–ª–∞–Ω–∞.")
        await callback.answer("")
        previous_data = previous_states.get(callback.message.chat.id, [])
        previous_data.append({
            'text': callback.message.text,
            'reply_markup': callback.message.reply_markup
        })
        previous_states[callback.message.chat.id] = previous_data

    elif callback.data == "back":
        previous_data = previous_states.get(callback.message.chat.id, set())
        if len(previous_data) > 0:
            previous_state = previous_data.pop()  
            await callback.message.edit_text(previous_state['text'], reply_markup=previous_state['reply_markup'])
        else:
            await callback.message.edit_text("–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        

@dp.message_handler(state=SendMessageStates.WAITING_FOR_AMOUNT)
async def handle_amount(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        if amount > 0:
            try:
                payment_url, payment_id = create_payment(amount, message.from_user.id)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            payment_button = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url),
                        InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"checking_payment_{payment_id}")
                    ]
                ]
            )
            payment_button.add(
                InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")
            )
            await message.answer(f"–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.", reply_markup=payment_button)
            await state.finish()
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            previous_data = previous_states.get(message.chat.id, [])
            previous_data.append({
                'text': message.text,
                'reply_markup': message.reply_markup
            })
            previous_states[message.chat.id] = previous_data
        else:
            await message.answer("–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ).")


@dp.message_handler(state=SendMessageStates.WAITING_FOR_MESSAGE_TEXT)
async def send_message(message: types.Message, state: FSMContext):
    message_text = message.text
    async with state.proxy() as data:
        payment_key = str(data.get('payment_key'))
    if payment_key:
        try:
            db = sq.connect('UserINFO.db')
            cur = db.cursor()
            cur.execute(
                "SELECT user_id FROM UserINFO WHERE payment_key = ?",
                (payment_key,)
            )
            row = cur.fetchone()
            db.close()
            if row:
                user_id = row[0]
                await bot.send_message(
                    user_id,
                    text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É\n–í–∞—à –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: <pre>{message.text}</pre>\n–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VPN",
                    reply_markup=insturtion_keyboard,
                    parse_mode="HTML"
                )
                await message.answer(
                    f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è @{user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message_text}",
                    reply_markup=back_keyboard
                )
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é. –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞.")
        except ChatNotFound:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é. –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é. –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    else:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=back_keyboard)
    await state.finish()

    previous_data = previous_states.get(message.chat.id, [])
    previous_data.append({
        'text': message.text,
        'reply_markup': message.reply_markup
    })
    previous_states[message.chat.id] = previous_data


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    try:
        executor.start_polling(dp, on_startup=on_startup)
    except KeyboardInterrupt:
        print('Exit')
