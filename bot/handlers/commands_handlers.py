import os

from dotenv import load_dotenv

from aiogram import types, Dispatcher
from aiogram.dispatcher.filters.state import State, StatesGroup
from datetime import datetime

from bot.keyboards.user_keyboards import start_kb_handle, device_keyboard, replenishment_balance, back_keyboard, support_keyboard, location_keyboard, buy_keyboard, addind_count_for_extend, extend_keyboard, numbers_for_replenishment

from bot.database.UserData import is_user_ban_check, get_balance, get_referrer_username
from bot.database.VpnData import get_vpn_data
from bot.database.TempData import save_temp_message
from bot.database.OperationsData import getting_operation_history


class PromocodeStates(StatesGroup):
    WAITING_FOR_USER_PROMOCODE = State()

class PaymentStates(StatesGroup):
    WAITING_FOR_AMOUNT = State()
    WAITING_FOR_USER_EMAIL_HANDLE = State()
    WAINING_FOR_PAYMENT_TYPE = State()
    WAITING_FOR_MESSAGE_TEXT = State()

class SupportStates(StatesGroup):
    WAITING_FOR_QUESTION = State()
    WAITING_FOR_MODERATOR_ANSWER = State()

class AdmCommandState(StatesGroup):
    WAITING_ID_OF_USER_FOR_DELETE = State()
    WAITING_ID_OF_USER_FOR_ADD = State()
    WAITING_ID_OF_USER_HANDLE_FOR_ADD = State()
    WAITING_ID_OF_USER_HANDLE_FOR_DELETE = State()
    WAITING_FOR_SUM_HANDLE_FOR_ADD = State()
    WAITING_FOR_SUM_HANDLE_FOR_DELETE = State()

class AdmButtonState(StatesGroup):
    WAITING_FOR_USER_ID_FOR_USER_INFO = State()
    WAITING_FOR_CALLBACK_BUTTONS = State()

class UserVPNInfo(StatesGroup):
    WAITING_FOR_USER_ID_FOR_USER_VPN_INFO = State()

class BanUserState(StatesGroup):
    WAITING_FOR_USER_ID = State()

class UnbanUserState(StatesGroup):
    WAITING_FOR_USER_ID = State()

load_dotenv('.env')

VPN_PRICE_TOKEN = os.getenv("VPN_PRICE_TOKEN")

async def handle_text(message: types.Message, state):
    user_id = message.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await message.answer("<b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ‚ùå</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        return
    else:
        if message.text == "/help":
            await message.answer("<b>‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                            "/start - –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n"
                            "/help - –£–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
                            "/balance - üíµ –£–∑–Ω–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å\n"
                            "/connect_with_dev - üßë‚Äçüíª –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –±–æ—Ç–∞\n"
                            "/buy - üõí –ö—É–ø–∏—Ç—å VPN\n"
                            "/extend_vpn - ‚åõÔ∏è –ü—Ä–æ–¥–ª–∏—Ç—å VPN\n"
                            "/replenishment - üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
                            "/support - üÜò –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
                            "/my_vpn - üõ°Ô∏è –ú–æ–∏ VPN\n"
                            "/ref_system - ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n"
                            "/promocode - üéü –ü—Ä–æ–º–æ–∫–æ–¥—ã\n"
                            "/history_of_operations - üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π\n"
                            "/instruction - üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é VPN", reply_markup=start_kb_handle(user_id), parse_mode="HTML")
            
        elif message.text == "/balance":
            user_name = message.from_user.username
            balance = await get_balance(user_name)
            await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ", reply_markup=replenishment_balance)

        elif message.text == "/connect_with_dev":
            await message.answer("–î–ª—è —Å–≤—è–∑–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: \n\nhttps://t.me/KING_08001", reply_markup=back_keyboard)

        elif message.text == "/buy":
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é üìç:\n\n<tg-spoiler><i>–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏</i></tg-spoiler>", reply_markup=location_keyboard, parse_mode="HTML")
            
        elif message.text == "/extend_vpn":
            user_id = message.from_user.id
            vpn_data = await get_vpn_data(user_id)
            if vpn_data:
                numbers = 0
                vpn_info_text = ""
                for vpn in vpn_data:
                    numbers += 1
                    location = vpn[3]
                    active = vpn[4]
                    expiration_date = datetime.datetime.strptime(str(vpn[5]), "%d.%m.%Y %H:%M:%S")
                    days_remaining = (expiration_date - datetime.datetime.now()).days
                    vpn_info_text += f"{numbers}. –õ–æ–∫–∞—Ü–∏—è:   {location}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:   {expiration_date.strftime('%d.%m.%Y %H:%M:%S')}\n–û—Å—Ç–∞–ª–æ—Å—å:   {days_remaining} –¥–Ω–µ–π\n\n"
                kb_for_count = addind_count_for_extend(count=numbers)
                if numbers == 1:
                    await message.answer("<b>‚Ä¢ –£ –≤–∞—Å –æ–¥–∏–Ω VPN:</b>\n\n" + vpn_info_text + f"<b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN üõ° –Ω–∞ 30 –¥–Ω–µ–π —Å—Ç–æ–∏—Ç {VPN_PRICE_TOKEN} ‚ÇΩ üíµ\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–ª–∏—Ç—å VPN</b>", reply_markup=extend_keyboard, parse_mode="HTML")
                else:
                    await message.answer(f"<b>‚Ä¢ –í–∞—à–∏ VPN üõ°:</b>\n\n{vpn_info_text}<b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN üõ° –Ω–∞ 30 –¥–Ω–µ–π —Å—Ç–æ–∏—Ç {VPN_PRICE_TOKEN} ‚ÇΩ üíµ. –í—ã–±–µ—Ä–∏—Ç–µ VPN, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å:</b>", reply_markup=kb_for_count, parse_mode="HTML") 
                if message.reply_markup:
                    await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
                else:
                    await save_temp_message(message.from_user.id, message.text, None)
            else:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç—É –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ VPN ‚ùå! –í–∞–º –µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ", reply_markup=buy_keyboard)
                if message.reply_markup:
                    await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
                else:
                    await save_temp_message(message.from_user.id, message.text, None)

        elif message.text == "/replenishment":
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ: ", reply_markup=numbers_for_replenishment)
            if message.reply_markup:
                await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
            else:
                await save_temp_message(message.from_user.id, message.text, None)
            await PaymentStates.WAITING_FOR_AMOUNT.set()

        elif message.text == "/support":
            await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ß–µ–º –º–æ–∂–µ–º –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã?", reply_markup=back_keyboard)
            if message.reply_markup:
                await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
            else:
                await save_temp_message(message.from_user.id, message.text, None)
            await SupportStates.WAITING_FOR_QUESTION.set()

        elif message.text == "/ref_system":
            user_id = message.from_user.id
            referrals = await get_referrer_username(user_id)
            text = f"‚Ä¢ –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <pre>https://t.me/blazervpnbot?start={user_id}</pre>\n\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å–æ —Å–≤–æ–∏–º–∏ –∑–Ω–∞–∫–æ–º—ã–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å 15 ‚ÇΩ —Å–µ–±–µ –Ω–∞ –±–∞–ª–∞–Ω—Å.\n\n"
            if referrals:
                text += "–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n"
                for username in referrals:
                    text += f"@{username}\n"
            else:
                text += "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤."
            await message.answer(text, reply_markup=back_keyboard, parse_mode="HTML")
            if message.reply_markup:
                await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
            else:
                await save_temp_message(message.from_user.id, message.text, None)

        elif message.text == "/promocode":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=back_keyboard)
            if message.reply_markup:
                await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
            else:
                await save_temp_message(message.from_user.id, message.text, None)
            await PromocodeStates.WAITING_FOR_USER_PROMOCODE.set()

        elif message.text == "/instruction":
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é VPN üõ°:", reply_markup=device_keyboard)

        elif message.text == "/my_vpn":
            user_id = message.from_user.id
            vpn_data = await get_vpn_data(user_id)
            if vpn_data:
                vpn_info_text = "<b>‚Ä¢ –í–∞—à–∏ VPN üõ°</b>:\n\n"
                for vpn in vpn_data:
                    location = vpn[3]
                    active = vpn[4]
                    expiration_date = datetime.datetime.strptime(vpn[5], "%d.%m.%Y %H:%M:%S")
                    days_remaining = (expiration_date - datetime.datetime.now()).days
                    vpn_info_text += f"–õ–æ–∫–∞—Ü–∏—è:   {location}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:   {expiration_date.strftime('%d.%m.%Y %H:%M:%S')}\n–û—Å—Ç–∞–ª–æ—Å—å:   {days_remaining} –¥–Ω–µ–π\n\n"
                await message.answer(vpn_info_text, reply_markup=back_keyboard, parse_mode="HTML")
            else:
                await message.answer(f"–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ VPN ‚ùå", reply_markup=buy_keyboard)
            if message.reply_markup:
                await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
            else:
                await save_temp_message(message.from_user.id, message.text, None)
        
        elif message.text == "/history_of_operations":
            user_id = message.from_user.id
            user_name = message.from_user.username
            operation_history = await getting_operation_history(user_id=user_id)
            if operation_history is None:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π ‚ùå", reply_markup=replenishment_balance)
                return
            message_text = "<b>‚Ä¢ üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:</b>\n\n"
            for operation in operation_history:
                id, user_db_id, user_db_name, operations, time_of_operation, description_of_operation = operation

                operations = operations.split(",")
                time_of_operation = time_of_operation.split(",")
                description_of_operation = description_of_operation.split(",")

                for i in range(len(operations)):
                    operation_value = operations[i]
                    if "-" not in operation_value:
                        operation_value = "+" + operation_value

                    message_text += f"<i>{time_of_operation[i]}</i> - <b>{description_of_operation[i]}</b>:  <code>{operation_value}</code> ‚ÇΩ\n"

            await message.answer(message_text, reply_markup=back_keyboard, parse_mode="HTML")
            await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())

        ##### ADM COMMANDS
        elif message.text == "/add":
            await message.answer("‚Ä¢ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: </b>\n\n–í–≤–µ–¥–∏—Ç–µ <b>ID</b> –∏–ª–∏ <b>USERNAME</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=back_keyboard, parse_mode="HTML")
            if message.reply_markup:
                await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
            else:
                await save_temp_message(message.from_user.id, message.text, None)
            await AdmCommandState.WAITING_ID_OF_USER_FOR_ADD.set()
        
        elif message.text == "/delete":
            await message.answer("‚Ä¢ <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: </b>\n\n–í–≤–µ–¥–∏—Ç–µ <b>ID</b> –∏–ª–∏ <b>USERNAME</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=back_keyboard, parse_mode="HTML")
            if message.reply_markup:
                await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
            else:
                await save_temp_message(message.from_user.id, message.text, None)
            await AdmCommandState.WAITING_ID_OF_USER_HANDLE_FOR_DELETE.set()

        elif message.text == "/ban":
            await message.answer("<b>‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ùå:</b>\n\n–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ USERNAME –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:", parse_mode="HTML", reply_markup=back_keyboard)
            if message.reply_markup:
                await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
            else:
                await save_temp_message(message.from_user.id, message.text, None)
            await BanUserState.WAITING_FOR_USER_ID.set()
        
        elif message.text == "/unban":
            await message.answer("<b>‚Ä¢ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚úÖ:</b>\n\n–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ USERNAME –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:", parse_mode="HTML", reply_markup=back_keyboard)
            if message.reply_markup:
                await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
            else:
                await save_temp_message(message.from_user.id, message.text, None)
            await UnbanUserState.WAITING_FOR_USER_ID.set()

        elif message.text == "/user_info":
            await message.answer("<b>‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ üóÉ:</b> \n\n–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ USERNAME –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å: ", reply_markup=back_keyboard, parse_mode="HTML")
            if message.reply_markup:
                await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
            else:
                await save_temp_message(message.from_user.id, message.text, None)
            await AdmButtonState.WAITING_FOR_USER_ID_FOR_USER_INFO.set()

        elif message.text == "/user_vpn":
            await message.answer("<b>‚Ä¢ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üõ°Ô∏è: </b>\n\n–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ USERNAME –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ VPN –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å: ", reply_markup=back_keyboard, parse_mode="HTML")
            if message.reply_markup:
                await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
            else:
                await save_temp_message(message.from_user.id, message.text, None)
            await UserVPNInfo.WAITING_FOR_USER_ID_FOR_USER_VPN_INFO.set()
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (/help)", reply_markup=start_kb_handle(user_id))   


def register_command_handlers(dp: Dispatcher) -> None:
    dp.register_message_handler(handle_text, content_types=['text'])