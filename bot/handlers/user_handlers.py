import os 
import json
import dns.resolver
import datetime

from dotenv import load_dotenv
from typing import NamedTuple

from aiogram import Bot, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from aiogram.dispatcher.filters.state import StatesGroup, State

from bot.database.OperationsData import edit_operations_history, getting_operation_history
from bot.database.TempData import save_temp_message, get_temp_message, delete_temp_message, find_message_id
from bot.database.UserData import edit_profile, addind_vpn_count, get_balance, buy_operation, add_operation, pay_operation, get_referrer_info, check_promocode_used, save_promocode, find_user_data
from bot.database.VpnData import extend_vpn_state, get_vpn_data, update_vpn_other_info, update_vpn_half_info
from bot.database.SupportData import edit_data, getting_question

from bot.keyboards.user_keyboards import checking_message_limit, check_balance_keyboard,create_payment_keyboard, payment_type_keyboard, final_extend_some_vpn, profile_keyboard, support_to_moders, start_kb_handle, vpn_connection_type_keyboard, pay_netherlands_keyboard, help_kb, balance_handle_keyboard, find_balance_keyboard, ref_system_keyboard, support_keyboard, location_keyboard, pay_sweden_keyboard, pay_finland_keyboard, pay_germany_keyboard, replenishment_balance, back_keyboard, insturtion_keyboard, buy_keyboard, extend_keyboard, numbers_for_replenishment, addind_count_for_extend, promocode_keyboard, device_keyboard
from bot.keyboards.adm_keyboards import reply_keyboard, reply_buy_keyboard

from bot.utils.yoomoney_payment import yoomoney_check, create_yoomoney_payment
from bot.utils.nicepay_payment import nicepay_check, create_nicepay_payment
from bot.utils.outline import create_new_key, find_keys_info 

# –∏–º–ø–æ—Ä—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv('.env')
BOT_TOKEN = os.getenv("BOT_TOKEN")
BLAZER_CHAT_TOKEN = os.getenv("BLAZER_CHAT_TOKEN") 
ANUSH_CHAT_TOKEN = os.getenv("ANUSH_CHAT_TOKEN")
VPN_SWEDEN_PRICE_TOKEN = os.getenv("VPN_SWEDEN_PRICE_TOKEN") 
VPN_FINLAND_PRICE_TOKEN = os.getenv("VPN_FINLAND_PRICE_TOKEN")
VPN_GERMANY_PRICE_TOKEN = os.getenv("VPN_GERMANY_PRICE_TOKEN")
VPN_NETHERLANDS_PRICE_TOKEN = os.getenv("VPN_NETHERLANDS_PRICE_TOKEN")
PROMOCODE_TOKEN = os.getenv("PROMOCODE_TOKEN")

bot = Bot(BOT_TOKEN)

"""************************************************************* –°–û–°–¢–û–Ø–ù–ò–Ø **********************************************************"""

class BuyVPNStates(StatesGroup):
    WAITING_FOR_MESSAGE_TEXT = State()

class PaymentStates(StatesGroup):
    WAITING_FOR_AMOUNT = State()
    WAITING_FOR_USER_EMAIL_HANDLE = State()
    WAINING_FOR_PAYMENT_TYPE = State()
    WAITING_FOR_MESSAGE_TEXT = State()

class SupportStates(StatesGroup):
    WAITING_FOR_QUESTION = State()
    WAITING_FOR_MODERATOR_ANSWER = State()

class PromocodeStates(StatesGroup):
    WAITING_FOR_USER_PROMOCODE = State()

class AdmCommandState(StatesGroup):
    WAITING_ID_OF_USER_FOR_DELETE = State()
    WAITING_ID_OF_USER_FOR_ADD = State()
    WAITING_ID_OF_USER_HANDLE_FOR_ADD = State()
    WAITING_ID_OF_USER_HANDLE_FOR_DELETE = State()
    WAITING_FOR_SUM_HANDLE_FOR_ADD = State()
    WAITING_FOR_SUM_HANDLE_FOR_DELETE = State()

class AdmButtonState(StatesGroup):
    WAITING_FOR_USER_ID_FOR_USER_INFO = State()
    WAITING_FOR_CALLBACK_BUTTONS = State()

class UserEmailState(StatesGroup):
    WAITING_FOR_USER_EMAIL = State()

class UserVPNInfo(StatesGroup):
    WAITING_FOR_USER_ID_FOR_USER_VPN_INFO = State()

class BanUserState(StatesGroup):
    WAITING_FOR_USER_ID = State()

class UnbanUserState(StatesGroup):
    WAITING_FOR_USER_ID = State()

class SupportRequest(NamedTuple):
    user_id: int
    user_name: str
    question: str
    answer: str = None

previous_markup = None
previous_states = {}
support_requests = []




"""************************************************* –ë–ê–ó–û–í–´–ï –ö–û–ú–ê–ù–î–´ (/start, /help, /balance) *****************************************************"""
global start_message_for_reply
start_message_for_reply = """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>BlazerVPN</b> ‚Äì –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –≤ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Å–≤—è–∑–∏ –≤ —Å–µ—Ç–∏.

–ù–∞—à —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —á–µ—Ç—ã—Ä–µ–º –ª–æ–∫–∞—Ü–∏—è–º:<b>

‚Ä¢ üá∏üá™ –®–≤–µ—Ü–∏—è
‚Ä¢ üá´üáÆ –§–∏–Ω–ª—è–Ω–¥–∏—è
‚Ä¢ üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è
‚Ä¢ üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã
</b>
–û–±–µ—Å–ø–µ—á–∏–≤–∞—è –±—ã—Å—Ç—Ä—É—é –∏ –∑–∞—â–∏—â–µ–Ω–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö. –ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å, <b>BlazerVPN</b> –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–µ–π –æ–Ω–ª–∞–π–Ω –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –û–±–µ—Å–ø–µ—á—å—Ç–µ —Å–µ–±–µ —Å–≤–æ–±–æ–¥—É –∏ –∑–∞—â–∏—Ç—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —Å <b>BlazerVPN!</b>"""


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start_cmd(message: Message):
    user_name = message.from_user.username
    user_id = message.from_user.id
    result = await find_user_data(user_id=user_id)
    if result == None or result == []: 
        start_command = message.text
        print(start_command)
        referrer_id = str(start_command[7:])
        if referrer_id != "":
            if referrer_id != str(user_id):
                await edit_profile(user_name, user_id, referrer_id)
                await message.answer_photo(photo="https://imgur.com/f9IQEVG", caption="‚Ä¢ ü§ù <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>:\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –ë–æ–Ω—É—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–∏–ª–∏—Å—å —Ä–µ—Ñ–µ—Ä–µ—Ä—É –Ω–∞ –±–∞–ª–∞–Ω—Å.\n\n<i>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ - /ref_system </i>", parse_mode="HTML", reply_markup=ref_system_keyboard)
                try:
                    await bot.send_photo(chat_id=referrer_id, photo="https://imgur.com/f9IQEVG", caption="‚Ä¢ ü§ù <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>:\n\n–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω—ã: <code>20</code>‚ÇΩ ", reply_markup=find_balance_keyboard, parse_mode="HTML")
                    await add_operation(int(20), referrer_id)
                    result = await find_user_data(user_id=referrer_id)
                    for items in result:
                        user_name = items[2]
                    await edit_operations_history(user_id=referrer_id, user_name=user_name, operations=(+int(20)), description_of_operation="ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
                except:
                    pass
            else:
                await message.answer_photo(photo="https://imgur.com/f9IQEVG", caption="‚Ä¢ ü§ù <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>:\n\n–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ ‚ùå\n\n<i>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ - /ref_system </i>", parse_mode="HTML", reply_markup=ref_system_keyboard)
                await edit_profile(user_name, user_id)
        else:
            await edit_profile(user_name, user_id)
            await message.answer_photo(photo="https://imgur.com/oaUI02P", caption=start_message_for_reply, reply_markup=start_kb_handle(user_id), parse_mode="HTML")
    else:
        await edit_profile(user_name, user_id)
        await message.answer_photo(photo="https://imgur.com/oaUI02P", caption=start_message_for_reply, reply_markup=start_kb_handle(user_id), parse_mode="HTML")
    await register_commands(message=message)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ balance (balance)
async def balance_def(callback: CallbackQuery):
    user_id = callback.from_user.id
    balance = await get_balance(user_id=user_id)
    await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/VfCjBuE", caption=f"‚Ä¢ üíµ <b>–ë–∞–ª–∞–Ω—Å</b>:\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: <code>{balance}</code> ‚ÇΩ\n\n<i>–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å, –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É - /replenishment</i>", parse_mode="HTML"), reply_markup=balance_handle_keyboard)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ help(help_callback)
async def help_kb_handle(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/wz2wvor", caption="‚Ä¢ üßë‚Äçüíª <b>–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º</b>:\n\n–î–ª—è —Å–≤—è–∑–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ <b><a href = 'https://t.me/KING_08001'>—Å—Å—ã–ª–∫–µ</a></b>", parse_mode="HTML"), reply_markup=help_kb)

"""*********************************************** –í–´–ë–û–† –õ–û–ö–ê–¶–ò–ò –ò –ü–û–ö–£–ü–ö–ê –í–ü–ù ************************************************************************"""
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏ (buy)
async def buying_VPN_handle(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/7Qhm4tw", caption="‚Ä¢ üìç <b>–õ–æ–∫–∞—Ü–∏—è:</b>\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏:", parse_mode="HTML"), reply_markup=location_keyboard)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ª–æ–∫–∞—Ü–∏–π (Sweden_callback, Finland_callback, Germany_callback)
async def location_choose_def(callback: CallbackQuery, state: FSMContext):
    if callback.data == "Sweden_callback":
        await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/Lf6OlGm", caption=f"‚Ä¢ üõ° <b>–í—ã–±–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é: –®–≤–µ—Ü–∏—è üá∏üá™\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ VPN:", parse_mode="HTML"), reply_markup=await vpn_connection_type_keyboard(location="–®–≤–µ—Ü–∏—è üá∏üá™"))
    
    elif callback.data == "Netherlands_callback":
        await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/Lf6OlGm", caption=f"‚Ä¢ üõ° <b>–í—ã–±–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é: –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã üá≥üá±\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ VPN:", parse_mode="HTML"), reply_markup=await vpn_connection_type_keyboard(location="–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã üá≥üá±"))

    elif callback.data == "Finland_callback":
        await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/Lf6OlGm", caption=f"‚Ä¢ üõ° <b>–í—ã–±–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é: –§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ VPN:",  parse_mode="HTML"), reply_markup=await vpn_connection_type_keyboard(location="–§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ"))

    elif callback.data == "Germany_callback":
        await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/Lf6OlGm", caption=f"‚Ä¢ üõ° <b>–í—ã–±–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é: –ì–µ—Ä–º–∞–Ω–∏—è üá©üá™\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ VPN:",  parse_mode="HTML"), reply_markup=await vpn_connection_type_keyboard(location="–ì–µ—Ä–º–∞–Ω–∏—è üá©üá™"))
    await callback.answer("")

async def choosing_vpn_connection_def(callback: CallbackQuery, state: FSMContext):
    location = callback.data.split(".")[1]
    if location == "–®–≤–µ—Ü–∏—è üá∏üá™":
        price = await taking_vpn_price(country="–®–≤–µ—Ü–∏—è üá∏üá™")
        kb = pay_sweden_keyboard
    elif location == "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã üá≥üá±":
        price = await taking_vpn_price(country="–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã üá≥üá±")
        kb = pay_netherlands_keyboard
    elif location == "–§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ":
        price = await taking_vpn_price(country="–§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ")
        kb = pay_finland_keyboard
    elif location == "–ì–µ—Ä–º–∞–Ω–∏—è üá©üá™":
        price = await taking_vpn_price(country="–ì–µ—Ä–º–∞–Ω–∏—è üá©üá™")
        kb = pay_germany_keyboard
    await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/cXpphjT", caption=f"‚Ä¢ üõ° <b>–ü–æ–∫—É–ø–∫–∞ VPN:</b>\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏ VPN –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏: {location}\n–ü—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: <code>Shadowsocks</code> üß¶\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ VPN: <code>{price}</code> ‚ÇΩ", parse_mode="HTML"), reply_markup=kb)
    await callback.answer('')

# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É VPN.
async def buying_VPN_def(callback, country,  state):
    user_name = callback.from_user.username
    user_id = callback.from_user.id
    balance = await get_balance(user_id=user_id)
    price = await taking_vpn_price(country=country)

    if int(balance) >= int(price):
        await buy_operation(user_id=user_id, user_name=user_name, price=price)

        expiration_date = datetime.datetime.now() + datetime.timedelta(days=28) # —Å—Ä–æ–∫ –¥–µ–∏ÃÜ—Å—Ç–≤–∏—è VPN 28 –¥–Ω–µ–π
        vpn_id = await update_vpn_half_info(user_id=user_id, user_name=user_name, location=country, expiration_days=expiration_date.strftime("%d.%m.%Y %H:%M:%S")) # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ–ª–æ–≤–∏–Ω—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–ø–Ω –≤ –±–¥
        create_new_key(key_id=vpn_id, name=f"ID: {user_id}", data_limit_gb=100.0) # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è VPN
        vpn_key = find_keys_info(key_id=vpn_id) # –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞
        await update_vpn_other_info(vpn_key=vpn_key, vpn_id=vpn_id) # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–∞ –≤ –±–¥
        await addind_vpn_count(user_id=user_id)
        await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/cXpphjT", caption=f"‚Ä¢ üõí <b>–ü–æ–∫—É–ø–∫–∞ VPN</b>:\n\n–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –±—ã–ª –ø—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω ‚úÖ\n\nüîë –ö–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: <pre>{vpn_key}</pre>\n\n–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é VPN –Ω–∏–∂–µ –ø–æ –∫–Ω–æ–ø–∫–µ.", parse_mode="HTML"), reply_markup=insturtion_keyboard)
        await edit_operations_history(user_id=user_id, user_name=user_name, operations=(-(float(price))), description_of_operation="üõí –ü–æ–∫—É–ø–∫–∞ VPN")
        # if user_name != None:
        #     await bot.send_photo(photo="https://imgur.com/CLwDaV5", chat_id=BLAZER_CHAT_TOKEN, caption=f"‚ùóÔ∏è <b>–í–∞–∂–Ω–æ!</b>\n\n‚Ä¢ üõí <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é VPN:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} \n(ID: <code>{user_id}</code>)\n–ó–∞–∫–∞–∑–∞–ª VPN –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏: {country}\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.", reply_markup=reply_buy_keyboard(pay_id=order_id, country=country, user_id=user_id), parse_mode="HTML")
        #     await bot.send_photo(photo="https://imgur.com/CLwDaV5", chat_id=ANUSH_CHAT_TOKEN, caption=f"‚ùóÔ∏è <b>–í–∞–∂–Ω–æ!</b>:\n\n‚Ä¢ üõí <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é VPN:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} \n(ID: <code>{user_id}</code>)\n–ó–∞–∫–∞–∑–∞–ª VPN –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏: {country}\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.", reply_markup=reply_buy_keyboard(pay_id=order_id, country=country, user_id=user_id), parse_mode="HTML")
        #     await bot.send_photo(photo="https://imgur.com/CLwDaV5", chat_id=HELPER_CHAT_TOKEN, caption=f"‚ùóÔ∏è <b>–í–∞–∂–Ω–æ!</b>:\n\n‚Ä¢ üõí <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é VPN:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} \n(ID: <code>{user_id}</code>)\n–ó–∞–∫–∞–∑–∞–ª VPN –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏: {country}\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.", reply_markup=reply_buy_keyboard(pay_id=order_id, country=country, user_id=user_id), parse_mode="HTML")
        # else:
        #     await bot.send_photo(photo="https://imgur.com/CLwDaV5", chat_id=ANUSH_CHAT_TOKEN, caption=f"‚ùóÔ∏è <b>–í–∞–∂–Ω–æ!</b>:\n\n‚Ä¢ üõí <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é VPN:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ <b>USERNAME</b> \n(ID: <code>{user_id}</code>)\n–ó–∞–∫–∞–∑–∞–ª VPN –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏: {country}\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.", reply_markup=reply_buy_keyboard(pay_id=order_id, country=country, user_id=user_id), parse_mode="HTML")
        #     await bot.send_photo(photo="https://imgur.com/CLwDaV5", chat_id=BLAZER_CHAT_TOKEN, caption=f"‚ùóÔ∏è <b>–í–∞–∂–Ω–æ!</b>\n\n‚Ä¢ üõí <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é VPN:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ <b>USERNAME</b> \n(ID: <code>{user_id}</code>)\n–ó–∞–∫–∞–∑–∞–ª VPN –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏: {country}\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.", reply_markup=reply_buy_keyboard(pay_id=order_id, country=country, user_id=user_id), parse_mode="HTML")
        #     await bot.send_photo(photo="https://imgur.com/CLwDaV5", chat_id=HELPER_CHAT_TOKEN, caption=f"‚ùóÔ∏è <b>–í–∞–∂–Ω–æ!</b>\n\n‚Ä¢ üõí <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é VPN:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ <b>USERNAME</b> \n(ID: <code>{user_id}</code>)\n–ó–∞–∫–∞–∑–∞–ª VPN –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏: {country}\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.", reply_markup=reply_buy_keyboard(pay_id=order_id, country=country, user_id=user_id), parse_mode="HTML")
    else:
        await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/2RUdfMp", caption="‚Ä¢ üõí <b>–ü–æ–∫—É–ø–∫–∞ VPN</b>:\n\n–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå\n\n<i>–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</i>", parse_mode="HTML"), reply_markup=replenishment_balance)
    await callback.answer("")
    
async def taking_vpn_price(country: str):
    price = 0
    if country == "–®–≤–µ—Ü–∏—è üá∏üá™":
        price = VPN_SWEDEN_PRICE_TOKEN
        return price
    elif country == "–§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ":
        price = VPN_FINLAND_PRICE_TOKEN
        return price

    elif country == "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã üá≥üá±":
        price = VPN_NETHERLANDS_PRICE_TOKEN
        return price

    elif country == "–ì–µ—Ä–º–∞–Ω–∏—è üá©üá™":
        price = VPN_GERMANY_PRICE_TOKEN
        return price

# —Ö–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é, –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏ VPN. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ (Buying_sweden_VPN, Buying_finland_VPN, Buying_germany_VPN)
async def choosing_location_for_buying_VPN(callback: CallbackQuery, state: FSMContext):
    if callback.data == "Buying_sweden_VPN":
        await buying_VPN_def(callback, "–®–≤–µ—Ü–∏—è üá∏üá™", state)
    elif callback.data == "Buying_finland_VPN":
        await buying_VPN_def(callback, "–§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ", state)
    elif callback.data == "Buying_germany_VPN":
        await buying_VPN_def(callback, "–ì–µ—Ä–º–∞–Ω–∏—è üá©üá™", state)
    elif callback.data == "Buying_netherlands_VPN":
        await buying_VPN_def(callback, "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã üá≥üá±", state)
    await callback.answer("")

"""******************************************************* –°–ò–°–¢–ï–ú–ê –û–ë–†–ê–ë–û–¢–ö–ò –ü–†–û–§–ò–õ–Ø ****************************************************"""

async def profile_handle(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_info = await find_user_data(user_id=user_id)
    for info in user_info:
        id = info[0]
        user_db_id = info[1]
        user_db_name = info[2]
        balance = info[3]
        time_of_registration = info[4]
        
        referrer_id = info[5]
        if referrer_id == None:
            referrer_id = "-"
        else:
            referrer_name = await find_user_data(user_id=referrer_id)
            referrer_id = f"@{referrer_name} (ID: <code>{referrer_id}</code>)"
        used_promocodes = info[6]
        if used_promocodes == None:
            used_promocodes = "<code>none</code>"
        else:
            used_promocodes = [f"<code>{promo}</code>" for promo in used_promocodes.split(",")]
            used_promocodes = ", ".join(used_promocodes)
        vpns_count = info[8]

    
    await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/tjRqQST", caption=f"‚Ä¢ üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>:\n\n"
                                                            f"ID: <code>{id}</code>\n"
                                                            f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{user_db_id}</code>\n"
                                                            f"–ë–∞–ª–∞–Ω—Å: <code>{balance}</code> ‚ÇΩ\n"
                                                            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <code>{time_of_registration}</code>\n"
                                                            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã: {used_promocodes}\n"
                                                            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ VPN –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: <code>{vpns_count}</code>\n\n"
                                                            f"", parse_mode="HTML"), reply_markup=profile_keyboard)



"""******************************************************* –°–ò–°–¢–ï–ú–ê –ò–ù–°–¢–†–£–ö–¶–ò–ô –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ VPN ****************************************************"""

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ (instruction_keyboard)
async def instruction_handle(callback: CallbackQuery):
    await callback.message.answer_photo(photo="https://imgur.com/99Kpo93", caption="‚Ä¢ üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é VPN üõ°:", parse_mode="HTML", reply_markup=device_keyboard)
    await callback.answer('')

"""*********************************************************** –°–ò–°–¢–ï–ú–ê –ü–û –ü–†–û–î–õ–ï–ù–ò–Æ VPN ******************************************************************"""

# —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è VPN(extend_vpn_info, extend_callback)
async def extend_vpn_handle(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if callback.data == "extend_vpn_info":
        user_id = callback.from_user.id
        vpn_data = await get_vpn_data(user_id=user_id)      
        if vpn_data is not None:      
            numbers = 0
            vpn_info_text = ""
            for id, user_db_id, user_db_name, location, expiration_date, vpn_key, days_remaining in vpn_data:
                numbers += 1
                if expiration_date is not None:
                    expiration_date_new = datetime.datetime.strptime(expiration_date, "%d.%m.%Y %H:%M:%S")
                    days_remaining = (expiration_date_new - datetime.datetime.now()).days
                    vpn_info_text += f"{numbers}. ID: <code>{id}</code>\nüìç –õ–æ–∫–∞—Ü–∏—è:  <code> {location}</code>\nüïò –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:   <code>{expiration_date}</code>\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å:   <code>{days_remaining}</code> –¥–Ω–µ–π\n\n"
                else:
                    vpn_info_text += f"{numbers}. –£ –≤–∞—Å –∏–º–µ–µ—Ç—Å—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–π VPN üõ°, –∫–æ—Ç–æ—Ä—ã–π –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.\n\n"
                    numbers -= 1
            kb_for_count = addind_count_for_extend(count=numbers)
            price = await taking_vpn_price(country=location)
            if numbers == 1:
                await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/Fv2UUEl", caption=f"‚Ä¢ üõ° <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN:</b>\n\n{vpn_info_text}<b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–ª–∏—Ç—å VPN </b>üõ°", parse_mode="HTML"), reply_markup=extend_keyboard)
            else:
                if callback.message.photo:
                    await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/Fv2UUEl", caption=f"‚Ä¢ üõ° <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN:</b>\n\n{vpn_info_text}\n<b>–í—ã–±–µ—Ä–∏—Ç–µ VPN </b>üõ°<b>, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å:</b>", parse_mode="HTML"), reply_markup=kb_for_count)
                else: 
                    await callback.message.answer_photo(photo="https://imgur.com/Fv2UUEl", caption=f"‚Ä¢ üõ° <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN:</b>\n\n{vpn_info_text}\n–í—ã–±–µ—Ä–∏—Ç–µ VPN </b>üõ°<b>, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å:</b>", reply_markup=kb_for_count, parse_mode="HTML") 
        else: 
            await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/2RUdfMp", caption="‚Ä¢ üõ° <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN:</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç—É –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ VPN ‚ùå! \n\n<i>–í–∞–º –µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É -</i> /buy", parse_mode="HTML"), reply_markup=buy_keyboard)

    elif callback.data == "extend_sole_vpn":
        user_name = callback.from_user.username
        balance = await get_balance(user_id=user_id)
        user_id = callback.from_user.id
        id, user_db_id, user_db_name, location, expiration_date, vpn_key, days_remaining = await get_vpn_data(user_id=user_id)
        price = await taking_vpn_price(country=location)
        if int(price) <= int(balance):
            await pay_operation(price=price, user_id=user_id)
            await edit_operations_history(user_id=user_id, user_name=user_name, operations=(-(float(price))), description_of_operation="üõ° –ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN")
            new_expiration_date = expiration_date_new + datetime.timedelta(days=28)
            await extend_vpn_state(user_id=user_db_id, location=location, expiration_date=new_expiration_date, id=id)
            await addind_vpn_count(user_id=user_id)

            if callback.message.text is not None:
                await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/vME1ZnR", caption=f"‚Ä¢ üõ° <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN:</b>\n\nVPN –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ <code>28</code>  –¥–Ω–µ–π ‚úÖ \n\n–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è VPN –æ—Å—Ç–∞–ª–æ—Å—å <code>{days_remaining + 28}</code> –¥–Ω–µ–π ‚è≥\nüîë –ö–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: <pre>{vpn_key}</pre>", parse_mode="HTML"), reply_markup=back_keyboard)
            vpn_info_text = f"ID: <code>{id}</code>\nüìç –õ–æ–∫–∞—Ü–∏—è:  <code> {location}</code>\nüïò –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:   <code>{expiration_date}</code>\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å:   <code>{days_remaining + 28}</code> –¥–Ω–µ–π\nüîë –ö–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: <pre>{vpn_key}</pre>\n\n"
            if user_name != None:
                await bot.send_photo(photo="https://imgur.com/Fv2UUEl", chat_id=ANUSH_CHAT_TOKEN, caption=f"‚Ä¢ üõ° <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN</b>:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} \n(ID: <code>{user_id})</code>\n–ü—Ä–æ–¥–ª–∏–ª VPN üõ° –Ω–∞ <code>28</code> –¥–Ω–µ–π:\n\n{vpn_info_text}", parse_mode="HTML")
                await bot.send_photo(photo="https://imgur.com/Fv2UUEl", chat_id=BLAZER_CHAT_TOKEN, caption=f"‚Ä¢ üõ° <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN</b>:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} \n(ID: <code>{user_id})</code>\n–ü—Ä–æ–¥–ª–∏–ª VPN üõ° –Ω–∞ <code>28</code> –¥–Ω–µ–π:\n\n{vpn_info_text}", parse_mode="HTML")
            else:
                await bot.send_photo(photo="https://imgur.com/Fv2UUEl", chat_id=BLAZER_CHAT_TOKEN, caption=f"‚Ä¢ üõ° <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN</b>:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ <b>USERNAME</b> \n(ID: <code>{user_id})</code>\n–ü—Ä–æ–¥–ª–∏–ª VPN üõ° –Ω–∞ <code>28</code> –¥–Ω–µ–π:\n\n{vpn_info_text}", parse_mode="HTML")
                await bot.send_photo(photo="https://imgur.com/Fv2UUEl", chat_id=ANUSH_CHAT_TOKEN, caption=f"‚Ä¢ üõ° <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN</b>:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ <b>USERNAME</b> \n(ID: <code>{user_id})</code>\n–ü—Ä–æ–¥–ª–∏–ª VPN üõ° –Ω–∞ <code>28</code> –¥–Ω–µ–π:\n\n{vpn_info_text}", parse_mode="HTML")
        
        else:
            await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå")
            await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/2RUdfMp", caption="‚Ä¢ üíµ <b>–ë–∞–ª–∞–Ω—Å</b>:\n\n–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå\n\n<i>–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å </i>üíµ <i>–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</i>", parse_mode="HTML"), reply_markup=replenishment_balance)
    
    elif "extend_some_vpn" in callback.data:
        user_id = callback.from_user.id
        user_name = callback.from_user.username
        vpn_number = callback.data.split('_')[3]
        vpn_data = await get_vpn_data(user_id=user_id)
        vpn = vpn_data[int(vpn_number) - int(1)]
        id = vpn[0]
        location = vpn[3]
        expiration_date = datetime.datetime.strptime(vpn[4], "%d.%m.%Y %H:%M:%S")
        vpn_key = vpn[5]
        days_remaining = (expiration_date - datetime.datetime.now()).days
        price = await taking_vpn_price(country=location)
        vpn_info_text = f"ID: <code>{id}</code>\nüìç –õ–æ–∫–∞—Ü–∏—è:  <code> {location}</code>\nüïò –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:   <code>{expiration_date}</code>\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å:   <code>{days_remaining}</code> –¥–Ω–µ–π\nüîë –ö–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: <pre>{vpn_key}</pre>\n\n"

        await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/Fv2UUEl", caption=f"‚Ä¢ üõ° <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN:</b>:\n\n{vpn_info_text}<b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN –Ω–∞ <code>28</code> –¥–Ω–µ–π —Å—Ç–æ–∏—Ç <code>{price}</code></b> ‚ÇΩ üíµ", parse_mode="HTML"), reply_markup=await final_extend_some_vpn(number=vpn_number))

    elif "final_extend_vpn" in callback.data:
        user_name = callback.from_user.username
        user_id = callback.from_user.id
        vpn_number = callback.data.split('_')[3]
        vpn_data = await get_vpn_data(user_id=user_id)
        vpn = vpn_data[int(vpn_number) - int(1)]
        id = vpn[0]
        location = vpn[3]
        expiration_date = datetime.datetime.strptime(vpn[4], "%d.%m.%Y %H:%M:%S")
        vpn_key = vpn[5]
        days_remaining = (expiration_date - datetime.datetime.now()).days
        new_expiration_date = expiration_date + datetime.timedelta(days=28)
        balance = await get_balance(user_id=user_id)
        price = await taking_vpn_price(country=location)
        if int(price) <= int(balance):
            await pay_operation(price=price, user_id=user_id)
            await edit_operations_history(user_id=user_id, user_name=user_name, operations=int(-(float(price))), description_of_operation="üõ° –ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN")
            vpn_info_text = f"ID: <code>{id}</code>\nüìç –õ–æ–∫–∞—Ü–∏—è:  <code> {location}</code>\nüïò –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:   <code>{expiration_date.strftime('%d.%m.%Y %H:%M:%S')}</code>\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å:   <code>{days_remaining + 28}</code> –¥–Ω–µ–π\nüîë –ö–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: <pre>{vpn_key}</pre>\n\n"
            await extend_vpn_state(user_id=user_id, location=location, expiration_date=new_expiration_date, id=id)
            await addind_vpn_count(user_id=user_id)
            await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/vME1ZnR", caption=f"‚Ä¢ üõ° <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN:</b>:\n\nVPN –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ <code>28</code> –¥–Ω–µ–π ‚úÖ \n\n–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è VPN –æ—Å—Ç–∞–ª–æ—Å—å <code>{days_remaining + 28}</code> –¥–Ω–µ–π ‚è≥\nüîë –ö–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: <pre>{vpn_key}</pre>", parse_mode="HTML"), reply_markup=back_keyboard)
            if user_name != None:
                await bot.send_photo(photo="https://imgur.com/Fv2UUEl", chat_id=ANUSH_CHAT_TOKEN, caption=f"‚Ä¢ üõ° <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} \n(ID: <code>{user_id})</code>\n–ü—Ä–æ–¥–ª–∏–ª VPN üõ° –Ω–∞ <code>28</code> –¥–Ω–µ–π:\n\n{vpn_info_text}", parse_mode="HTML")
                await bot.send_photo(photo="https://imgur.com/Fv2UUEl", chat_id=BLAZER_CHAT_TOKEN, caption=f"‚Ä¢ üõ° <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} \n(ID: <code>{user_id})</code>\n–ü—Ä–æ–¥–ª–∏–ª VPN üõ° –Ω–∞ <code>28</code> –¥–Ω–µ–π:\n\n{vpn_info_text}", parse_mode="HTML")
            else:
                await bot.send_photo(photo="https://imgur.com/Fv2UUEl", chat_id=ANUSH_CHAT_TOKEN, caption=f"‚Ä¢ üõ° <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ <b>USERNAME</b> \n(ID: <code>{user_id})</code>\n–ü—Ä–æ–¥–ª–∏–ª VPN üõ° –Ω–∞ <code>28</code> –¥–Ω–µ–π:\n\n{vpn_info_text}", parse_mode="HTML")
                await bot.send_photo(photo="https://imgur.com/Fv2UUEl", chat_id=BLAZER_CHAT_TOKEN, caption=f"‚Ä¢ üõ° <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ <b>USERNAME</b> \n(ID: <code>{user_id})</code>\n–ü—Ä–æ–¥–ª–∏–ª VPN üõ° –Ω–∞ <code>28</code> –¥–Ω–µ–π:\n\n{vpn_info_text}", parse_mode="HTML")
        else:
            await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå")
            await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/2RUdfMp", caption="‚Ä¢ üíµ <b>–ë–∞–ª–∞–Ω—Å</b>:\n\n–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå\n–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å üíµ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É - /replenishment", parse_mode="HTML"), reply_markup=replenishment_balance)
    await callback.answer("")

"""**************************************************** –°–ò–°–¢–ï–ú–ê –ü–û–ü–û–õ–ù–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê **********************************************************"""

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã(replenishment)
async def replenishment_handle(callback: CallbackQuery):
    await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/GedgOxd", caption="‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è üíµ, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ: ", parse_mode="HTML"), reply_markup=numbers_for_replenishment)
    await PaymentStates.WAITING_FOR_AMOUNT.set()
    await callback.answer("")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def choosing_int_for_replenishment(callback: CallbackQuery, state):
    global amount
    if callback.data == "100_for_replenishment_callback":
        amount = 100
    elif callback.data == "200_for_replenishment_callback":
        amount = 200
    elif callback.data == "500_for_replenishment_callback":
        amount = 500

    await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/GedgOxd", caption="‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É:", parse_mode="HTML"), reply_markup=await payment_type_keyboard(price=amount))

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
async def handle_amount(message: Message, state):
    try:
        global amount
        amount = int(message.text)
        if amount > 2:
            await message.answer_photo(photo="https://imgur.com/GedgOxd", caption="‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É:", parse_mode="HTML", reply_markup=await payment_type_keyboard(price=amount))
            await state.finish()
        else:
            attempts = await state.get_data()
            if attempts.get("attempts", 0) >= 3:
                await message.answer_photo(photo="https://imgur.com/2RUdfMp", caption="‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå \n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /replenishment", reply_markup=back_keyboard, parse_mode="HTML")
                await state.finish()
            else:
                await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                await message.answer_photo(photo="https://imgur.com/2RUdfMp", caption="‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ <code>50</code> ‚ÇΩ ‚ùå", parse_mode="HTML")
    except ValueError:
        attempts = await state.get_data()
        if attempts.get("attempts", 0) >= 3:
            await message.answer_photo(photo="https://imgur.com/2RUdfMp", caption="‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /replenishment ", reply_markup=back_keyboard, parse_mode="HTML")
            await state.finish()
        else:
            await state.update_data(attempts=attempts.get("attempts", 0) + 1)
            await message.answer_photo(photo="https://imgur.com/2RUdfMp", caption="‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ) ‚ùå", parse_mode="HTML")

async def handle_payment_type(callback: CallbackQuery, state):
    if "yoomoney_callback" in callback.data:
        amount = int(callback.data.split("_")[2])
        payment_url, payment_id = create_yoomoney_payment(float(amount))
        payment_button = await create_payment_keyboard(payment_url=payment_url, payment_id=payment_id, payment_type="yoomoney")
        await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/GedgOxd", caption="‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. ‚úÖ", parse_mode="HTML"), reply_markup=payment_button)
        await state.finish() 

    elif "nicepay_callback" in callback.data:
        amount = int(callback.data.split("_")[2])
        await state.update_data(amount=amount)
        await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/GedgOxd", caption=f"‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É: üí≥<code> NicePay</code>\n–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: <code>{amount}</code>\n\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É:", parse_mode="HTML"), reply_markup=back_keyboard) 
        await UserEmailState.WAITING_FOR_USER_EMAIL.set()
        await state.finish()

async def handle_user_email(message: Message, state):
    email = message.text
    amount = await state.get_data("amount")
    try:
        domain = email.split('@')[1]
        resolver = dns.resolver.Resolver()
        answers = resolver.query(domain, 'MX')

        if answers:
            amount = float(amount['amount'])  
            payment_url, payment_id = create_nicepay_payment(float(amount), email=email)
            payment_button = await create_payment_keyboard(payment_url=payment_url, payment_id=payment_id, payment_type="nicepay")
            await message.answer_photo(photo="https://imgur.com/GedgOxd", caption="‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. ‚úÖ", parse_mode="HTML", reply_markup=payment_button) 
            await state.finish()
        else:
            attempts = await state.get_data("attempts")
            if attempts.get("attempts", 0) >= 3:
                await message.answer_photo(photo="https://imgur.com/2RUdfMp", caption="‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /replenishment ", reply_markup=back_keyboard, parse_mode="HTML")
                await state.finish()
            else:
                await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                await message.answer_photo(photo="https://imgur.com/2RUdfMp", caption="‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—É—é –ø–æ—á—Ç—É ‚ùå", parse_mode="HTML")

    except Exception as e:
        attempts = await state.get_data("attempts")
        if attempts.get("attempts", 0) >= 3:
            await message.answer_photo(photo="https://imgur.com/2RUdfMp", caption="‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /replenishment ", reply_markup=back_keyboard, parse_mode="HTML")
            await state.finish()
        else:
            await state.update_data(attempts=attempts.get("attempts", 0) + 1)
            await message.answer_photo(photo="https://imgur.com/2RUdfMp", caption="‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—É—é –ø–æ—á—Ç—É ‚ùå", parse_mode="HTML")        
            print(f"–û—à–∏–±–∫–∞ DNS-–∑–∞–ø—Ä–æ—Å–∞: {e}")

          
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏, –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è(checking_payment_)
async def succesfull_payment(callback: CallbackQuery):
    if "yoomoney" in callback.data:
        payment_id = yoomoney_check(callback.data.split('_')[-1])
        user_name = callback.from_user.username
        user_id = callback.from_user.id
        if payment_id == True:
            await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/jMVwz7i", caption=f'‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–û–ø–ª–∞—Ç–∞ –Ω–∞ —Å—É–º–º—É <code>{amount}</code> <b>‚ÇΩ</b> –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ \n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å - /balance', parse_mode="HTML"), reply_markup=check_balance_keyboard)
            await add_operation(amount, user_id)
            await edit_operations_history(user_id=user_id, user_name=user_name, operations=(+(int(amount))), description_of_operation="üíµ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")
        elif payment_id == False:
            await callback.answer('–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞.')
    
    elif "nicepay" in callback.data:
        payment_id = nicepay_check(callback.data.split('_')[-1])
        user_name = callback.from_user.username
        user_id = callback.from_user.id
        if payment_id == True:
            await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/jMVwz7i", caption=f'‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–û–ø–ª–∞—Ç–∞ –Ω–∞ —Å—É–º–º—É <code>{amount}</code> <b>‚ÇΩ</b> –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ \n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å - /balance', parse_mode="HTML"), reply_markup=check_balance_keyboard)
            await add_operation(amount, user_id)
            await edit_operations_history(user_id=user_id, user_name=user_name, operations=(+(int(amount))), description_of_operation="üíµ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")
        elif payment_id == False:
            await callback.answer('–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞.')
    await callback.answer('')

"""**************************************************** –°–ò–°–¢–ï–ú–ê –ü–û–î–î–ï–†–ñ–ö–ò ********************************************************"""
### –ø–æ–ª–æ–≤–∏–Ω–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ñ–∞–π–ª–µ bot.adm_handlers.py

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (support_callback)
async def support_handle(callback: CallbackQuery):
    await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/K4hLFUD", caption="‚Ä¢ üÜò <b>–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>:\n\n–ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", parse_mode="HTML"), reply_markup=support_to_moders)
    await callback.answer("")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
# async def process_question(message: Message,  state: FSMContext):
#     user_id = message.from_user.id
#     user_name = message.from_user.username
#     question = message.text
#     await edit_data(user_name=user_name, user_id=user_id, question=question)
#     await message.answer("‚Ä¢ üÜò <b>–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>:\n\n–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ.", reply_markup=start_kb_handle(user_id), parse_mode="HTML")
#     if user_name != None:
#         await bot.send_photo(BLAZER_CHAT_TOKEN, f"‚Ä¢ üÜò <b>–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: <code>{user_id})</code>\n–ó–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å:\n\n<b>{question}</b>", reply_markup=reply_keyboard(user_id), parse_mode="HTML")
#         await bot.send_photo(ANUSH_CHAT_TOKEN, f"‚Ä¢ üÜò <b>–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: <code>{user_id})</code>\n–ó–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å:\n\n<b>{question}</b>", reply_markup=reply_keyboard(user_id), parse_mode="HTML")
#     else:
#         await bot.send_photo(BLAZER_CHAT_TOKEN, f"‚Ä¢ üÜò <b>–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ <b>USERNAME</b> (ID: <code>{user_id})</code>\n–ó–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å:\n\n<b>{question}</b>", reply_markup=reply_keyboard(user_id), parse_mode="HTML")
#         await bot.send_photo(ANUSH_CHAT_TOKEN, f"‚Ä¢ üÜò <b>–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ <b>USERNAME</b> (ID: <code>{user_id})</code>\n–ó–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å:\n\n<b>{question}</b>", reply_markup=reply_keyboard(user_id), parse_mode="HTML")
#     if message.reply_markup:
#         await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
#     else:
#         await save_temp_message(message.from_user.id, message.text, None)
#     await state.finish()
    
"""************************************************* –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê **************************************************"""

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã 
async def ref_system(callback: CallbackQuery):
    user_id = callback.from_user.id
    text = ""
    referrals = await get_referrer_info(user_id)
    if referrals:
        text = f"‚Ä¢ ü§ù <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>:\n<pre>https://t.me/blazervpnbot?start={user_id}</pre>\n\n<i>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å–æ —Å–≤–æ–∏–º–∏ –∑–Ω–∞–∫–æ–º—ã–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å <code>20</code> ‚ÇΩ —Å–µ–±–µ –Ω–∞ –±–∞–ª–∞–Ω—Å.</i>\n\n"
        
        text += "<b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:</b>\n\n"
        for referer_id, referer_name in referrals:
            if referer_name: 
                text += f"@{referer_name} (ID: <code>{referer_id}</code>) \n"
            else:
                text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ USERNAME (ID: <code>{referer_id}</code>)\n"
    else:
        text += f"‚Ä¢ ü§ù <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>:\n<pre>https://t.me/blazervpnbot?start={user_id}</pre>\n\n<i>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å–æ —Å–≤–æ–∏–º–∏ –∑–Ω–∞–∫–æ–º—ã–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å <code>20</code> ‚ÇΩ —Å–µ–±–µ –Ω–∞ –±–∞–ª–∞–Ω—Å.</i>\n\n–£ –≤–∞—Å –Ω–µ—Ç—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤."
    await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/UcKZLFn", caption=text, parse_mode="HTML"), reply_markup=back_keyboard)
    await callback.answer("")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def promo_handle(callback: CallbackQuery, state):
    await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/CwQn7Qv", caption="‚Ä¢ üéü <b>–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</b>:\n\n–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–æ–∫–æ–¥:", parse_mode="HTML"), reply_markup=back_keyboard)
    await PromocodeStates.WAITING_FOR_USER_PROMOCODE.set()
    await callback.answer("")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_user_promo(message: Message, state):
    user_promo = message.text
    user_id = message.from_user.id
    user_name = message.from_user.username
    check_used_promo = await check_promocode_used(user_id, user_promo)
    if user_promo in PROMOCODE_TOKEN and check_used_promo == False:
        await message.answer_photo(photo="https://imgur.com/nkB75M2", caption="‚Ä¢ üéü <b>–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</b>:\n\n–í—ã –≤–≤–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ ‚úÖ\n\n–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ: <code>20</code> —Ä—É–±–ª–µ–π üíµ!", reply_markup=back_keyboard, parse_mode="HTML")
        await add_operation(20, user_id)
        await edit_operations_history(user_id=user_id, user_name=user_name, operations=(+(int(20))), description_of_operation="üéü –ü—Ä–æ–º–æ–∫–æ–¥")
        await save_promocode(user_id, user_promo)
        await state.finish()

    elif user_promo in PROMOCODE_TOKEN and check_used_promo == True:
        await message.answer_photo(photo="https://imgur.com/weO3juR", caption="‚Ä¢ üéü <b>–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</b>:\n\n–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ ‚ùå\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ –≤ –≤–∫", reply_markup=promocode_keyboard, parse_mode="HTML")    
        await state.finish()

    else:
        attempts = await state.get_data()
        if attempts.get("attempts", 0) >= 3:
            await message.answer_photo(photo="https://imgur.com/weO3juR", caption="‚Ä¢ üéü <b>–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</b>:\n\n–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /promocode ", reply_markup=back_keyboard, parse_mode="HTML")
            await state.finish()
        else:
            await state.update_data(attempts=attempts.get("attempts", 0) + 1)
            await message.answer_photo(photo="https://imgur.com/weO3juR", caption="‚Ä¢ üéü <b>–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</b>:\n\n–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥, –ª–∏–±–æ –æ–Ω –Ω–µ–∞–∫—Ç—É–∞–ª–µ–Ω ‚ùå\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ –≤ –≤–∫\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –µ—â–µ —Ä–∞–∑:", reply_markup=promocode_keyboard, parse_mode="HTML")
 
"""******************************** –û–ë–†–ê–ë–û–¢–ö–ê –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –°–û–ë–°–¢–í–ï–ù–ù–û–ú VPN –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô *******************************"""

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—á–Ω—ã—Ö VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def my_vpn_handle(callback: CallbackQuery):
    user_id = callback.from_user.id
    vpn_data = await get_vpn_data(user_id=user_id)

    if vpn_data != []:
        vpn_info_text = "‚Ä¢ üõ° <b>–í–∞—à–∏ VPN</b>:\n\n"
        numbers = 0
        is_send = False
        for vpn in vpn_data:
            numbers += 1
            location = vpn[3]
            expiration_date = vpn[4]
            vpn_key = vpn[5]
            expiration_date_new = datetime.datetime.strptime(str(expiration_date), "%d.%m.%Y %H:%M:%S")
            days_remaining = (expiration_date_new - datetime.datetime.now()).days
            vpn_info_text += f"{numbers}. ID: <code>{vpn[0]}</code>\nüìç –õ–æ–∫–∞—Ü–∏—è: <code>{location}</code>\n"
            vpn_info_text += f"üïò –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:   <code>{expiration_date}</code>\n"
            vpn_info_text += f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å:   <code>{days_remaining}</code> –¥–Ω–µ–π\nüîë –ö–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: <pre>{vpn_key}</pre>\n\n"

            if numbers > 4:
                await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/4NwMie5", caption=vpn_info_text, parse_mode="HTML"), reply_markup=checking_message_limit(0))
                is_send = True
                break

        if is_send == False:
            await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/4NwMie5", caption=vpn_info_text, parse_mode="HTML"), reply_markup=buy_keyboard)
    else:
        await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/weO3juR", caption=f"‚Ä¢ üõ° <b>–í–∞—à–∏ VPN</b>:\n\n–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ VPN ‚ùå\n\n<i>–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å VPN, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É</i> - /buy", parse_mode="HTML"), reply_markup=buy_keyboard)
    await callback.answer("")

async def handle_continue_myvpn(callback: CallbackQuery):
    user_id = callback.from_user.id
    vpn_data = await get_vpn_data(user_id=user_id)

    part_number = int(callback.data.split('_')[2])
    if part_number == 1:
        number = 5
    elif part_number == 2:
        number = 9
    elif part_number == 3:
        number = 13
    vpn_info_text = "‚Ä¢ üõ° <b>–í–∞—à–∏ VPN</b>:\n\n"
    numbers = 4
    if vpn_data != None or vpn_data != []:
        for vpn in enumerate(vpn_data[number - 1:], start=number):
            numbers += 1
            location = vpn[1][3]
            expiration_date = vpn[1][4]
            vpn_key = vpn[1][5]
            expiration_date_new = datetime.datetime.strptime(str(expiration_date), "%d.%m.%Y %H:%M:%S")
            days_remaining = (expiration_date_new - datetime.datetime.now()).days
            vpn_info_text += f"{numbers}. ID: <code>{vpn[1][0]}</code>\nüìç –õ–æ–∫–∞—Ü–∏—è: <code> {location}</code>\n"
            vpn_info_text += f"üïò –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:   <code>{expiration_date}</code>\n"
            vpn_info_text += f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å:   <code>{days_remaining}</code> –¥–Ω–µ–π\nüîë –ö–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: <pre>{vpn_key}</pre>\n\n"

            if number >= 8:
                await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/4NwMie5", caption=vpn_info_text, parse_mode="HTML"), reply_markup=checking_message_limit(1))
                break
        await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/4NwMie5", caption=vpn_info_text, parse_mode="HTML"), reply_markup=buy_keyboard)
    else:
        await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/weO3juR", caption=f"‚Ä¢ üõ° <b>–í–∞—à–∏ VPN</b>:\n\n–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ VPN ‚ùå\n\n<i>–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å VPN, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É</i> - /buy", parse_mode="HTML"), reply_markup=buy_keyboard)
    await callback.answer("")
            
"""***************************************** –°–ò–°–¢–ï–ú–ê –ò–°–¢–û–†–ò–ò –û–ü–ï–†–ê–¶–ò–ô *****************************************"""
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def history_of_opeartions_handle(callback: CallbackQuery):
    user_id = callback.from_user.id
    operation_history = await getting_operation_history(user_id=user_id)
    if operation_history is None or operation_history == []:
        await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/weO3juR", caption="‚Ä¢ üìã <b>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</b>:\n\n–£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π ‚ùå", parse_mode="HTML"), reply_markup=replenishment_balance)
        return
    message_text = "‚Ä¢ üìã <b>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</b>:\n\n"
    for operation in operation_history:
        id, user_db_id, user_db_name, operations, time_of_operation, description_of_operation = operation
        operations = operations.split(",")
        time_of_operation = time_of_operation.split(",")
        description_of_operation = description_of_operation.split(",")

        for i in range(len(operations)):
            operation_value = operations[i]
            if "-" not in operation_value:
                operation_value = "+" + operation_value

            message_text += f"<i>{time_of_operation[i]}</i> - <b>{description_of_operation[i]}</b>:  <code>{operation_value}</code> ‚ÇΩ\n"
    await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/QnZumh4", caption=message_text, parse_mode="HTML"), reply_markup=back_keyboard)
    await callback.answer("")

"""************************************************ –°–ò–°–¢–ï–ú–ê –í–û–ó–í–†–ê–©–ï–ù–ò–Ø –ö –ü–†–ï–î–´–î–£–©–ò–ú –°–û–û–ë–©–ï–ù–ò–Ø–ú ********************************************"""

# –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
def deserialize_keyboard(keyboard_json: str) -> InlineKeyboardMarkup:
    keyboard_data = json.loads(keyboard_json)
    keyboard = InlineKeyboardMarkup()

    for row in keyboard_data['inline_keyboard']:
        keyboard.row(*[
            InlineKeyboardButton(text=button['text'], callback_data=button['callback_data'])
            for button in row
        ])

    return keyboard

# —Å–∏—Å—Ç–µ–º–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
async def back_handle(callback: CallbackQuery, state):
    user_id = callback.from_user.id
    await state.finish()
    user_id = callback.from_user.id
    message_id = await find_message_id(user_id)
    
    if message_id:
        message_text, message_markup, photo_url = await get_temp_message(user_id, message_id)
        try:
            if message_text and message_markup and photo_url:
                message_markup = deserialize_keyboard(message_markup)
                await callback.message.edit_media(
                    media=InputMediaPhoto(media=photo_url, caption=message_text, parse_mode="HTML"), 
                    reply_markup=message_markup
                )
            else:
                await callback.message.edit_media(
                    media=InputMediaPhoto(media="https://imgur.com/oaUI02P", caption=start_message_for_reply, parse_mode="HTML"), 
                    reply_markup=start_kb_handle(user_id)
                )
        except Exception as e:
            await callback.message.answer_photo(
                photo="https://imgur.com/oaUI02P", 
                caption=start_message_for_reply, 
                reply_markup=start_kb_handle(user_id), 
                parse_mode="HTML"
            )
    else:
        await callback.message.edit_media(
            media=InputMediaPhoto(media="https://imgur.com/oaUI02P", caption=start_message_for_reply, parse_mode="HTML"), 
            reply_markup=start_kb_handle(user_id)
        )
    await callback.answer("")

async def register_commands(message: Message) -> None:
    if message.from_user.id == int(ANUSH_CHAT_TOKEN) or message.from_user.id == int(BLAZER_CHAT_TOKEN):
        await bot.set_my_commands(commands=[
            BotCommand("start", "üîÅ –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand("help", "üìã –£–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
            BotCommand("balance", "üíµ –£–∑–Ω–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å"),
            BotCommand("connect_with_dev", "üßë‚Äçüíª –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –±–æ—Ç–∞"),
            BotCommand("buy", "üõí –ö—É–ø–∏—Ç—å VPN"),
            BotCommand("extend_vpn", "‚åõÔ∏è –ü—Ä–æ–¥–ª–∏—Ç—å VPN"),
            BotCommand("replenishment", "üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"),
            BotCommand("support", "üÜò –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"),
            BotCommand("my_vpn", "üõ° –ú–æ–∏ VPN"),
            BotCommand("ref_system", "ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"),
            BotCommand("history_of_operations", "üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π"),
            BotCommand("instruction", "üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é VPN"),
            BotCommand("profile", "üë§ –ü—Ä–æ—Ñ–∏–ª—å"),
            BotCommand("user_info", "üóÉ –î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö"),
            BotCommand("user_vpn", "üõ°Ô∏è VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
            BotCommand("add", "üíµ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"),
            BotCommand("delete", "üíµ –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"),
            BotCommand("ban", "‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
            BotCommand("unban", "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
            BotCommand("add_vpn", "üõ°Ô∏è –î–æ–±–∞–≤–∏—Ç—å VPN"),
            BotCommand("delete_vpn", "üõ°Ô∏è –£–¥–∞–ª–∏—Ç—å VPN"),
            BotCommand("user_history", "üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            ])
    else:
        await bot.set_my_commands(commands=[
            BotCommand("start", "üîÅ –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand("help", "üìã –£–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
            BotCommand("balance", "üíµ –£–∑–Ω–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å"),
            BotCommand("connect_with_dev", "üßë‚Äçüíª –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –±–æ—Ç–∞"),
            BotCommand("buy", "üõí –ö—É–ø–∏—Ç—å VPN"),
            BotCommand("extend_vpn", "‚åõÔ∏è –ü—Ä–æ–¥–ª–∏—Ç—å VPN"),
            BotCommand("replenishment", "üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"),
            BotCommand("support", "üÜò –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"),
            BotCommand("my_vpn", "üõ° –ú–æ–∏ VPN"),
            BotCommand("ref_system", "ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"),
            BotCommand("history_of_operations", "üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π"),
            BotCommand("instruction", "üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é VPN"),
            BotCommand("profile", "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
            ])


"""**************************************************** –°–ò–°–¢–ï–ú–ê –†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ò–Ø –í–°–ï–• –•–ï–ù–î–õ–ï–†–û–í *****************************************************"""

def register_user_handlers(dp: Dispatcher) -> None:
    dp.register_message_handler(start_cmd, commands=['start'], state="*")
    dp.register_callback_query_handler(balance_def, lambda c: c.data == "balance", state="*")
    dp.register_callback_query_handler(help_kb_handle, lambda c: c.data == "help_callback", state="*")
    dp.register_callback_query_handler(buying_VPN_handle, lambda c: c.data == "buy", state="*")
    dp.register_callback_query_handler(profile_handle, lambda c: c.data == "profile_callback", state="*")
    dp.register_callback_query_handler(location_choose_def, lambda c: c.data == "Sweden_callback" or c.data == "Finland_callback" or c.data == "Germany_callback" or c.data == "Netherlands_callback", state="*")
    dp.register_callback_query_handler(choosing_vpn_connection_def, lambda c: "vpn_connection_type_callback" in c.data, state="*")
    dp.register_callback_query_handler(choosing_location_for_buying_VPN, lambda c: c.data == "Buying_sweden_VPN" or c.data == "Buying_finland_VPN" or c.data == "Buying_germany_VPN" or c.data == "Buying_netherlands_VPN")
    dp.register_callback_query_handler(instruction_handle, lambda c: c.data == "instruction_keyboard")
    dp.register_callback_query_handler(extend_vpn_handle, lambda c: c.data == "extend_vpn_info" or c.data == "extend_sole_vpn" or "extend_some_vpn" in c.data or "final_extend_vpn" in c.data, state="*")
    dp.register_callback_query_handler(replenishment_handle, lambda c: c.data == "replenishment", state="*")
    dp.register_callback_query_handler(choosing_int_for_replenishment, lambda c: c.data == "100_for_replenishment_callback" or c.data == "200_for_replenishment_callback" or c.data == "500_for_replenishment_callback", state="*")
    dp.register_message_handler(handle_amount, state=PaymentStates.WAITING_FOR_AMOUNT)
    dp.register_callback_query_handler(handle_payment_type, lambda c: "yoomoney_callback" in c.data or "nicepay_callback" in c.data, state="*")
    dp.register_callback_query_handler(succesfull_payment, lambda c: "checking_nicepay_payment" in c.data or "checking_yoomoney_payment" in c.data, state="*")
    dp.register_callback_query_handler(support_handle, lambda c: c.data == "support_callback", state="*")
    dp.register_message_handler(handle_user_email, state=UserEmailState.WAITING_FOR_USER_EMAIL)
    # dp.register_message_handler(process_question, state=SupportStates.WAITING_FOR_QUESTION)
    dp.register_callback_query_handler(ref_system, lambda c: c.data == "ref_system_callback", state="*")
    dp.register_callback_query_handler(promo_handle, lambda c: c.data == "promo_callback", state="*")
    dp.register_message_handler(handle_user_promo, state=PromocodeStates.WAITING_FOR_USER_PROMOCODE)
    dp.register_callback_query_handler(my_vpn_handle, lambda c: c.data == "myvpn_callback", state="*")
    dp.register_callback_query_handler(handle_continue_myvpn, lambda c: "vpn_info_" in c.data, state="*")
    dp.register_callback_query_handler(history_of_opeartions_handle, lambda c: c.data == "history_of_operations_callback", state="*")
    dp.register_callback_query_handler(back_handle, lambda c: c.data == "back", state="*")
