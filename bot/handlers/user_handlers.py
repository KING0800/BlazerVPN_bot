import os 
import dns.resolver
import re
import json

from dotenv import load_dotenv
from typing import NamedTuple
from datetime import datetime

from aiogram import types, Dispatcher, Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from bot.database.OperationsData import edit_operations_history, getting_operation_history
from bot.database.TempData import save_temp_message, get_temp_message, delete_temp_message, find_message_id
from bot.database.UserData import edit_profile, get_balance, buy_operation, pay_operation, get_referrer_username, check_promocode_used, save_promocode, find_user_data, ban_users_handle, unban_users_handle, is_user_ban_check
from bot.database.VpnData import extend_vpn_state, get_vpn_data
from bot.database.SupportData import edit_data, getting_question

from bot.keyboards.user_keyboards import start_kb_handle, support_keyboard, location_keyboard, pay_sweden_keyboard, pay_finland_keyboard, pay_germany_keyboard, replenishment_balance, back_keyboard, insturtion_keyboard, buy_keyboard, extend_keyboard, numbers_for_replenishment, addind_count_for_extend, payment_type, promocode_keyboard, device_keyboard
from bot.keyboards.adm_keyboards import reply_keyboard, reply_buy_keyboard

from bot.utils.payment import check, create_payment

load_dotenv('.env')
BOT_TOKEN = os.getenv("BOT_TOKEN")
BLAZER_CHAT_TOKEN = os.getenv("BLAZER_CHAT_TOKEN") 
ANUSH_CHAT_TOKEN = os.getenv("ANUSH_CHAT_TOKEN")
VPN_PRICE_TOKEN = os.getenv("VPN_PRICE_TOKEN") 
PROMOCODE_TOKEN = os.getenv("PROMOCODE_TOKEN")

bot = Bot(BOT_TOKEN)

"""************************************************************* –°–û–°–¢–û–Ø–ù–ò–Ø **********************************************************"""

class BuyVPNStates(StatesGroup):
    WAITING_FOR_MESSAGE_TEXT = State()

class PaymentStates(StatesGroup):
    WAITING_FOR_AMOUNT = State()
    WAITING_FOR_USER_EMAIL_HANDLE = State()
    WAINING_FOR_PAYMENT_TYPE = State()
    WAITING_FOR_MESSAGE_TEXT = State()

class SupportStates(StatesGroup):
    WAITING_FOR_QUESTION = State()
    WAITING_FOR_MODERATOR_ANSWER = State()

class PromocodeStates(StatesGroup):
    WAITING_FOR_USER_PROMOCODE = State()

class AdmCommandState(StatesGroup):
    WAITING_ID_OF_USER_FOR_DELETE = State()
    WAITING_ID_OF_USER_FOR_ADD = State()
    WAITING_ID_OF_USER_HANDLE_FOR_ADD = State()
    WAITING_ID_OF_USER_HANDLE_FOR_DELETE = State()
    WAITING_FOR_SUM_HANDLE_FOR_ADD = State()
    WAITING_FOR_SUM_HANDLE_FOR_DELETE = State()

class AdmButtonState(StatesGroup):
    WAITING_FOR_USER_ID_FOR_USER_INFO = State()
    WAITING_FOR_CALLBACK_BUTTONS = State()

class UserVPNInfo(StatesGroup):
    WAITING_FOR_USER_ID_FOR_USER_VPN_INFO = State()

class BanUserState(StatesGroup):
    WAITING_FOR_USER_ID = State()

class UnbanUserState(StatesGroup):
    WAITING_FOR_USER_ID = State()

class SupportRequest(NamedTuple):
    user_id: int
    user_name: str
    question: str
    answer: str = None

previous_markup = None
previous_states = {}
support_requests = []

"""************************************************* –ë–ê–ó–û–í–´–ï –ö–û–ú–ê–ù–î–´ (/start, /help, /balance) *****************************************************"""

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start_cmd(message: types.Message):
    user_name = message.from_user.username
    user_id = message.from_user.id
    result = await find_user_data(user_id=user_id)
    if result == None: 
        start_command = message.text
        referrer_id = str(start_command[7:])
        if referrer_id != "":
            if referrer_id != str(user_id):
                await edit_profile(user_name, user_id, referrer_id)
                await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –ë–æ–Ω—É—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–∏–ª–∏—Å—å —Ä–µ—Ñ–µ—Ä–µ—Ä—É –Ω–∞ –±–∞–ª–∞–Ω—Å. ")
                try:
                    await bot.send_message(referrer_id, "–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω—ã 15 ‚ÇΩ ")
                    await pay_operation(int(5), referrer_id)
                except:
                    pass
            else:
                await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ! ")
                await edit_profile(user_name, user_id)
    else:
        await edit_profile(user_name, user_id)
        if await is_user_ban_check(user_id=user_id):
            await message.answer("<b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ‚ùå</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
            return
        else:
            start_kb = start_kb_handle(user_id)
            await message.answer("""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>BlazerVPN</b> ‚Äì –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –≤ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Å–≤—è–∑–∏ –≤ —Å–µ—Ç–∏.

–ù–∞—à —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ–º –ª–æ–∫–∞—Ü–∏—è–º üìç:<b>
‚Ä¢ üá∏üá™ –®–≤–µ—Ü–∏—è
‚Ä¢ üá´üáÆ –§–∏–Ω–ª—è–Ω–¥–∏—è
‚Ä¢ üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è
</b>
–û–±–µ—Å–ø–µ—á–∏–≤–∞—è –±—ã—Å—Ç—Ä—É—é –∏ –∑–∞—â–∏—â–µ–Ω–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö. –ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å, <b>BlazerVPN</b> –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–µ–π –æ–Ω–ª–∞–π–Ω –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –û–±–µ—Å–ø–µ—á—å—Ç–µ —Å–µ–±–µ —Å–≤–æ–±–æ–¥—É –∏ –∑–∞—â–∏—Ç—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —Å <b>BlazerVPN!</b>""", reply_markup=start_kb, parse_mode="HTML")

    await save_temp_message(user_id, None, None)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ balance (balance)
async def balance_def(callback: types.CallbackQuery):
    user_name = callback.from_user.username
    user_id = callback.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await callback.message.answer("<b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ‚ùå</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        return
    else:
        balance = await get_balance(user_name)
        await callback.message.edit_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å üíµ: {balance} ‚ÇΩ", reply_markup=replenishment_balance)
        await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ help(help_callback)
async def help_kb_handle(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await callback.message.answer("<b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ‚ùå</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        return
    else:
        await callback.message.edit_text("–î–ª—è —Å–≤—è–∑–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –±–æ—Ç–∞ üßë‚Äçüíª –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: \n\nhttps://t.me/KING_08001", reply_markup=back_keyboard)
        await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())

"""*********************************************** –í–´–ë–û–† –õ–û–ö–ê–¶–ò–ò –ò –ü–û–ö–£–ü–ö–ê –í–ü–ù ************************************************************************"""
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏ (buy)
async def buying_VPN_handle(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await callback.message.answer("<b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ‚ùå</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        return
    else:
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é üìç:\n\n<tg-spoiler><i>–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏</i></tg-spoiler>", reply_markup=location_keyboard, parse_mode="HTML")
        await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ª–æ–∫–∞—Ü–∏–π (Sweden_callback, Finland_callback, Germany_callback)
async def location_choose_def(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id    
    if await is_user_ban_check(user_id=user_id):
        await callback.message.answer("<b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ‚ùå</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        return
    else:
        if callback.data == "Sweden_callback":
            await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é üìç: –®–≤–µ—Ü–∏—è üá∏üá™\nVPN –Ω–∞ –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ —Å–µ–π—á–∞—Å –Ω–µ—Ç—É –≤ –Ω–∞–ª–∏—á–∏–∏ ‚ùå", reply_markup=back_keyboard)
            #await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é: –®–≤–µ—Ü–∏—è üá∏üá™\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ {VPN_PRICE_TOKEN} ‚ÇΩ", reply_markup=pay_sweden_keyboard)
            #await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
            #await callback.answer("")

        elif callback.data == "Finland_callback":
            await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é üìç: –§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ {VPN_PRICE_TOKEN} ‚ÇΩ", reply_markup=pay_finland_keyboard)
            await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
            await callback.answer("")

        elif callback.data == "Germany_callback":
            await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é üìç: –ì–µ—Ä–º–∞–Ω–∏—è üá©üá™\nVPN –Ω–∞ –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ —Å–µ–π—á–∞—Å –Ω–µ—Ç—É –≤ –Ω–∞–ª–∏—á–∏–∏ ‚ùå", reply_markup=back_keyboard)
            #await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é: –ì–µ—Ä–º–∞–Ω–∏—è üá©üá™\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ {VPN_PRICE_TOKEN} ‚ÇΩ", reply_markup=pay_germany_keyboard)
            #await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
            #await callback.answer("")

# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É VPN.
async def buying_VPN_def(callback, country,  state):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ VPN –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã"""
    user_name = callback.from_user.username
    user_id = callback.from_user.id
    balance = await get_balance(user_name)
    if float(balance) < float(VPN_PRICE_TOKEN):
        await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå")
        await callback.message.edit_text("–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å üíµ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.", reply_markup=replenishment_balance)
        await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
    else:
        payment_key = await buy_operation(user_id=user_id, user_name=user_name)
        await callback.message.edit_text("–í—ã –∫—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä ‚úÖ! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏. –ö–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VPN –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        user_id = callback.from_user.id
        async with state.proxy() as data:
            data['payment_key'] = payment_key
        await edit_operations_history(user_id=user_id, user_name=user_name, operations=(-(float(VPN_PRICE_TOKEN))), description_of_operation="–ü–æ–∫—É–ø–∫–∞ VPN")
        await bot.send_message(BLAZER_CHAT_TOKEN, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: {user_id})\n–ó–∞–∫–∞–∑–∞–ª VPN –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏ üìç: {country}\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.", reply_markup=reply_buy_keyboard)
        await bot.send_message(ANUSH_CHAT_TOKEN, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: {user_id})\n–ó–∞–∫–∞–∑–∞–ª VPN –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏ üìç: {country}\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.", reply_markup=reply_buy_keyboard)
        await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())

# —Ö–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é, –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏ VPN. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ (Buying_sweden_VPN, Buying_finland_VPN, Buying_germany_VPN)
async def choosing_location_for_buying_VPN(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await callback.message.answer("<b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ‚ùå</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        return
    else:
        if callback.data == "Buying_sweden_VPN":
            await buying_VPN_def(callback, "–®–≤–µ—Ü–∏—è üá∏üá™", state)
            await state.update_data(country="–®–≤–µ—Ü–∏—è üá∏üá™") 
        elif callback.data == "Buying_finland_VPN":
            await buying_VPN_def(callback, "–§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ", state)
            await state.update_data(country="–§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ")
        elif callback.data == "Buying_germany_VPN":
            await buying_VPN_def(callback, "–ì–µ—Ä–º–∞–Ω–∏—è üá©üá™", state)
            await state.update_data(country="–ì–µ—Ä–º–∞–Ω–∏—è üá©üá™")


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ (instruction_keyboard)
async def instruction_handle(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await callback.message.answer("<b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ‚ùå</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        return
    else:
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é VPN üõ°:", reply_markup=device_keyboard)
        await callback.answer('')

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–≤–∞–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é VPN
async def device_instruction_handle(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await callback.message.answer("<b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ‚ùå</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        return
    else:
        if callback.data == "Android_device_callback":
            await callback.message.answer_photo(photo="https://i.imgur.com/0feN5h0.jpeg", caption="""
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Android:
        1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –∏–∑ Google Play.
        2. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—É–Ω–Ω–µ–ª—è WireGuard –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ø–ª—é—Å¬ª –≤ –Ω–∏–∂–Ω–µ–º —É–≥–ª—É —ç–∫—Ä–∞–Ω–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–∫–æ—Ç–æ—Ä—É—é –º—ã –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ –∫ —ç—Ç–æ–π –Ω–∏–∂–µ) –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é.""")
            await callback.message.answer_photo(photo="https://i.imgur.com/MvB2M5t.png", caption="""
        3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä—è–¥–æ–º —Å –ø–æ—è–≤–∏–≤—à–∏–º—Å—è –∏–º–µ–Ω–µ–º —Ç—É–Ω–Ω–µ–ª—è. –°–∏—Å—Ç–µ–º–∞ Android –ø–æ–ø—Ä–æ—Å–∏—Ç –≤—ã–¥–∞—Ç—å WireGuard —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ VPN. –î–∞–π—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–Ω–∞–∫ –≤ –≤–∏–¥–µ –∫–ª—é—á–∞""", reply_markup=back_keyboard)
            
        elif callback.data == "IOS_device_callback":
            await callback.message.answer_photo(photo="https://i.imgur.com/x6Cawdu.png", caption="1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ AppStore."
    "2. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥. –ö–æ–Ω—Ñ–∏–≥ –∏ QR-–∫–æ–¥ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –ø–∏—Å—å–º–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏—à–ª–æ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞, –∏–ª–∏ –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å VPN."
    "3. –î–∞–ª–µ–µ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é ¬´–û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ ‚ÄúWireGuard‚Äù¬ª.")
            await callback.message.answer_photo(photo="https://i.imgur.com/fj5p8dJ.png", caption="4. –û—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–†–∞–∑—Ä–µ—à–∏—Ç—å¬ª (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞).")
            await callback.message.answer_photo(photo="https://i.imgur.com/scb4Or8.png", caption="1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ¬´WireGuard¬ª."
    "2. –ù–∞–π–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å—Ç–∞—Ç—É—Å –≤ –ø–æ–ª–æ–∂–µ–Ω–∏–µ ¬´–í–∫–ª—é—á–µ–Ω–æ¬ª.", reply_markup=back_keyboard)

        elif callback.data == "komp_device_callback":
            await callback.message.answer_photo(photo="https://i.imgur.com/rzF9gGw.png", caption="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Windows:"
    "1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞."
    "2. –°–∫–∞—á–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª ‚Äî –∏–∑ –ø–∏—Å—å–º–∞, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏—à–ª–æ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞, –∏–ª–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å VPN."
    "3. –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ WireGuard –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ò–º–ø–æ—Ä—Ç —Ç—É–Ω–Ω–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞¬ª (–ª–∏–±–æ ¬´–î–æ–±–∞–≤–∏—Ç—å —Ç—É–Ω–Ω–µ–ª—å¬ª) –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .conf.")  
            await callback.message.answer_photo(photo="https://i.imgur.com/Hk7mmoc.png", caption="4. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å¬ª –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å VPN-—Å–µ—Ä–≤–µ—Ä–æ–º.", reply_markup=back_keyboard)
        
        elif callback.data == "MacOS_callback":
            await callback.message.answer_photo(photo="https://i.imgur.com/2SjrQTL.png", caption="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è MacOS:"
    "1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Wireguard —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ –∏–ª–∏ –∏–∑ AppStore."
    "2. –°–∫–∞—á–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª ‚Äî –∏–∑ –ø–∏—Å—å–º–∞, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏—à–ª–æ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞, –∏–ª–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å VPN."
    "3. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–£–ø—Ä–∞–≤–ª—è—Ç—å —Ç—É–Ω–Ω–µ–ª—è–º–∏ Wireguard¬ª."
    "4. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ò–º–ø–æ—Ä—Ç —Ç—É–Ω–Ω–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞¬ª.")
            await callback.message.answer_photo(photo="https://i.imgur.com/ZGpSp5V.png", caption="5. –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª .conf. –î–∞–ª–µ–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
            await callback.message.answer_photo(photo="https://i.imgur.com/tRCkXZf.png", caption="–ì–æ—Ç–æ–≤–æ. –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å¬ª.", reply_markup=back_keyboard)
        await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())

# —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è VPN(extension_vpn, extend_callback)
async def extend_vpn_handle(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await callback.message.answer("<b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ‚ùå</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        return
    else:
        if callback.data == "extension_vpn":
            user_id = callback.from_user.id
            vpn_data = await get_vpn_data(user_id)
            if vpn_data:
                numbers = 0
                vpn_info_text = ""
                for vpn in vpn_data:
                    numbers += 1
                    location = vpn[3]
                    active = vpn[4]
                    expiration_date = datetime.datetime.strptime(str(vpn[5]), "%d.%m.%Y %H:%M:%S")
                    days_remaining = (expiration_date - datetime.datetime.now()).days
                    vpn_info_text += f"{numbers}. –õ–æ–∫–∞—Ü–∏—è üìç:   {location}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è üïò:   {expiration_date.strftime('%d.%m.%Y %H:%M:%S')}\n–û—Å—Ç–∞–ª–æ—Å—å ‚è≥:   {days_remaining} –¥–Ω–µ–π\n\n"
                kb_for_count = addind_count_for_extend(count=numbers)
                if numbers == 1:
                    await callback.message.edit_text("<b>‚Ä¢ –£ –≤–∞—Å –æ–¥–∏–Ω VPN üõ°:</b>\n\n" + vpn_info_text + f"<b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN –Ω–∞ 30 –¥–Ω–µ–π —Å—Ç–æ–∏—Ç {VPN_PRICE_TOKEN} ‚ÇΩ üíµ\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–ª–∏—Ç—å VPN üõ°</b>", reply_markup=extend_keyboard, parse_mode="HTML")
                else:
                    await callback.message.edit_text(f"<b>‚Ä¢ –í–∞—à–∏ VPN üõ°:</b>\n\n{vpn_info_text}<b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN –Ω–∞ 30 –¥–Ω–µ–π —Å—Ç–æ–∏—Ç {VPN_PRICE_TOKEN} ‚ÇΩ üíµ. –í—ã–±–µ—Ä–∏—Ç–µ VPN üõ°, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å:</b>", reply_markup=kb_for_count, parse_mode="HTML") 
                await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
            else: 
                await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç—É –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ VPN ‚ùå! –í–∞–º –µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ", reply_markup=buy_keyboard)
                await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())

        elif callback.data == "extend_callback":
            user_name = callback.from_user.username
            balance = await get_balance(user_name)
            user_id = callback.from_user.id
            if float(balance) >= float(VPN_PRICE_TOKEN):
                await pay_operation(VPN_PRICE_TOKEN, user_id)
                await edit_operations_history(user_id=user_id, user_name=user_name, operations=(-(float(VPN_PRICE_TOKEN))), description_of_operation="–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN")
                vpn_data = await get_vpn_data(user_id)
                days_remaining = ""
                for vpn in vpn_data:
                    id = vpn[0]
                    location = vpn[3]
                    active = vpn[4]
                    expiration_date = datetime.datetime.strptime(vpn[5], "%d.%m.%Y %H:%M:%S")
                    name_of_vpn = vpn[6]
                    vpn_config = vpn[7]
                    days_remaining = (expiration_date - datetime.datetime.now()).days
                new_expiration_date = expiration_date + datetime.timedelta(days=30)
                await extend_vpn_state(user_id=user_id, location=location, active=True, expiration_date=new_expiration_date, id=id)    
                await callback.message.edit_text(f"VPN üõ° –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ 30 –¥–Ω–µ–π ‚úÖ \n\n–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è VPN üõ° –æ—Å—Ç–∞–ª–æ—Å—å {days_remaining + 30} –¥–Ω–µ–π ‚è≥", reply_markup=back_keyboard)
                vpn_info_text = f"–õ–æ–∫–∞—Ü–∏—è üìç:   {location}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è üïò:   {expiration_date.strftime('%d.%m.%Y %H:%M:%S')}\n–û—Å—Ç–∞–ª–æ—Å—å ‚è≥:   {days_remaining} –¥–Ω–µ–π\n\n"
                await bot.send_document(ANUSH_CHAT_TOKEN, vpn_config, caption=f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: {user_id})\n–ü—Ä–æ–¥–ª–∏–ª VPN üõ° –Ω–∞ 30 –¥–Ω–µ–π:</b>\n\n{vpn_info_text}", parse_mode="HTML")
                await bot.send_document(BLAZER_CHAT_TOKEN, vpn_config, caption=f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: {user_id})\n–ü—Ä–æ–¥–ª–∏–ª VPN üõ° –Ω–∞ 30 –¥–Ω–µ–π:</b>\n\n{vpn_info_text}")
                await save_temp_message(callback.from_user.id, callback.message.text, None)
            else:
                await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå")
                await callback.message.edit_text("–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å üíµ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.", reply_markup=replenishment_balance)
                await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
        
        elif "extend_vpn" in callback.data:
            user_id = callback.from_user.id
            user_name = callback.from_user.username
            vpn_number = callback.data.split('_')[2]
            vpn_data = await get_vpn_data(user_id)
            vpn = vpn_data[int(vpn_number) - int(1)]
            balance = await get_balance(user_name)
            if float(balance) >= float(VPN_PRICE_TOKEN):
                await pay_operation(VPN_PRICE_TOKEN, user_id)
                await edit_operations_history(user_id=user_id, user_name=user_name, operations=int(-(float(VPN_PRICE_TOKEN))), description_of_operation="–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN")
                id = vpn[0]
                location = vpn[3]
                expiration_date = datetime.datetime.strptime(vpn[5], "%d.%m.%Y %H:%M:%S")
                name_of_vpn = vpn[6]
                vpn_config = vpn[7]
                days_remaining = (expiration_date - datetime.datetime.now()).days
                new_expiration_date = expiration_date + datetime.timedelta(days=30)
                vpn_info_text = f"–õ–æ–∫–∞—Ü–∏—è üìç:   {location}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è üïò:   {expiration_date.strftime('%d.%m.%Y %H:%M:%S')}\n–û—Å—Ç–∞–ª–æ—Å—å ‚è≥:   {days_remaining} –¥–Ω–µ–π\n\n"
                await extend_vpn_state(user_id=user_id, location=location, active=True, expiration_date=new_expiration_date, id=id)
                await callback.message.edit_text(f"VPN üõ° –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ 1 –º–µ—Å—è—Ü ‚úÖ \n\n–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è VPN üõ° –æ—Å—Ç–∞–ª–æ—Å—å {days_remaining + 30} –¥–Ω–µ–π ‚è≥", reply_markup=back_keyboard)
                await bot.send_document(ANUSH_CHAT_TOKEN, vpn_config, caption=f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: {user_id})\n–ü—Ä–æ–¥–ª–∏–ª VPN üõ° –Ω–∞ 30 –¥–Ω–µ–π:</b>\n\n{vpn_info_text}", parse_mode="HTML")
                await bot.send_document(BLAZER_CHAT_TOKEN, vpn_config, caption=f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: {user_id})\n–ü—Ä–æ–¥–ª–∏–ª VPN üõ° –Ω–∞ 30 –¥–Ω–µ–π:</b>\n\n{vpn_info_text}")
                await save_temp_message(callback.from_user.id, callback.message.text, None)
            else:
                await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå")
                await callback.message.edit_text("–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å üíµ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.", reply_markup=replenishment_balance)
                await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã(replenishment)
async def replenishment_handle(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await callback.message.answer("<b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ‚ùå</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        return
    else:
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è üíµ, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ: ", reply_markup=numbers_for_replenishment)
        await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
        await PaymentStates.WAITING_FOR_AMOUNT.set()
        await callback.answer("")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def choosing_int_for_replenishment(callback: types.CallbackQuery, state):
    user_id = callback.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await callback.message.answer("<b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ‚ùå</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        return
    else:
        global amount
        if callback.data == "200_for_replenishment_callback":
            amount = 200
            await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–≤–æ–µ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã üì©:", reply_markup=back_keyboard)
        elif callback.data == "500_for_replenishment_callback":
            amount = 500
            await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–≤–æ–µ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã üì©:", reply_markup=back_keyboard)
        elif callback.data == "1000_for_replenishment_callback":
            amount = 1000
            await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–≤–æ–µ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã üì©: ", reply_markup=back_keyboard)
        await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
        await PaymentStates.WAITING_FOR_USER_EMAIL_HANDLE.set()           

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
async def handle_amount(message: types.Message, state):
    user_id = message.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await message.answer("<b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ‚ùå</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        await state.finish()
        return
    else:
        try:
            global amount
            amount = int(message.text)
            if amount > 0:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–≤–æ–µ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã üì©: ", reply_markup=back_keyboard)
                await PaymentStates.WAITING_FOR_USER_EMAIL_HANDLE.set()
            else:
                attempts = await state.get_data()
                if attempts.get("attempts", 0) >= 3:
                    await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /replenishment", back_keyboard)
                    await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
                    await state.finish()
                else:
                    await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                    await message.answer("–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 ‚ùå")
        except ValueError:
            attempts = await state.get_data()
            if attempts.get("attempts", 0) >= 3:
                await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /replenishment ")
                await state.finish()
            else:
                await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ).")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def user_email_handle(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await message.answer("<b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ‚ùå</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        await state.finish()
        return
    else:
        global user_email
        user_email = message.text
        if not re.match(r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", user_email):
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã üì©. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞ ‚ùå", reply_markup=back_keyboard)
            return
        
        if len(user_email) > 254:
            await message.answer("–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞.", reply_markup=back_keyboard)
            return

        try:
            dns.resolver.resolve(user_email.split('@')[1], 'MX')
        except dns.resolver.NXDOMAIN:
            await message.answer("–î–æ–º–µ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞.", reply_markup=back_keyboard)
            return

        await message.answer("–í–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –ø—Ä–∏–Ω—è—Ç ‚úÖ \n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É:", reply_markup=payment_type)
        await PaymentStates.WAINING_FOR_PAYMENT_TYPE.set()

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def payment_type_handle(callback: types.CallbackQuery, state):
    user_id = callback.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await callback.message.answer("<b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ‚ùå</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        return
    else:
        if callback.data == "bank_card_payment_callback":
            try:
                payment_url, payment_id = create_payment(float(amount), callback.from_user.id, "bank_card", user_email)
            except Exception as e:
                await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ùå", reply_markup=back_keyboard)
                return
        elif callback.data == "yoomoney_payment_callback":
            try:
                payment_url, payment_id = create_payment(float(amount), callback.from_user.id, "yoo_money", user_email)
            except Exception as e:
                await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ùå", reply_markup=back_keyboard)
                return
        elif callback.data == "TinkoffPay_callback":
            try:
                payment_url, payment_id = create_payment(float(amount), callback.from_user.id, "tinkoff_bank", user_email)
            except Exception as e:
                await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ùå", reply_markup=back_keyboard)
                return
        elif callback.data == "SberPay_callback":
            try:
                payment_url, payment_id = create_payment(float(amount), callback.from_user.id, "sberbank", user_email)
            except Exception as e:
                await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ùå", reply_markup=back_keyboard)
                return
        elif callback.data == "SBP_callback":
            try:
                payment_url, payment_id = create_payment(float(amount), callback.from_user.id, "sbp", user_email)
            except Exception as e:
                await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ‚ùå", reply_markup=back_keyboard)
                return
        await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
            
        payment_button = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url),
                        InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"checking_payment_{payment_id}")
                    ]
                ]
            )
        await callback.message.edit_text("–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. ‚úÖ", reply_markup=payment_button) 
        await state.finish() 

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏, –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è(checking_payment_)
async def succesfull_payment(callback: types.CallbackQuery):
    payment_id = check(callback.data.split('_')[-1])
    user_name = callback.from_user.username
    user_id = callback.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await callback.message.answer("<b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ‚ùå</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        return
    else:
        if payment_id:
            await callback.message.edit_text('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ \n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å /balance')
            await pay_operation(amount, user_id)
            await edit_operations_history(user_id=user_id, user_name=user_name, operations=(+(int(amount))), description_of_operation="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")
            await callback.answer("")
        else:
            await callback.answer('–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞.')

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (support_callback)
async def support_handle(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    info_question = await getting_question(user_id=user_id)
    if info_question != []:
        await callback.message.edit_text("–í—ã —É–∂–µ –∑–∞–¥–∞–≤–∞–ª–∏ –≤–æ–ø—Ä–æ—Å ‚ùå\n\n–î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –æ—Ç–≤–µ—Ç—è—Ç –Ω–∞ –≤–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å.", reply_markup=back_keyboard)
        await callback.answer('')
        await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
        return
    else:
        await callback.message.edit_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ß–µ–º –º–æ–∂–µ–º –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã?", reply_markup=back_keyboard)
        await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
        await SupportStates.WAITING_FOR_QUESTION.set()
        await callback.answer("")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
async def process_question(message: types.Message,  state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user.username
    question = message.text
    await edit_data(user_name=user_name, user_id=user_id, question=question)
    await message.answer("–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ.", reply_markup=start_kb_handle(user_id))
    await bot.send_message(BLAZER_CHAT_TOKEN, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: {user_id})\n–ó–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å:\n\n{question}", reply_markup=reply_keyboard(user_id))
    await bot.send_message(ANUSH_CHAT_TOKEN, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: {user_id})\n–ó–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å:\n\n{question}", reply_markup=reply_keyboard(user_id))
    if message.reply_markup:
        await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
    else:
        await save_temp_message(message.from_user.id, message.text, None)
    await state.finish()
    
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã 
async def ref_system(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await callback.message.answer("<b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ‚ùå</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        return
    else:
        referrals = await get_referrer_username(user_id)
        if referrals != None:
            referrals = referrals.split("\n")
        else:
            referrals = referrals
        text = f"<b>‚Ä¢ –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b> <pre>https://t.me/blazervpnbot?start={user_id}</pre>\n\n<i>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å–æ —Å–≤–æ–∏–º–∏ –∑–Ω–∞–∫–æ–º—ã–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å 5 ‚ÇΩ —Å–µ–±–µ –Ω–∞ –±–∞–ª–∞–Ω—Å.</i>\n\n"
        if referrals:
            text += "–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n"
            for username in referrals:
                text += f"@{username} \n" 
        else:
            text += "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤."
        await callback.message.edit_text(text, reply_markup=back_keyboard, parse_mode="HTML")
        if callback.message.reply_markup:
            await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
        else:
            await save_temp_message(callback.from_user.id, callback.message.text, None)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def promo_handle(callback: types.CallbackQuery, state):
    user_id = callback.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await callback.message.answer("<b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ‚ùå</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        return
    else:
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–æ–∫–æ–¥ üéü:", reply_markup=back_keyboard)
        if callback.message.reply_markup:
            await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
        else:
            await save_temp_message(callback.from_user.id, callback.message.text, None)
        await PromocodeStates.WAITING_FOR_USER_PROMOCODE.set()

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_user_promo(message: types.Message, state):
    user_promo = message.text
    user_id = message.from_user.id
    user_name = message.from_user.username
    if await is_user_ban_check(user_id=user_id):
        await message.answer("<b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ‚ùå</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        await state.finish()
        return
    else:
        check_used_promo = await check_promocode_used(user_id, PROMOCODE_TOKEN)
        if str(user_promo) == str(PROMOCODE_TOKEN) and check_used_promo == False:
            await message.answer("–í—ã –≤–≤–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ ‚úÖ \n–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ: 20 —Ä—É–±–ª–µ–π üíµ!", reply_markup=back_keyboard)
            await pay_operation(20, user_id)
            await edit_operations_history(user_id=user_id, user_name=user_name, operations=(+(int(20))), description_of_operation="–ü—Ä–æ–º–æ–∫–æ–¥")
            await save_promocode(user_id, user_promo)
            if message.reply_markup:
                await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
            else:
                await save_temp_message(message.from_user.id, message.text, None)
        elif str(user_promo) == str(PROMOCODE_TOKEN) and check_used_promo == True:
            await message.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ ‚ùå\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ –≤ –≤–∫", reply_markup=promocode_keyboard)    
        else:
            await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ üéü, –ª–∏–±–æ –æ–Ω –Ω–µ–∞–∫—Ç—É–∞–ª–µ–Ω ‚ùå\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ –≤ –≤–∫", reply_markup=promocode_keyboard)
            if message.reply_markup:
                await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
            else:
                await save_temp_message(message.from_user.id, message.text, None)
        await state.finish()

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—á–Ω—ã—Ö VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def myvpn_handle(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await callback.message.answer("<b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ‚ùå</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        return
    else:
        vpn_data = await get_vpn_data(user_id)
        if vpn_data:
            vpn_info_text = "<b>‚Ä¢ –í–∞—à–∏ VPN üõ°</b>:\n\n"
            for vpn in vpn_data:
                location = vpn[3]
                active = vpn[4]
                expiration_date = datetime.datetime.strptime(vpn[5], "%d.%m.%Y %H:%M:%S")
                days_remaining = (expiration_date - datetime.datetime.now()).days
                vpn_info_text += f"–õ–æ–∫–∞—Ü–∏—è üìç:   {location}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è üïò:   {expiration_date.strftime('%d.%m.%Y %H:%M:%S')}\n–û—Å—Ç–∞–ª–æ—Å—å ‚è≥:   {days_remaining} –¥–Ω–µ–π\n\n"
            await callback.message.edit_text(vpn_info_text, reply_markup=buy_keyboard, parse_mode="HTML")
            if callback.message.reply_markup:
                await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
            else:
                await save_temp_message(callback.from_user.id, callback.message.text, None)
        else:
            await callback.message.edit_text(f"–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ VPN ‚ùå", reply_markup=buy_keyboard)
            if callback.message.reply_markup:
                await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
            else:
                await save_temp_message(callback.from_user.id, callback.message.text, None)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def history_of_opeartions_handle(callback: types.CallbackQuery):
    user_name = callback.from_user.username
    user_id = callback.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await callback.message.answer("<b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ‚ùå</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        return
    else:
        operation_history = await getting_operation_history(user_id=user_id)
        if operation_history is None:
            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π ‚ùå", reply_markup=replenishment_balance)
            return
        message_text = "<b>‚Ä¢ üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:</b>\n\n"
        for operation in operation_history:
            id, user_db_id, user_db_name, operations, time_of_operation, description_of_operation = operation

            operations = operations.split(",")
            time_of_operation = time_of_operation.split(",")
            description_of_operation = description_of_operation.split(",")

            for i in range(len(operations)):
                operation_value = operations[i]
                if "-" not in operation_value:
                    operation_value = "+" + operation_value

                message_text += f"<i>{time_of_operation[i]}</i> - <b>{description_of_operation[i]}</b>:  <code>{operation_value}</code> ‚ÇΩ\n"

        await callback.message.edit_text(message_text, reply_markup=back_keyboard, parse_mode="HTML")
        await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())


# –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
def deserialize_keyboard(keyboard_json: str) -> InlineKeyboardMarkup:
    keyboard_data = json.loads(keyboard_json)
    keyboard = InlineKeyboardMarkup()

    for row in keyboard_data['inline_keyboard']:
        keyboard.row(*[
            InlineKeyboardButton(text=button['text'], callback_data=button['callback_data'])
            for button in row
        ])

    return keyboard

# —Å–∏—Å—Ç–µ–º–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
async def back_handle(callback: types.CallbackQuery, state):
    user_id = callback.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await callback.message.answer("<b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ‚ùå</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        return
    else:
        await state.finish()
        user_id = callback.from_user.id
        message_id = await find_message_id(user_id)
        message_text, message_markup = await get_temp_message(user_id, message_id)
        start_kb = start_kb_handle(user_id) 
        try:
            if message_text and message_markup:
                message_markup = deserialize_keyboard(message_markup)
                await callback.message.edit_text(message_text, reply_markup=message_markup)
                await delete_temp_message(user_id, message_id)
            else:
                await callback.message.edit_text("–í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é.", reply_markup=start_kb)
        except Exception as e:
            await callback.message.answer("–í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é.", reply_markup=start_kb)
    await callback.answer("")


def register_user_handlers(dp: Dispatcher) -> None:
    dp.register_message_handler(start_cmd, commands=['start'], state="*")
    dp.register_callback_query_handler(balance_def, lambda c: c.data == "balance", state="*")
    dp.register_callback_query_handler(help_kb_handle, lambda c: c.data == "help_callback", state="*")
    dp.register_callback_query_handler(buying_VPN_handle, lambda c: c.data == "buy", state="*")
    dp.register_callback_query_handler(location_choose_def, lambda c: c.data == "Sweden_callback" or c.data == "Finland_callback" or c.data == "Germany_callback")
    dp.register_callback_query_handler(choosing_location_for_buying_VPN, lambda c: c.data == "Buying_sweden_VPN" or c.data == "Buying_finland_VPN" or c.data == "Buying_germany_VPN")
    dp.register_callback_query_handler(instruction_handle, lambda c: c.data == "instruction_keyboard")
    dp.register_callback_query_handler(device_instruction_handle, lambda c: c.data == "Android_device_callback" or c.data == "IOS_device_callback" or c.data == "komp_device_callback" or c.data == "MacOS_callback")
    dp.register_callback_query_handler(extend_vpn_handle, lambda c: c.data == "extension_vpn" or c.data == "extend_callback" or "extend_vpn" in c.data, state="*")
    dp.register_callback_query_handler(replenishment_handle, lambda c: c.data == "replenishment", state="*")
    dp.register_callback_query_handler(choosing_int_for_replenishment, lambda c: c.data == "200_for_replenishment_callback" or c.data == "500_for_replenishment_callback" or c.data == "1000_for_replenishment_callback", state="*")
    dp.register_message_handler(handle_amount, state=PaymentStates.WAITING_FOR_AMOUNT)
    dp.register_message_handler(user_email_handle, state=PaymentStates.WAITING_FOR_USER_EMAIL_HANDLE)
    dp.register_callback_query_handler(payment_type_handle, lambda c: c.data == "bank_card_payment_callback" or c.data == "yoomoney_payment_callback" or c.data == "TinkoffPay_callback" or c.data == "SberPay_callback" or c.data == "SBP_callback", state=PaymentStates.WAINING_FOR_PAYMENT_TYPE)
    dp.register_callback_query_handler(succesfull_payment, lambda c: "checking_payment" in c.data)
    dp.register_callback_query_handler(support_handle, lambda c: c.data == "support_callback", state="*")
    dp.register_message_handler(process_question, state=SupportStates.WAITING_FOR_QUESTION)
    dp.register_callback_query_handler(ref_system, lambda c: c.data == "ref_system_callback", state="*")
    dp.register_callback_query_handler(promo_handle, lambda c: c.data == "promo_callback", state="*")
    dp.register_message_handler(handle_user_promo, state=PromocodeStates.WAITING_FOR_USER_PROMOCODE)
    dp.register_callback_query_handler(myvpn_handle, lambda c: c.data == "myvpn_callback", state="*")
    dp.register_callback_query_handler(history_of_opeartions_handle, lambda c: c.data == "history_of_operations_callback")
    dp.register_callback_query_handler(back_handle, lambda c: c.data == "back", state="*")
