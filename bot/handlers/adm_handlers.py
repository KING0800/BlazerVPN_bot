import os
import datetime
import asyncio

from dotenv import load_dotenv
from typing import NamedTuple
from datetime import timedelta

from aiogram import types, Dispatcher, Bot
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import ChatNotFound

from bot.database.OperationsData import edit_operations_history
from bot.database.TempData import save_temp_message, get_temp_message, delete_temp_message, find_message_id
from bot.database.UserData import get_balance, add_operation, pay_operation, get_referrer_username, find_user_data, ban_users_handle, unban_users_handle, is_user_ban_check, delete_sum_operation
from bot.database.VpnData import update_vpn_state, get_order_id, get_vpn_data, check_vpn_expiration_for_days, check_expired_vpns
from bot.database.SupportData import getting_question, deleting_answered_reports

from bot.keyboards.user_keyboards import support_keyboard, back_keyboard
from bot.keyboards.adm_keyboards import adm_panel_keyboard, buy_info_keyboard, user_find_data, about_yourself_to_add_keyboard, about_yourself_to_delete_keyboard, finish_buy_vpn, extension_keyboard

load_dotenv('.env')

BLAZER_CHAT_TOKEN = os.getenv('BLAZER_CHAT_TOKEN')
ANUSH_CHAT_TOKEN = os.getenv('ANUSH_CHAT_TOKEN')
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(BOT_TOKEN)

"""********************************************* –°–û–°–¢–û–Ø–ù–ò–Ø ******************************************************"""

class BuyVPNStates(StatesGroup):
    WAITING_FOR_MESSAGE_TEXT = State()

class SupportStates(StatesGroup):
    WAITING_FOR_QUESTION = State()
    WAITING_FOR_MODERATOR_ANSWER = State()

class AdmCommandState(StatesGroup):
    WAITING_ID_OF_USER_FOR_DELETE = State()
    WAITING_ID_OF_USER_FOR_ADD = State()
    WAITING_ID_OF_USER_HANDLE_FOR_ADD = State()
    WAITING_ID_OF_USER_HANDLE_FOR_DELETE = State()
    WAITING_FOR_SUM_HANDLE_FOR_ADD = State()
    WAITING_FOR_SUM_HANDLE_FOR_DELETE = State()

class AdmButtonState(StatesGroup):
    WAITING_FOR_USER_ID_FOR_USER_INFO = State()
    WAITING_FOR_CALLBACK_BUTTONS = State()

class UserVPNInfo(StatesGroup):
    WAITING_FOR_USER_ID_FOR_USER_VPN_INFO = State()

class BanUserState(StatesGroup):
    WAITING_FOR_USER_ID = State()

class UnbanUserState(StatesGroup):
    WAITING_FOR_USER_ID = State()

class SupportRequest(NamedTuple):
    user_id: int
    user_name: str
    question: str
    answer: str = None

support_requests = []


"""***************************************************************** """

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è   
async def send_message(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    order_id = int(callback.data.split(".")[1])
    location = callback.data.split(".")[2]
    user_id = int(callback.data.split(".")[3])

    await state.update_data(order_id=order_id)

    if await is_user_ban_check(user_id=user_id):
        await callback.message.answer("‚Ä¢ ‚ùå <b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã:</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        return
    else:
        await callback.message.edit_text("‚Ä¢ üõí <b>–ü–æ–∫—É–ø–∫–∞ VPN</b>:\n\n–°–∫–∏–Ω—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ", parse_mode="HTML", reply_markup=back_keyboard)
        await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
        await BuyVPNStates.WAITING_FOR_MESSAGE_TEXT.set()

async def handling_moder_file(message: types.Message, state: FSMContext):
    if message.document:
        moder_file = message.document.file_id
        moder_file_name = message.document.file_name

        order_id_data = await state.get_data()
        order_id = order_id_data.get('order_id')
        if not int(order_id):
            await message.answer("‚Ä¢ üõí <b>–ü–æ–∫—É–ø–∫–∞ VPN</b>:\n\nID –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå", parse_mode="HTML")
            await state.finish()
        
        order_data = await get_order_id(int(order_id))
        if not order_data:
            await message.answer("‚Ä¢ ‚ùå <b>–û—à–∏–±–∫–∞</b>:\n\n–ó–∞–∫–∞–∑–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", parse_mode="HTML")
            await state.finish()
            
        try:
            expiration_date = datetime.datetime.now() + timedelta(days=28)
            await update_vpn_state(order_id=int(order_id), active=True, expiration_days=expiration_date.strftime("%d.%m.%Y %H:%M:%S"), name_of_vpn=moder_file_name, vpn_config=moder_file)
        except Exception as e:
            await message.answer("‚Ä¢ üõí <b>–ü–æ–∫—É–ø–∫–∞ VPN</b>:\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ‚ùå", parse_mode="HTML")
            await state.finish()

        await message.answer(f"‚Ä¢ üõí <b>–ü–æ–∫—É–ø–∫–∞ VPN</b>:\n\nVPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{order_data[2]} (ID: <code>{order_data[1]}</code>) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ‚úÖ", parse_mode="HTML")
        await bot.send_document(order_data[1], moder_file, caption=f"‚Ä¢ üõí <b>–ü–æ–∫—É–ø–∫–∞ VPN</b>:\n\nVPN —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚úÖ\n\n–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ VPN –ø–æ –Ω–∞—à–µ–π <code>–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</code>, —Å –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.\n\n<i>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</i> <code>{expiration_date.strftime('%d.%m.%Y %H:%M:%S')}</code>\n\n–ü—Ä–æ–¥–ª–∏—Ç—å VPN –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞.", parse_mode="HTML", reply_markup=finish_buy_vpn)
        await state.finish()
    else:
        attempts = await state.get_data()
        if attempts.get("attempts", 0) >= 3:
            await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ")
            await state.finish()
        else:
            await state.update_data(attempts=attempts.get("attempts", 0) + 1)
            await message.answer("‚Ä¢ üõí <b>–ü–æ–∫—É–ø–∫–∞ VPN</b>:\n\n–í—ã —Å–∫–∏–Ω—É–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥–∞!\n\n<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ:</i>", parse_mode="HTML")


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–∫–ø–∏ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def process_answer(callback: types.CallbackQuery, state: FSMContext):
    global questions_user_id
    questions_user_id = callback.data.split('_')[2]
    await callback.message.answer("‚Ä¢ üÜò <b>–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>:\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç:", reply_markup=back_keyboard, parse_mode="HTML")
    await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
    await callback.answer("")
    await SupportStates.WAITING_FOR_MODERATOR_ANSWER.set()

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def replying_for_moder(message: types.Message, state):
    user_info = await getting_question(questions_user_id)
    if user_info != None:
        for info in user_info:
            id = info[0]
            user_id = info[1]
            user_name = info[2]
            question = info[3]

        answer = message.text
        try:
            await bot.send_message(questions_user_id, f"‚Ä¢ üÜò <b>–û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{answer}", reply_markup=back_keyboard, parse_mode="HTML")
            await bot.send_message(ANUSH_CHAT_TOKEN, f"‚Ä¢ üÜò <b>–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>:\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_name} (ID: <code>{user_id})</code>:\n\n{question}\n\n<b>–û—Ç–≤–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{answer}", parse_mode='HTML')
            await bot.send_message(BLAZER_CHAT_TOKEN, f"‚Ä¢ üÜò <b>–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>:\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_name} (ID: <code>{user_id})</code>:\n\n{question}\n\n<b>–û—Ç–≤–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{answer}", parse_mode="HTML")
            await deleting_answered_reports(user_id=user_id)
        except ChatNotFound:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    else: 
        await message.answer("–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå")
    if message.reply_markup:
        await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
    else:  
        await save_temp_message(message.from_user.id, message.text, None)
    await state.finish()

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
async def adm_panel_handle(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await callback.message.answer("‚Ä¢ ‚ùå <b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã:</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        return
    else:
        await callback.message.edit_text("‚Ä¢ ü§ñ <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: ", reply_markup=adm_panel_keyboard, parse_mode="HTML")
        if callback.message.reply_markup:
            await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
        else:
            await save_temp_message(callback.from_user.id, callback.message.text, None)
        await callback.answer('')

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
async def adm_panel_buttons_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await callback.message.answer("‚Ä¢ ‚ùå <b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã:</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        return
    else:
        # —É–¥–∞–ª–µ–Ω–∏–µ –∏ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        if callback.data == "addind_balance_callback":
            await callback.message.edit_text("‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b>\n\n–í–≤–µ–¥–∏—Ç–µ <b>ID</b> –∏–ª–∏ <b>USERNAME</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=about_yourself_to_add_keyboard, parse_mode="HTML")
            if callback.message.reply_markup:
                await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
            else:
                await save_temp_message(callback.from_user.id, callback.message.text, None)
            await AdmCommandState.WAITING_ID_OF_USER_FOR_ADD.set()
        elif callback.data == "deleting_balance_callback":
            await callback.message.edit_text("‚Ä¢ üíµ <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b>\n\n–í–≤–µ–¥–∏—Ç–µ <b>ID</b> –∏–ª–∏ <b>USERNAME</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=about_yourself_to_delete_keyboard, parse_mode="HTML")
            if callback.message.reply_markup:
                await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
            else:
                await save_temp_message(callback.from_user.id, callback.message.text, None)
            await AdmCommandState.WAITING_ID_OF_USER_HANDLE_FOR_DELETE.set()

        elif callback.data == "user_data_callback":
            await callback.message.edit_text("‚Ä¢ üóÉ <b>–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ USERNAME –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å: ", reply_markup=back_keyboard, parse_mode="HTML")
            await callback.answer('')
            if callback.message.reply_markup:
                await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
            else:
                await save_temp_message(callback.from_user.id, callback.message.text, None)
            await AdmButtonState.WAITING_FOR_USER_ID_FOR_USER_INFO.set()

        elif callback.data == "vpn_user_callback":
            await callback.message.edit_text("‚Ä¢ üõ°Ô∏è <b>VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ USERNAME –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ VPN –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å: ", reply_markup=back_keyboard, parse_mode="HTML")
            await callback.answer('')
            if callback.message.reply_markup:
                await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
            else:
                await save_temp_message(callback.from_user.id, callback.message.text, None)
            await UserVPNInfo.WAITING_FOR_USER_ID_FOR_USER_VPN_INFO.set()
        elif callback.data == "ban_user_callback":
            await callback.message.edit_text("‚Ä¢ ‚ùå <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ USERNAME –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:", parse_mode="HTML", reply_markup=back_keyboard)
            await callback.answer('')
            if callback.message.reply_markup:
                await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
            else:
                await save_temp_message(callback.from_user.id, callback.message.text, None)
            await BanUserState.WAITING_FOR_USER_ID.set()
        elif callback.data == "unban_user_callback":
            await callback.message.edit_text("‚Ä¢ ‚úÖ <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ USERNAME –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:", parse_mode="HTML", reply_markup=back_keyboard)
            await callback.answer('')
            if callback.message.reply_markup:
                await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
            else:
                await save_temp_message(callback.from_user.id, callback.message.text, None)
            await UnbanUserState.WAITING_FOR_USER_ID.set()

# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É about_yourself_keyboard, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É
async def deleting_balance_for_moder(callback: types.CallbackQuery, state):
    global user_id_for_delete
    global user_name_for_delete
    user_id_for_delete = callback.from_user.id
    user_name_for_delete = callback.from_user.username
    await callback.message.edit_text("‚Ä¢ üíµ <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", reply_markup=back_keyboard, parse_mode="HTML")
    if callback.message.reply_markup:
        await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
    else:
        await save_temp_message(callback.from_user.id, callback.message.text, None)
    await AdmCommandState.WAITING_FOR_SUM_HANDLE_FOR_DELETE.set()

# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É about_yourself_keyboard, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É
async def adding_balance_for_moder(callback: types.CallbackQuery, state):
    global user_id_for_add
    global user_name_for_add
    user_id_for_add = callback.from_user.id
    user_name_for_add = callback.from_user.username
    await callback.message.edit_text("‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", reply_markup=back_keyboard, parse_mode="HTML")
    if callback.message.reply_markup:
        await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
    else:
        await save_temp_message(callback.from_user.id, callback.message.text, None)
    await AdmCommandState.WAITING_FOR_SUM_HANDLE_FOR_ADD.set()


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async def unban_user2_handle(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await callback.message.answer("‚Ä¢ ‚ùå <b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã:</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        await state.finish()
        return
    else:
        data = await state.get_data()
        try:
            user_id = int(data.get("user_id"))
            user_name = None
            is_registrated_user = await find_user_data(user_id=user_id)
            if is_registrated_user:
                result = await unban_users_handle(user_id=user_id)
                if result != "unbanned":
                    await callback.message.answer("‚Ä¢ ‚úÖ <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚úÖ", parse_mode="HTML", reply_markup=back_keyboard)
                    await callback.answer('')
                else:
                    await callback.message.answer("‚Ä¢ ‚úÖ <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)
                    await callback.answer('')
                await AdmButtonState.WAITING_FOR_CALLBACK_BUTTONS.set()
            else:
                attempts = await state.get_data()
                if attempts.get("attempts", 0) >= 3:
                    await callback.message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /unban ")
                    await state.finish()
                else:
                    await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                    await callback.message.answer("<b>‚Ä¢ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚úÖ:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>ID</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∏–ª–∏ USERNAME –∑–∞–Ω–æ–≤–æ:", parse_mode="HTML", reply_markup=back_keyboard)
        except Exception as e:
            user_name = data.get("user_name")
            user_id = None
            is_registrated_user = await find_user_data(user_name=user_name)
            if is_registrated_user:
                result = await unban_users_handle(user_name=user_name)
                if result != "unbanned":
                    await callback.message.answer("‚Ä¢ ‚úÖ <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚úÖ", parse_mode="HTML", reply_markup=back_keyboard)
                    await callback.answer('')
                else:
                    await callback.message.answer("‚Ä¢ ‚úÖ <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)
                    await callback.answer('')
                await AdmButtonState.WAITING_FOR_CALLBACK_BUTTONS.set()
            else:
                attempts = await state.get_data()
                if attempts.get("attempts", 0) >= 3:
                    await callback.message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /unban ")
                    await state.finish()
                else:
                    await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                    await callback.message.answer("‚Ä¢ ‚úÖ <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>USERNAME</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∏–ª–∏ USERNAME –∑–∞–Ω–æ–≤–æ:", parse_mode="HTML", reply_markup=back_keyboard)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
async def unban_user_handle(message: types.Message, state):
    user_id = message.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await message.answer("‚Ä¢ ‚ùå <b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã:</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        await state.finish()
        return
    else:
        try:
            user_id = int(message.text)
            user_name = None
            is_registrated_user = await find_user_data(user_id=user_id)
            if is_registrated_user:
                result = await unban_users_handle(user_id=user_id)
                if result != "unbanned":
                    await message.answer("‚Ä¢ ‚úÖ <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚úÖ", parse_mode="HTML", reply_markup=back_keyboard)
                else:
                    await message.answer("‚Ä¢ ‚úÖ <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)
                await state.finish()
            else:
                attempts = await state.get_data()
                if attempts.get("attempts", 0) >= 3:
                    await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /unban ")
                    await state.finish()
                else:
                    await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                    await message.answer("‚Ä¢ ‚úÖ <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>ID</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∏–ª–∏ USERNAME –∑–∞–Ω–æ–≤–æ:", parse_mode="HTML", reply_markup=back_keyboard)
        except Exception as e:
            user_name = message.text
            user_id = None
            is_registrated_user = await find_user_data(user_name=user_name)
            if is_registrated_user:
                result = await unban_users_handle(user_name=user_name)
                if result != "unbanned":
                    await message.answer("‚Ä¢ ‚úÖ <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚úÖ", parse_mode="HTML", reply_markup=back_keyboard)
                else:
                    await message.answer("‚Ä¢ ‚úÖ <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)

                await state.finish()
            else:
                attempts = await state.get_data()
                if attempts.get("attempts", 0) >= 3:
                    await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /unban ")
                    await state.finish()
                else:
                    await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                    await message.answer("‚Ä¢ ‚úÖ <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\nn–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>USERNAME</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∏–ª–∏ USERNAME –∑–∞–Ω–æ–≤–æ:", parse_mode="HTML", reply_markup=back_keyboard)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –º–µ–Ω—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async def ban_user2_handle(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await callback.message.answer("‚Ä¢ ‚ùå <b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã:</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        await state.finish()
        return
    else:
        data = await state.get_data()
        try:
            user_id = int(data.get("user_id"))
            user_name = None
            is_registrated_user = await find_user_data(user_id=user_id)
            if is_registrated_user:
                result = await ban_users_handle(user_id=user_id)
                if result != "banned":
                    await callback.message.answer("‚Ä¢ ‚ùå <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚úÖ", parse_mode="HTML", reply_markup=back_keyboard)
                    await callback.answer('')
                else:
                    await callback.message.answer("‚Ä¢ ‚ùå <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–Ω–µ ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)
                    await callback.answer('')
                await AdmButtonState.WAITING_FOR_CALLBACK_BUTTONS.set()
            else:
                attempts = await state.get_data()
                if attempts.get("attempts", 0) >= 3:
                    await callback.message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /ban ")
                    await state.finish()
                else:
                    await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                    await callback.message.answer("‚Ä¢ ‚ùå <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>ID</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∏–ª–∏ USERNAME –∑–∞–Ω–æ–≤–æ:", parse_mode="HTML", reply_markup=back_keyboard)
                    await callback.answer('')

        except Exception as e:
            user_name = data.get("user_name")
            user_id = None
            is_registrated_user = await find_user_data(user_name=user_name)
            if is_registrated_user:
                result = await ban_users_handle(user_name=user_name)
                if result != "banned":
                    await callback.message.answer("‚Ä¢ ‚ùå <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚úÖ", parse_mode="HTML", reply_markup=back_keyboard)
                    await callback.answer('')
                else:
                    await callback.message.answer("‚Ä¢ ‚ùå <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–Ω–µ ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)
                    await callback.answer('')
                await AdmButtonState.WAITING_FOR_CALLBACK_BUTTONS.set()
            else:
                attempts = await state.get_data()
                if attempts.get("attempts", 0) >= 3:
                    await callback.message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /ban ")
                    await state.finish()
                else:
                    await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                    await callback.message.answer("‚Ä¢ ‚ùå <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\nn–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>USERNAME</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∏–ª–∏ USERNAME –∑–∞–Ω–æ–≤–æ:", parse_mode="HTML", reply_markup=back_keyboard)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 
async def ban_user_handle(message: types.Message, state):
    user_id = message.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await message.answer("‚Ä¢ ‚ùå <b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã:</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        await state.finish()
        return
    else:
        try:
            user_id = int(message.text)
            user_name = None
            is_registrated_user = await find_user_data(user_id=user_id)
            if is_registrated_user:
                result = await ban_users_handle(user_id=user_id)
                if result != "banned":
                    await message.answer("‚Ä¢ ‚ùå <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚úÖ", parse_mode="HTML", reply_markup=back_keyboard)
                else:
                    await message.answer("‚Ä¢ ‚ùå <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–Ω–µ ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)
                await state.finish()
            else:
                attempts = await state.get_data()
                if attempts.get("attempts", 0) >= 3:
                    await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /ban ")
                    await state.finish()
                else:
                    await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                    await message.answer("‚Ä¢ ‚ùå <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>ID</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∏–ª–∏ USERNAME –∑–∞–Ω–æ–≤–æ:", parse_mode="HTML", reply_markup=back_keyboard)
        except Exception as e:
            user_name = message.text
            user_id = None
            is_registrated_user = await find_user_data(user_name=user_name)
            if is_registrated_user:
                result = await ban_users_handle(user_name=user_name)
                if result != "banned":
                    await message.answer("‚Ä¢ ‚ùå <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚úÖ", parse_mode="HTML", reply_markup=back_keyboard)
                else:
                    await message.answer("‚Ä¢ ‚ùå <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–Ω–µ ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)

                await state.finish()
            else:
                attempts = await state.get_data()
                if attempts.get("attempts", 0) >= 3:
                    await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /ban ")
                    await state.finish()
                else:
                    await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                    await message.answer("‚Ä¢ ‚ùå <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>USERNAME</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∏–ª–∏ USERNAME –∑–∞–Ω–æ–≤–æ:", parse_mode="HTML", reply_markup=back_keyboard)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def find_info_about_users_vpn(message: types.Message, state):
    user_id = message.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await message.answer("‚Ä¢ ‚ùå <b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã:</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        await state.finish()
        return
    else:
        try:
            user_id = int(message.text)
            user_name = None
            vpn_data = await get_vpn_data(user_id=user_id)
            if vpn_data != None:
                for vpn in vpn_data:
                    id = vpn[0]
                    user_id = vpn[1]
                    user_name = vpn[2]
                    location = vpn[3]
                    active = vpn[4]
                    expiration_date = vpn[5]
                    if expiration_date is not None:
                        expiration_date = str(expiration_date)
                        expiration_date_new = datetime.datetime.strptime(expiration_date, "%d.%m.%Y %H:%M:%S")
                        days_remaining = (expiration_date_new - datetime.datetime.now()).days
                        name_of_vpn = vpn[6]
                        vpn_config = vpn[7]
                        await bot.send_document(message.from_user.id, vpn_config, caption=f"‚Ä¢ üõ°Ô∏è <b>VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\nüìç –õ–æ–∫–∞—Ü–∏—è:  <code> {location}</code>\nüïò –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:   <code>{expiration_date_new.strftime('%d.%m.%Y %H:%M:%S')}</code>\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å:   <code>{days_remaining}</code> –¥–Ω–µ–π\n\n", parse_mode="HTML")
                    else:
                        await message.answer("‚Ä¢ üõ°Ô∏è <b>VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º–µ–µ—Ç—Å—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–π VPN, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.", parse_mode="HTML")
            else:
                await message.answer("‚Ä¢ üõ°Ô∏è <b>VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞ –Ω–µ –∏–º–µ–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ VPN ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)
        except Exception as e:
            user_name = message.text
            user_id = None
            vpn_data = await get_vpn_data(user_name=user_name)
            user_info = await find_user_data(user_name=user_name)
            if user_info != None:
                if vpn_data != None:
                    for vpn in vpn_data:
                        id = vpn[0]
                        user_id = vpn[1]
                        user_name = vpn[2]
                        location = vpn[3]
                        active = vpn[4]
                        expiration_date = datetime.datetime.strptime(vpn[5], "%d.%m.%Y %H:%M:%S")
                        if expiration_date is not None:
                            expiration_date = str(expiration_date)
                            expiration_date_new = datetime.datetime.strptime(expiration_date, "%d.%m.%Y %H:%M:%S")
                            days_remaining = (expiration_date_new - datetime.datetime.now()).days
                            name_of_vpn = vpn[6]
                            vpn_config = vpn[7]
                            await bot.send_document(message.from_user.id, vpn_config, caption=f"‚Ä¢ üõ°Ô∏è <b>VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\nüìç –õ–æ–∫–∞—Ü–∏—è:  <code> {location}</code>\nüïò –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:   <code>{expiration_date_new.strftime('%d.%m.%Y %H:%M:%S')}</code>\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å:   <code>{days_remaining}</code> –¥–Ω–µ–π\n\n", parse_mode="HTML")
                        else:
                            await message.answer("‚Ä¢ üõ°Ô∏è <b>VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º–µ–µ—Ç—Å—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–π VPN, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.", parse_mode="HTML")
                else:
                    await message.answer("‚Ä¢ üõ°Ô∏è <b>VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞ –Ω–µ –∏–º–µ–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ VPN ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)
            else:
                attempts = await state.get_data()
                if attempts.get("attempts", 0) >= 3:
                    await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /user_vpn ")
                    await state.finish()
                else:
                    await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                    await message.answer("‚Ä¢ üóÉ <b>–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>USERNAME</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∏–ª–∏ USERNAME –∑–∞–Ω–æ–≤–æ: ", parse_mode="HTML", reply_markup=back_keyboard)
            
                await message.answer("‚Ä¢ üõ°Ô∏è <b>VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º USERNAME –Ω–µ –Ω–∞–π–¥–µ—Ç ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ USERNAME –∏–ª–∏ ID –∑–∞–Ω–æ–≤–æ:", parse_mode="HTML", reply_markup=back_keyboard)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async def find_user_info_for_adm_panel(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await message.answer("‚Ä¢ ‚ùå <b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã:</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        await state.finish()
        return
    else:
        try:
            user_id_for_find_info = int(message.text)
            user_name_for_find_info = None
            user_info = await find_user_data(user_id=user_id_for_find_info)
        except Exception as e:
            user_name_for_find_info = message.text
            user_id_for_find_info = None
            user_info = await find_user_data(user_name=user_name_for_find_info)
        await state.update_data(user_name=user_name_for_find_info, user_id=user_id_for_find_info)
        if user_info != []:
            used_promocodes, referrer_id, id, user_id, user_name, balance, time_of_registration = None, None, None, None, None, None, None
            for info in user_info:
                id = info[0]
                user_id = info[1]
                user_name = info[2]
                balance = info[3]
                time_of_registration = info[4]
                referrer_id = info[5]
                used_promocodes = info[6]
                is_banned = info[7]

            used_promocodes_text = "-"
            if used_promocodes:
                used_promocodes_list = used_promocodes.split(",")
                used_promocodes_text = ", ".join(used_promocodes_list)[:-2]

            if is_banned == 0:
                is_banned = "-"
            else:
                is_banned = "+"

            if referrer_id == None:
                referrer_id = "-"
                user_info_text = f"‚Ä¢ üóÉ <b>–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>:\n\nID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: <code>{id}</code>\nTelegram ID: <code>{user_id}</code>\nUsername –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{user_name}</code>\n–ë–∞–ª–∞–Ω—Å: <code>{balance}</code> ‚ÇΩ\n–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <code>{time_of_registration}</code>\n–†–µ—Ñ–µ—Ä–µ—Ä: <code>-</code>\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã: <code>{used_promocodes_text}</code>\n–ó–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{is_banned}</code>"
            else:
                referrer_username = await get_referrer_username(user_id=referrer_id)
                user_info_text = f"‚Ä¢ üóÉ <b>–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>:\n\nID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: <code>{id}</code>\nTelegram ID: <code>{user_id}</code>\nUsername –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{user_name}</code>\n–ë–∞–ª–∞–Ω—Å: <code>{balance}</code> ‚ÇΩ\n–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <code>{time_of_registration}</code>\n–†–µ—Ñ–µ—Ä–µ—Ä: {referrer_username}({referrer_id})\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã: <code>{used_promocodes_text}</code>\n–ó–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{is_banned}</code>"
            await message.answer(user_info_text, reply_markup=user_find_data, parse_mode="HTML")
            if message.reply_markup:
                await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
            else:
                await save_temp_message(message.from_user.id, message.text, None)
            await AdmButtonState.WAITING_FOR_CALLBACK_BUTTONS.set()

        elif user_id_for_find_info == None and user_info == []:
            attempts = await state.get_data()
            if attempts.get("attempts", 0) >= 3:
                await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /user_info ")
                await AdmButtonState.WAITING_FOR_CALLBACK_BUTTONS.set()
            else:
                await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                await message.answer("‚Ä¢ üóÉ <b>–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>USERNAME</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∏–ª–∏ USERNAME –∑–∞–Ω–æ–≤–æ: ", parse_mode="HTML", reply_markup=back_keyboard)
        elif user_name_for_find_info == None and user_info == []:
            attempts = await state.get_data()
            if attempts.get("attempts", 0) >= 3:
                await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /user_info ", reply_markup=back_keyboard)
                await AdmButtonState.WAITING_FOR_CALLBACK_BUTTONS.set()
            else:
                await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                await message.answer("‚Ä¢ üóÉ <b>–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>ID</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def vpn_info_handle(callback: types.CallbackQuery, state: FSMContext):   
    user_id = callback.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await callback.message.answer("‚Ä¢ ‚ùå <b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã:</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        await state.finish()
        return
    else:
        data = await state.get_data()
        try:
            user_id1 = int(data.get("user_id"))
            user_name = None
            vpn_data = await get_vpn_data(user_id=user_id1)
            user_info = await find_user_data(user_id=user_id1)
            if user_info != None:
                if vpn_data != None:
                    for vpn in vpn_data:
                        id = vpn[0]
                        user_id = vpn[1]
                        user_name = vpn[2]
                        location = vpn[3]
                        active = vpn[4]
                        expiration_date = vpn[5]
                        if expiration_date is not None:
                            expiration_date = str(expiration_date)
                            expiration_date_new = datetime.datetime.strptime(expiration_date, "%d.%m.%Y %H:%M:%S")
                            days_remaining = (expiration_date_new - datetime.datetime.now()).days
                            name_of_vpn = vpn[6]
                            vpn_config = vpn[7]
                            await bot.send_document(callback.from_user.id, vpn_config, caption=f"‚Ä¢ üõ°Ô∏è <b>VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\nüìç –õ–æ–∫–∞—Ü–∏—è:  <code> {location}</code>\nüïò –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:   <code>{expiration_date.strftime('%d.%m.%Y %H:%M:%S')}</code>\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å:   <code>{days_remaining}</code> –¥–Ω–µ–π\n\n", parse_mode="HTML")
                        else:
                            await callback.message.answer("‚Ä¢ üõ°Ô∏è <b>VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º–µ–µ—Ç—Å—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–π VPN, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.", parse_mode="HTML")
                        await callback.answer('')
                        await AdmButtonState.WAITING_FOR_CALLBACK_BUTTONS.set()

                else:
                    await callback.message.answer("‚Ä¢ üõ°Ô∏è <b>VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞ –Ω–µ –∏–º–µ–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ VPN ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)
                    await callback.answer('')
                    await AdmButtonState.WAITING_FOR_CALLBACK_BUTTONS.set()
            else:
                attempts = await state.get_data()
                if attempts.get("attempts", 0) >= 3:
                    await callback.message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /user_vpn")
                    await callback.answer('')
                    await state.finish()
                else:
                    await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                    await callback.message.answer("‚Ä¢ üõ°Ô∏è <b>VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>ID</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ <b>ID</b> –∏–ª–∏ <b>USERNAME</b> –∑–∞–Ω–æ–≤–æ: ", parse_mode="HTML", reply_markup=back_keyboard)
        except Exception:
            user_name = data.get("user_name")
            user_id = None
            vpn_data = await get_vpn_data(user_name=user_name)
            user_info = await find_user_data(user_name=user_name)
            if user_info != [] or user_info != None:
                if vpn_data != []:
                    for vpn in vpn_data:
                        id = vpn[0]
                        user_id = vpn[1]
                        user_name = vpn[2]
                        location = vpn[3]
                        active = vpn[4]
                        expiration_date = vpn[5]
                        if expiration_date is not None:
                            expiration_date = str(expiration_date)
                            expiration_date_new = datetime.datetime.strptime(expiration_date, "%d.%m.%Y %H:%M:%S")
                            days_remaining = (expiration_date_new - datetime.datetime.now()).days
                            name_of_vpn = vpn[6]
                            vpn_config = vpn[7]
                            await bot.send_document(callback.from_user.id, vpn_config, caption=f"‚Ä¢ üõ°Ô∏è <b>VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\nüìç –õ–æ–∫–∞—Ü–∏—è:  <code> {location}</code>\nüïò –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:   <code>{expiration_date_new.strftime('%d.%m.%Y %H:%M:%S')}</code>\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å:   <code>{days_remaining}</code> –¥–Ω–µ–π\n\n", parse_mode="HTML")
                        else:
                            await callback.message.answer("‚Ä¢ üõ°Ô∏è <b>VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>:\n\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º–µ–µ—Ç—Å—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–π VPN, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.", parse_mode="HTML")
                        await callback.answer('')
                        await AdmButtonState.WAITING_FOR_CALLBACK_BUTTONS.set()
                else:
                    await callback.message.answer("‚Ä¢ üõ°Ô∏è <b>VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞ –Ω–µ –∏–º–µ–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ VPN ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)
                    await callback.answer('')
                    await AdmButtonState.WAITING_FOR_CALLBACK_BUTTONS.set()
            else:
                attempts = await state.get_data()
                if attempts.get("attempts", 0) >= 3:
                    await callback.message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /user_vpn")
                    await callback.answer('')
                    await state.finish()
                else:
                    await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                    await callback.message.answer("‚Ä¢ üõ°Ô∏è <b>VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>USERNAME</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ <b>ID</b> –∏–ª–∏ <b>USERNAME</b> –∑–∞–Ω–æ–≤–æ: ", parse_mode="HTML", reply_markup=back_keyboard)

# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def handling_user_name(message: types.Message, state):
    user_id = message.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await message.answer("‚Ä¢ ‚ùå <b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã:</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        await state.finish()
        return
    else:
        global user_id_for_add
        global user_name_for_add
        try:
            user_id_for_add = int(message.text)
            user_name_for_add = None
        except Exception as e:
            user_name_for_add = message.text
            user_id_for_add = None
        await message.answer("‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", reply_markup=back_keyboard, parse_mode="HTML")
        if message.reply_markup:
            await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
        else:
            await save_temp_message(message.from_user.id, message.text, None)
        await AdmCommandState.WAITING_FOR_SUM_HANDLE_FOR_ADD.set()

# –æ–∂–∏–¥–∞–Ω–∏–µ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
async def handle_for_adm_add_sum(message: types.Message, state):
    user_id = message.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await message.answer("‚Ä¢ ‚ùå <b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã:</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        await state.finish()
        return
    else:
        try:
            global adm_sum_for_add
            adm_sum_for_add = int(message.text)
        except Exception as e:
            attempts = await state.get_data()
            if attempts.get("attempts", 0) >= 3:
                await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /add")
                await state.finish()
            else:
                await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                await message.answer("‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ) ‚ùå", parse_mode="HTML")
        if adm_sum_for_add > 0:
            if user_id_for_add != None:
                await add_operation(int(adm_sum_for_add), user_id=user_id_for_add)
                await bot.send_message(user_id_for_add, f"‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø–æ–ø–æ–ª–Ω–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É: {adm_sum_for_add} ‚ÇΩ ‚úÖ", parse_mode="HTML")
            elif user_name_for_add != None:
                user_info = await find_user_data(user_name=user_name_for_add)
                for info in user_info:
                    user_id_for_reply = info[1]
                await add_operation(int(adm_sum_for_add), user_name=user_name_for_add)
                await bot.send_message(user_id_for_reply, f"‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø–æ–ø–æ–ª–Ω–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É: {adm_sum_for_add} ‚ÇΩ ‚úÖ", parse_mode="HTML")
        else:
            if attempts.get("attempts", 0) >= 3:
                await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /add")
                await state.finish()
            else:
                await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                await message.answer("‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–°—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è ‚ùå\n\n<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É –∑–∞–Ω–æ–≤–æ:</i>", parse_mode="HTML")
        await message.answer(f"‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–ë–∞–ª–∞–Ω—Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞: {adm_sum_for_add} ‚ÇΩ ‚úÖ", reply_markup=back_keyboard, parse_mode="HTML")
        await state.finish()
        await edit_operations_history(user_id=user_id_for_add, user_name=user_name_for_add, operations=(+(int(adm_sum_for_add))), description_of_operation="ü§ñ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä")

# —É–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
async def handling_user_name_for_delete(message: types.Message, state):
    user_id = message.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await message.answer("‚Ä¢ ‚ùå <b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã:</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        await state.finish()
        return
    else:
        global user_id_for_delete
        global user_name_for_delete
        try:
            user_id_for_delete = int(message.text)
            user_name_for_delete = None
        except Exception as e:
            user_name_for_delete = message.text
            user_id_for_delete = None
        await message.answer("‚Ä¢ üíµ <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", reply_markup=back_keyboard, parse_mode="HTML")
        if message.reply_markup:
            await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
        else:
            await save_temp_message(message.from_user.id, message.text, None)
        await AdmCommandState.WAITING_FOR_SUM_HANDLE_FOR_DELETE.set()

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
async def handle_for_adm_delete_sum(message: types.Message, state):
    user_id = message.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await message.answer("‚Ä¢ ‚ùå <b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã:</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        await state.finish()
        return
    else:
        try:
            adm_sum_for_delete = int(message.text)
        except Exception as e:
            attempts = await state.get_data()
            if attempts.get("attempts", 0) >= 3:
                await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /delete ")
                await state.finish()
            else:
                await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                await message.answer("‚Ä¢ üíµ <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ) ‚ùå", parse_mode="HTML")
        if message.reply_markup:
            await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
        else:
            await save_temp_message(message.from_user.id, message.text, None)

        if adm_sum_for_delete > 0:
            if user_id_for_delete != None:
                balance = await get_balance(user_id=user_id_for_delete)
                if balance >= int(adm_sum_for_delete):
                    await delete_sum_operation(int(adm_sum_for_delete), user_id=user_id_for_delete)
                    await edit_operations_history(user_id=user_id_for_delete, user_name=user_name_for_delete, operations=(-(int(adm_sum_for_delete))), description_of_operation="ü§ñ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä")
                    await bot.send_message(user_id_for_delete, f"‚Ä¢ üíµ <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É: {adm_sum_for_delete} ‚ÇΩ ", parse_mode="HTML")
                    await message.answer(f"‚Ä¢ üíµ <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b>\n\n–ë–∞–ª–∞–Ω—Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω –Ω–∞: {adm_sum_for_delete} ‚ÇΩ ‚úÖ", reply_markup=back_keyboard, parse_mode="HTML")
                    await state.finish()
                else:
                    attempts = await state.get_data()
                    if attempts.get("attempts", 0) >= 3:
                        await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /delete ")
                        await state.finish()
                    else:
                        await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                        await message.answer('‚Ä¢ üíµ <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b>\n\n–£ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ, —á–µ–º –≤—ã—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ:', parse_mode="HTML")
                if message.reply_markup:
                    await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
                else:
                    await save_temp_message(message.from_user.id, message.text, None)
            elif user_name_for_delete != None:
                balance = await get_balance(user_name=user_name_for_delete)
                if balance >= int(adm_sum_for_delete):
                    user_info = await find_user_data(user_name=user_name_for_delete)
                    for info in user_info:
                        user_id__for_send_message = info[1]
                    await delete_sum_operation(int(adm_sum_for_delete), user_name=user_name_for_delete)
                    await bot.send_message(user_id__for_send_message, f"‚Ä¢ üíµ <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É: {adm_sum_for_delete} ‚ÇΩ", parse_mode="HTML")
                    await message.answer(f"‚Ä¢ üíµ <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b>\n\n–ë–∞–ª–∞–Ω—Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω –Ω–∞: {adm_sum_for_delete} ‚ÇΩ ‚úÖ", reply_markup=back_keyboard, parse_mode="HTML")
                    await edit_operations_history(user_id=user_id_for_delete, user_name=user_name_for_delete, operations=(-(int(adm_sum_for_delete))), description_of_operation="ü§ñ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä")
                    await state.finish()
                else: 
                    attempts = await state.get_data()
                    if attempts.get("attempts", 0) >= 3:
                        await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /delete ")
                        await state.finish()
                    else:
                        await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                        await message.answer('‚Ä¢ üíµ <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b>\n\n–£ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ, —á–µ–º –≤—ã—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ:', parse_mode="HTML")
                if message.reply_markup:
                    await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
                else:
                    await save_temp_message(message.from_user.id, message.text, None)
        else:
            if attempts.get("attempts", 0) >= 3:
                await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /delete")
                await state.finish()
            else:
                await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                await message.answer("‚Ä¢ üíµ <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–°—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è ‚ùå\n\n<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É –∑–∞–Ω–æ–≤–æ:</i>", parse_mode="HTML")

async def notification_moders_for_vpns_soon(days: int):
    while True:
        information_about_vpns = await check_vpn_expiration_for_days(days=days)
        if information_about_vpns != []:
            for info in information_about_vpns:
                user_id = info[0]
                user_name = info[1]
                expiration_date = info[2]
                file = info[3]
                
                notification_sent = await check_notification_sent(user_id, user_name, expiration_date)
                if not notification_sent:
                    await bot.send_document(document=file, chat_id=BLAZER_CHAT_TOKEN, caption=f"‚ùóÔ∏è <b>–í–∞–∂–Ω–æ!</b>\n\nVPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_name} (ID: <code>{user_id}</code>) —Å –¥–∞—Ç–æ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è <code>{expiration_date}</code> –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ <code>{days}</code> –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è.", parse_mode="HTML")
                    await bot.send_document(document=file, chat_id=ANUSH_CHAT_TOKEN, caption=f"‚ùóÔ∏è <b>–í–∞–∂–Ω–æ!</b>\n\nVPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_name} (ID: <code>{user_id}</code>) —Å –¥–∞—Ç–æ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è <code>{expiration_date}</code> –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ <code>{days}</code> –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è.", parse_mode="HTML")
                    await bot.send_document(document=file, chat_id=user_id, caption=f"‚Ä¢ üõ° <b>–í–∞—à VPN</b>:\n\n–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ VPN –æ—Å—Ç–∞–ª–æ—Å—å <code>{days}</code> –¥–Ω–µ–π. \n–°—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è VPN: <code>{expiration_date}</code>\n\n<i>–ß—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å —Å–≤–æ–π VPN, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É -</i> /extend_vpn", parse_mode="HTML", reply_markup=extension_keyboard)
                    
                    await mark_notification_sent(user_id, user_name, expiration_date)
        await asyncio.sleep(1800)

notification_status = {}

async def check_notification_sent(user_id, user_name, expiration_date):
    return notification_status.get((user_id, user_name, expiration_date), False)

async def mark_notification_sent(user_id, user_name, expiration_date):
    notification_status[(user_id, user_name, expiration_date)] = True

async def notification_moders_for_vpns_end():
    while True:
        information_about_vpns = await check_expired_vpns()
        if information_about_vpns != []:
            for info in information_about_vpns:
                user_id = info[0]
                user_name = info[1]
                expiration_date = info[2]
                file = info[3]
                await bot.send_document(document=file, chat_id=BLAZER_CHAT_TOKEN, caption=f"‚ùóÔ∏è <b>–í–∞–∂–Ω–æ!</b>\n\nVPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_name} (ID: <code>{user_id}</code>) —Å –¥–∞—Ç–æ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è <code>{expiration_date}</code> –±—ã–ª —É–¥–∞–ª–µ–Ω c —Å–≤—è–∑–∏ —Å –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è. ‚úÖ", parse_mode="HTML")
                await bot.send_document(document=file, chat_id=ANUSH_CHAT_TOKEN, caption=f"‚ùóÔ∏è <b>–í–∞–∂–Ω–æ!</b>\n\nVPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_name} (ID: <code>{user_id}</code>) —Å –¥–∞—Ç–æ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è <code>{expiration_date}</code> –±—ã–ª —É–¥–∞–ª–µ–Ω c —Å–≤—è–∑–∏ —Å –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è. ‚úÖ", parse_mode="HTML")
                await bot.send_document(document=file, chat_id=user_id, caption=f"‚Ä¢ üõ° <b>–í–∞—à VPN</b>:\n\n–í–∞—à VPN –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω ‚úÖ\n–°—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è VPN: <code>{expiration_date}</code>\n\n<i>–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å VPN, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É -</i> /buy", parse_mode="HTML", reply_markup=buy_info_keyboard)
        await asyncio.sleep(60)

def register_adm_handlers(dp: Dispatcher) -> None:
    dp.register_callback_query_handler(send_message, lambda c: "reply_buy_keyboard" in c.data)
    dp.register_message_handler(handling_moder_file, state=BuyVPNStates.WAITING_FOR_MESSAGE_TEXT, content_types=['text', 'document'])
    dp.register_callback_query_handler(process_answer, lambda c: "reply_keyboard" in c.data)
    dp.register_message_handler(replying_for_moder, state=SupportStates.WAITING_FOR_MODERATOR_ANSWER, content_types=['text', 'document'])
    dp.register_callback_query_handler(adm_panel_handle, lambda c: c.data == "adm_panel_callback")
    dp.register_callback_query_handler(adm_panel_buttons_handler, lambda c: c.data == "addind_balance_callback" or c.data == "deleting_balance_callback" or c.data == "user_data_callback" or c.data == "vpn_user_callback" or c.data == "ban_user_callback" or c.data == "unban_user_callback")
    dp.register_callback_query_handler(unban_user2_handle, lambda c: c.data == "unban_user2_callback", state=AdmButtonState.WAITING_FOR_CALLBACK_BUTTONS)
    dp.register_message_handler(unban_user_handle, state=UnbanUserState.WAITING_FOR_USER_ID)
    dp.register_callback_query_handler(ban_user2_handle, lambda c: c.data == "ban_user2_callback", state=AdmButtonState.WAITING_FOR_CALLBACK_BUTTONS)
    dp.register_message_handler(ban_user_handle, state=BanUserState.WAITING_FOR_USER_ID)
    dp.register_message_handler(find_info_about_users_vpn, state=UserVPNInfo.WAITING_FOR_USER_ID_FOR_USER_VPN_INFO)
    dp.register_message_handler(find_user_info_for_adm_panel, state=AdmButtonState.WAITING_FOR_USER_ID_FOR_USER_INFO)
    dp.register_callback_query_handler(vpn_info_handle, lambda c: c.data == "vpn_user2_callback", state=AdmButtonState.WAITING_FOR_CALLBACK_BUTTONS)
    dp.register_message_handler(handling_user_name, state=AdmCommandState.WAITING_ID_OF_USER_FOR_ADD)
    dp.register_message_handler(handle_for_adm_add_sum, state=AdmCommandState.WAITING_FOR_SUM_HANDLE_FOR_ADD)
    dp.register_message_handler(handling_user_name_for_delete, state=AdmCommandState.WAITING_ID_OF_USER_HANDLE_FOR_DELETE)
    dp.register_message_handler(handle_for_adm_delete_sum, state=AdmCommandState.WAITING_FOR_SUM_HANDLE_FOR_DELETE)
    dp.register_callback_query_handler(adding_balance_for_moder, lambda c: c.data == "about_yourself_callback", state=AdmCommandState.WAITING_ID_OF_USER_FOR_ADD)
    dp.register_callback_query_handler(deleting_balance_for_moder, lambda c: c.data == "about_yourself_to_delete_callback", state=AdmCommandState.WAITING_ID_OF_USER_HANDLE_FOR_DELETE)
    


