import os
import datetime
import asyncio

from dotenv import load_dotenv
from typing import NamedTuple

from aiogram import Dispatcher, Bot
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message, InputMediaPhoto

from bot.database.OperationsData import edit_operations_history, getting_operation_history
from bot.database.UserData import addind_vpn_count, get_balance, add_operation, pay_operation, get_referrer_info, find_user_data, ban_users_handle, unban_users_handle, delete_sum_operation
from bot.database.VpnData import delete_vpn, update_vpn_half_info, update_vpn_other_info, get_expiration_date, get_order_id, get_vpn_data, check_vpn_expiration_for_days, check_expired_vpns

from bot.keyboards.user_keyboards import insturtion_keyboard, back_keyboard
from bot.keyboards.adm_keyboards import pay_finland_keyboard, pay_germany_keyboard, pay_netherlands_keyboard, pay_sweden_keyboard, vpn_connection_type_keyboard, adm_panel_keyboard, location_kb, buy_info_keyboard, user_find_data, about_yourself_to_add_keyboard, about_yourself_to_delete_keyboard, finish_buy_vpn, extension_keyboard

from bot.utils.outline import create_new_key, find_keys_info

load_dotenv('.env')

BLAZER_CHAT_TOKEN = os.getenv('BLAZER_CHAT_TOKEN')
ANUSH_CHAT_TOKEN = os.getenv('ANUSH_CHAT_TOKEN')
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(BOT_TOKEN)

"""********************************************* –°–û–°–¢–û–Ø–ù–ò–Ø ******************************************************"""

class BuyVPNStates(StatesGroup):
    WAITING_FOR_MESSAGE_TEXT = State()

class SupportStates(StatesGroup):
    WAITING_FOR_QUESTION = State()
    WAITING_FOR_MODERATOR_ANSWER = State()

class AdmCommandState(StatesGroup):
    WAITING_ID_OF_USER_FOR_DELETE = State()
    WAITING_ID_OF_USER_FOR_ADD = State()
    WAITING_ID_OF_USER_HANDLE_FOR_ADD = State()
    WAITING_ID_OF_USER_HANDLE_FOR_DELETE = State()
    WAITING_FOR_SUM_HANDLE_FOR_ADD = State()
    WAITING_FOR_SUM_HANDLE_FOR_DELETE = State()

class AdmButtonState(StatesGroup):
    WAITING_FOR_USER_ID_FOR_USER_INFO = State()
    WAITING_FOR_CALLBACK_BUTTONS = State()

class UserVPNInfo(StatesGroup):
    WAITING_FOR_USER_ID_FOR_USER_VPN_INFO = State()

class BanUserState(StatesGroup):
    WAITING_FOR_USER_ID = State()

class UnbanUserState(StatesGroup):
    WAITING_FOR_USER_ID = State()

class AddVpnForUsers(StatesGroup):
    WAITING_FOR_USER_ID = State()
    
class DeleteVpnForUsers(StatesGroup):
    WAITING_FOR_USER_ID = State()
    WAITING_FOR_USER_ID_FOR_DELETE = State()

class FindUserHistory(StatesGroup):
    WAITING_FOR_USER_ID = State()

class SupportRequest(NamedTuple):
    user_id: int
    user_name: str
    question: str
    answer: str = None


support_requests = []



# # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è   
# async def send_message(callback: CallbackQuery, state: FSMContext):
#     order_id = int(callback.data.split(".")[1])
#     location = callback.data.split(".")[2]
#     user_buy_id = int(callback.data.split(".")[3])
#     expiration_date = await get_expiration_date(ID=order_id)
#     if expiration_date == None:
#         await state.update_data(order_id=order_id, location=location)
#         await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/nZg0n9I", caption="‚Ä¢ üõí <b>–ü–æ–∫—É–ø–∫–∞ VPN</b>:\n\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", parse_mode="HTML"), reply_markup=back_keyboard)
#         await BuyVPNStates.WAITING_FOR_MESSAGE_TEXT.set()
#     else:
#         await callback.message.answer_photo(photo="https://imgur.com/43en7Eh", caption="‚Ä¢ üõí <b>–ü–æ–∫—É–ø–∫–∞ VPN</b>:\n\n–î—Ä—É–≥–æ–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª —ç—Ç–æ—Ç VPN ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)
#         await state.finish()
#         return 

# async def handling_moder_file(message: Message, state: FSMContext):
#     if message.text:
#         moder_vpn_key = message.text
#         order_id_data = await state.get_data()
#         order_id = order_id_data.get('order_id')
#         location = order_id_data.get('location')
#         if not int(order_id):
#             await message.answer_photo(photo="https://imgur.com/weO3juR", caption="‚Ä¢ üõí <b>–ü–æ–∫—É–ø–∫–∞ VPN</b>:\n\nID –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå", parse_mode="HTML")
#             await state.finish()
#             return
        
#         order_data = await get_order_id(int(order_id))
#         if not order_data:
#             await message.answer_photo(photo="https://imgur.com/weO3juR", caption="‚Ä¢ ‚ùå <b>–û—à–∏–±–∫–∞</b>:\n\n–ó–∞–∫–∞–∑–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", parse_mode="HTML")
#             await state.finish()
#             return
            
#         try:
#             expiration_date = datetime.datetime.now() + timedelta(days=28)
#             await update_vpn_state(order_id=int(order_id), expiration_days=expiration_date.strftime("%d.%m.%Y %H:%M:%S"), vpn_key=moder_vpn_key)
#             await addind_vpn_count(user_id=order_data[1])
#             await message.answer_photo(photo="https://imgur.com/nZg0n9I", caption=f"‚Ä¢ üõí <b>–ü–æ–∫—É–ø–∫–∞ VPN</b>:\n\nVPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{order_data[2]} (ID: <code>{order_data[1]}</code>) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ‚úÖ", parse_mode="HTML")
#             await bot.send_photo(photo="https://imgur.com/VEYMRY2", chat_id=order_data[1], caption=f"‚Ä¢ üõí <b>–ü–æ–∫—É–ø–∫–∞ VPN</b>:\n\nVPN —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚úÖ\n\n–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ VPN –ø–æ –Ω–∞—à–µ–π <code>–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</code>, —Å –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.\n\n<i>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</i> <code>{expiration_date.strftime('%d.%m.%Y %H:%M:%S')}</code>\n<i>–õ–æ–∫–∞—Ü–∏—è: </i>{location}\n\n<b>–ö–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b>\n<pre>{moder_vpn_key}</pre>", parse_mode="HTML", reply_markup=finish_buy_vpn)
#             await state.finish()
            
#         except Exception as e:
#             await message.answer_photo(photo="https://imgur.com/weO3juR", caption="‚Ä¢ üõí <b>–ü–æ–∫—É–ø–∫–∞ VPN</b>:\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö ‚ùå", parse_mode="HTML")
#             await state.finish()

#     else:
#         attempts = await state.get_data()
#         if attempts.get("attempts", 0) >= 3:
#             await message.answer_photo(photo="https://imgur.com/weO3juR", caption="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ")
#             await state.finish()
#         else:
#             await state.update_data(attempts=attempts.get("attempts", 0) + 1)
#             await message.answer_photo(photo="https://imgur.com/weO3juR", caption="‚Ä¢ üõí <b>–ü–æ–∫—É–ø–∫–∞ VPN</b>:\n\n–í—ã —Å–∫–∏–Ω—É–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–ª—é—á–∞ VPN!\n\n<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ:</i>", parse_mode="HTML")


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–∫–ø–∏ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
# async def process_answer(callback: CallbackQuery, state: FSMContext):
#     global questions_user_id
#     questions_user_id = callback.data.split('_')[2]
#     await callback.message.answer("‚Ä¢ üÜò <b>–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>:\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç:", reply_markup=back_keyboard, parse_mode="HTML")
#     await save_temp_message(callback.from_user.id, callback.message.text, callback.message.reply_markup.as_json())
#     await callback.answer("")
#     await SupportStates.WAITING_FOR_MODERATOR_ANSWER.set()

# # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
# async def replying_for_moder(message: Message, state):
#     user_info = await getting_question(questions_user_id)
#     if user_info != None:
#         for info in user_info:
#             id = info[0]
#             user_id = info[1]
#             user_name = info[2]
#             question = info[3]

#         answer = message.text
#         try:
#             await bot.send_message(questions_user_id, f"‚Ä¢ üÜò <b>–û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{answer}", reply_markup=back_keyboard, parse_mode="HTML")
#             await bot.send_message(ANUSH_CHAT_TOKEN, f"‚Ä¢ üÜò <b>–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>:\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_name} (ID: <code>{user_id})</code>:\n\n{question}\n\n<b>–û—Ç–≤–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{answer}", parse_mode='HTML')
#             await bot.send_message(BLAZER_CHAT_TOKEN, f"‚Ä¢ üÜò <b>–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>:\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_name} (ID: <code>{user_id})</code>:\n\n{question}\n\n<b>–û—Ç–≤–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{answer}", parse_mode="HTML")
#             await deleting_answered_reports(user_id=user_id)
#         except Exception as e:
#             await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
#     else: 
#         await message.answer("–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå")
#     if message.reply_markup:
#         await save_temp_message(message.from_user.id, message.text, message.reply_markup.as_json())
#     else:  
#         await save_temp_message(message.from_user.id, message.text, None)
#     await state.finish()

"""************************************************* –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ **************************************************"""

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
async def adm_panel_handle(callback: CallbackQuery):
    await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/i4sEHgp", caption="‚Ä¢ ü§ñ <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: ", parse_mode="HTML"), reply_markup=adm_panel_keyboard)
    await callback.answer('')

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
async def adm_panel_buttons_handler(callback: CallbackQuery):
    # —É–¥–∞–ª–µ–Ω–∏–µ –∏ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    if callback.data == "addind_balance_callback":
        await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/i4sEHgp", caption="‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b>\n\n–í–≤–µ–¥–∏—Ç–µ <code>ID</code> –∏–ª–∏ <code>USERNAME</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", parse_mode="HTML"), reply_markup=about_yourself_to_add_keyboard)
        await AdmCommandState.WAITING_ID_OF_USER_FOR_ADD.set()

    elif callback.data == "deleting_balance_callback":
        await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/i4sEHgp", caption="‚Ä¢ üíµ <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b>\n\n–í–≤–µ–¥–∏—Ç–µ <code>ID</code> –∏–ª–∏ <code>USERNAME</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", parse_mode="HTML"), reply_markup=about_yourself_to_delete_keyboard)
        await AdmCommandState.WAITING_ID_OF_USER_HANDLE_FOR_DELETE.set()

    elif callback.data == "user_data_callback":
        await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/i4sEHgp", caption="‚Ä¢ üóÉ <b>–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n–í–≤–µ–¥–∏—Ç–µ <code>ID</code> –∏–ª–∏ <code>USERNAME</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å: ", parse_mode="HTML"), reply_markup=back_keyboard)
        await AdmButtonState.WAITING_FOR_USER_ID_FOR_USER_INFO.set()

    elif callback.data == "vpn_user_callback":
        await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/i4sEHgp", caption="‚Ä¢ üõ°Ô∏è <b>VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–í–≤–µ–¥–∏—Ç–µ <code>ID</code> –∏–ª–∏ <code>USERNAME</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ VPN –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å: ", parse_mode="HTML"), reply_markup=back_keyboard)
        await UserVPNInfo.WAITING_FOR_USER_ID_FOR_USER_VPN_INFO.set()

    elif callback.data == "ban_user_callback":
        await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/i4sEHgp", caption="‚Ä¢ ‚ùå <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–í–≤–µ–¥–∏—Ç–µ <code>ID</code> –∏–ª–∏ <code>USERNAME</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:", parse_mode="HTML"), reply_markup=back_keyboard)
        await BanUserState.WAITING_FOR_USER_ID.set()

    elif callback.data == "unban_user_callback":
        await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/i4sEHgp", caption="‚Ä¢ ‚úÖ <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–í–≤–µ–¥–∏—Ç–µ <code>ID</code> –∏–ª–∏ <code>USERNAME</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:", parse_mode="HTML"), reply_markup=back_keyboard)
        await UnbanUserState.WAITING_FOR_USER_ID.set()

    elif callback.data == "add_vpn_callback":
        await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/i4sEHgp", caption="‚Ä¢ üõ°Ô∏è <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ VPN:</b>\n\n–í–≤–µ–¥–∏—Ç–µ <code>ID</code> –∏–ª–∏ <code>USERNAME</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å VPN:", parse_mode="HTML"), reply_markup=back_keyboard)
        await AddVpnForUsers.WAITING_FOR_USER_ID.set()

    elif callback.data == "delete_vpn_callback":
        await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/i4sEHgp", caption="‚Ä¢ üõ°Ô∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ VPN:</b>\n\n–í–≤–µ–¥–∏—Ç–µ <code>ID</code> –∏–ª–∏ <code>USERNAME</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å VPN:", parse_mode="HTML"), reply_markup=back_keyboard)
        await DeleteVpnForUsers.WAITING_FOR_USER_ID.set()

    elif callback.data == "user_history_callback":
        await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/i4sEHgp", caption="‚Ä¢ üìã <b>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–í–≤–µ–¥–∏—Ç–µ <code>ID</code> –∏–ª–∏ <code>USERNAME</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å:", parse_mode="HTML"), reply_markup=back_keyboard)
        await FindUserHistory.WAITING_FOR_USER_ID.set()

    await callback.answer('')

"""*********************************************** –£–î–ê–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê ***********************************************"""

# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É about_yourself_keyboard, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É
async def deleting_balance_for_moder(callback: CallbackQuery, state: FSMContext):
    user_id_for_delete = callback.from_user.id
    user_name_for_delete = callback.from_user.username
    await state.update_data(user_id_for_delete=user_id_for_delete, user_name_for_delete=user_name_for_delete)
    await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/i4sEHgp", caption="‚Ä¢ üíµ <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", parse_mode="HTML"), reply_markup=back_keyboard)
    await AdmCommandState.WAITING_FOR_SUM_HANDLE_FOR_DELETE.set()

# —É–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
async def handling_user_name_for_delete(message: Message, state: FSMContext):
    try:
        user_id_for_delete = int(message.text)
        user_name_for_delete = None
    except ValueError:
        user_name_for_delete = message.text
        user_id_for_delete = None

    user_info = await find_user_data(user_id=user_id_for_delete, user_name=user_name_for_delete)
    if user_info:
        await state.update_data(user_id_for_delete=user_id_for_delete, user_name_for_delete=user_name_for_delete)
        await message.answer_photo(photo="https://imgur.com/i4sEHgp", caption=f"‚Ä¢ üíµ <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", reply_markup=back_keyboard, parse_mode="HTML")
        await AdmCommandState.WAITING_FOR_SUM_HANDLE_FOR_DELETE.set()
    else:
        attempts = await state.get_data()
        attempts_count = attempts.get("attempts", 0)
        if attempts_count >= 3:
            await message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /delete")
            await state.finish()
        else:
            await state.update_data(attempts=attempts_count + 1)
            await message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="‚Ä¢ üíµ <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b>:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>USERNAME</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ <b>ID</b> –∏–ª–∏ <b>USERNAME</b> –∑–∞–Ω–æ–≤–æ: ", parse_mode="HTML", reply_markup=back_keyboard)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
async def handle_for_adm_delete_sum(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id_for_delete = data.get("user_id_for_delete")
    user_name_for_delete = data.get("user_name_for_delete")

    try:
        adm_sum_for_delete = int(message.text)
        if adm_sum_for_delete <= 0:
            raise ValueError
    except (ValueError, Exception) as e:
        attempts = await state.get_data()
        attempts_count = attempts.get("attempts", 0)
        if attempts_count >= 3:
            await message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /delete ")
            await state.finish()
        else:
            await state.update_data(attempts=attempts_count + 1)
            error_message = "‚Ä¢ üíµ <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b>\n\n"
            if isinstance(e, ValueError):
                error_message += "–°—É–º–º–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è ‚ùå\n\n<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É –∑–∞–Ω–æ–≤–æ:</i>"
            else:
                error_message += "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ) ‚ùå"
            await message.answer_photo(photo="https://imgur.com/zhPS0ja", caption=error_message, parse_mode="HTML")
        return
    user_info = await find_user_data(user_id=user_id_for_delete, user_name=user_name_for_delete)
    if user_info:
        user_id_for_reply = user_info[0][1]
        balance = await get_balance(user_id=user_id_for_delete, user_name=user_name_for_delete)
        if balance >= adm_sum_for_delete:
            await delete_sum_operation(adm_sum_for_delete, user_id=user_id_for_delete, user_name=user_name_for_delete)
            await edit_operations_history(user_id=user_id_for_delete, user_name=user_name_for_delete, operations=(-adm_sum_for_delete), description_of_operation="ü§ñ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä")
            await bot.send_photo(photo="https://imgur.com/i4sEHgp", chat_id=user_id_for_reply, caption=f"‚Ä¢ üíµ <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É: <code>{adm_sum_for_delete}</code> ‚ÇΩ ", parse_mode="HTML")
            await message.answer_photo(photo="https://imgur.com/i4sEHgp", caption=f"‚Ä¢ üíµ <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b>\n\n–ë–∞–ª–∞–Ω—Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω –Ω–∞: <code>{adm_sum_for_delete}</code> ‚ÇΩ ‚úÖ", reply_markup=back_keyboard, parse_mode="HTML")
            await state.finish()
        else:
            attempts = await state.get_data()
            attempts_count = attempts.get("attempts", 0)
            if attempts_count >= 3:
                await message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /delete ")
                await state.finish()
            else:
                await state.update_data(attempts=attempts_count + 1)
                await message.answer_photo(photo="https://imgur.com/zhPS0ja", caption='‚Ä¢ üíµ <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b>\n\n–£ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ, —á–µ–º –≤—ã—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ:', parse_mode="HTML")

"""************************************************* –ü–û–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê **************************************************"""

# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É about_yourself_keyboard, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É
async def adding_balance_for_moder(callback: CallbackQuery, state: FSMContext):
    user_id_for_add = callback.from_user.id
    user_name_for_add = callback.from_user.username
    await state.update_data(user_id_for_add=user_id_for_add, user_name_for_add=user_name_for_add)
    await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/i4sEHgp", caption="‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", parse_mode="HTML"), reply_markup=back_keyboard)
    await AdmCommandState.WAITING_FOR_SUM_HANDLE_FOR_ADD.set()

# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def handling_user_name(message: Message, state: FSMContext):
    try:
        user_id_for_add = int(message.text)
        user_name_for_add = None
    except Exception as e:
        user_name_for_add = message.text
        user_id_for_add = None
    
    user_info = await find_user_data(user_id=user_id_for_add, user_name=user_name_for_add)
    if user_info:
        await state.update_data(user_id_for_add=user_id_for_add, user_name_for_add=user_name_for_add)
        await message.answer_photo(photo="https://imgur.com/i4sEHgp", caption=f"‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", reply_markup=back_keyboard, parse_mode="HTML")
        await AdmCommandState.WAITING_FOR_SUM_HANDLE_FOR_ADD.set()
    else:
        attempts = await state.get_data()
        attempts_count = attempts.get("attempts", 0)
        if attempts_count >= 3:
            await message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /add")
            await state.finish()
        else:
            await state.update_data(attempts=attempts_count + 1)
            await message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b>:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>USERNAME</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ <b>ID</b> –∏–ª–∏ <b>USERNAME</b> –∑–∞–Ω–æ–≤–æ: ", parse_mode="HTML", reply_markup=back_keyboard)

async def handle_for_adm_add_sum(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id_for_add = data.get("user_id_for_add")
    user_name_for_add = data.get("user_name_for_add")  
    try:
        adm_sum_for_add = int(message.text)
        if adm_sum_for_add <= 0:
            raise ValueError
    except (ValueError, Exception) as e:
        attempts = await state.get_data()
        attempts_count = attempts.get("attempts", 0)
        if attempts_count >= 3:
            await message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /add")
            await state.finish()
        else:
            await state.update_data(attempts=attempts_count + 1)
            error_message = "‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n"
            if isinstance(e, ValueError):
                error_message += "–°—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è ‚ùå\n\n<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É –∑–∞–Ω–æ–≤–æ:</i>"
            else:
                error_message += "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ) ‚ùå"
            await message.answer_photo(photo="https://imgur.com/zhPS0ja", caption=error_message, parse_mode="HTML")
        return
    user_info = await find_user_data(user_id=user_id_for_add, user_name=user_name_for_add)
    if user_info:
        user_id_for_reply = user_info[0][1]
        await add_operation(price=adm_sum_for_add, user_id=user_id_for_add, user_name=user_name_for_add)
        await bot.send_photo(photo="https://imgur.com/i4sEHgp", chat_id=user_id_for_reply, caption=f"‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø–æ–ø–æ–ª–Ω–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É: {adm_sum_for_add} ‚ÇΩ ‚úÖ", parse_mode="HTML")

    await message.answer_photo(photo="https://imgur.com/i4sEHgp", caption=f"‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–ë–∞–ª–∞–Ω—Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞: {adm_sum_for_add} ‚ÇΩ ‚úÖ", reply_markup=back_keyboard, parse_mode="HTML")
    await state.finish()
    await edit_operations_history(user_id=user_id_for_add, user_name=user_name_for_add, operations=(+(int(adm_sum_for_add))), description_of_operation="ü§ñ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä")

"""********************************************************* –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ************************************************"""

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async def unban_user2_handle(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    user_id = int(data.get("user_id")) if data.get("user_id") else None
    user_name = data.get("user_name")
    is_registrated_user = await find_user_data(user_id=user_id, user_name=user_name)
    if is_registrated_user:
        result = await unban_users_handle(user_id=user_id, user_name=user_name)
        if result != "unbanned":
            await callback.message.answer_photo(photo="https://imgur.com/i4sEHgp", caption=f"‚Ä¢ ‚úÖ <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚úÖ", parse_mode="HTML", reply_markup=back_keyboard)
        else:
            await callback.message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="‚Ä¢ ‚úÖ <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)
        await AdmButtonState.WAITING_FOR_CALLBACK_BUTTONS.set()
    else:
        attempts = await state.get_data()
        attempts_count = attempts.get("attempts", 0)
        if attempts_count >= 3:
            await callback.message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /unban ")
            await state.finish()
        else:
            await state.update_data(attempts=attempts_count + 1)
            await callback.message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="‚Ä¢ ‚úÖ <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>USERNAME</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∏–ª–∏ USERNAME –∑–∞–Ω–æ–≤–æ:", parse_mode="HTML", reply_markup=back_keyboard)
    await callback.answer("")
        
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
async def unban_user_handle(message: Message, state):
    user_id = message.from_user.id
    try:
        user_id = int(message.text)
        user_name = None
    except ValueError:
        user_name = message.text
        user_id = None

    is_registrated_user = await find_user_data(user_id=user_id, user_name=user_name)
    if is_registrated_user:
        result = await unban_users_handle(user_id=user_id, user_name=user_name)
        if result != "unbanned":
            await message.answer_photo(photo="https://imgur.com/i4sEHgp", caption=f"‚Ä¢ ‚úÖ <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚úÖ", parse_mode="HTML", reply_markup=back_keyboard)
        else:
            await message.answer_photo(photo="https://imgur.com/i4sEHgp", caption="‚Ä¢ ‚úÖ <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)
        await state.finish()
    else:
        attempts = await state.get_data()
        attempts_count = attempts.get("attempts", 0)
        if attempts_count >= 3:
            await message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /unban ")
            await state.finish()
        else:
            await state.update_data(attempts=attempts_count + 1)
            await message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="‚Ä¢ ‚úÖ <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\nn–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>USERNAME</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∏–ª–∏ USERNAME –∑–∞–Ω–æ–≤–æ:", parse_mode="HTML", reply_markup=back_keyboard)

"""*********************************************************** –ë–õ–û–ö–ò–†–û–í–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ***********************************************************"""

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –º–µ–Ω—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async def ban_user2_handle(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    user_id = int(data.get("user_id")) if data.get("user_id") else None
    user_name = data.get("user_name")

    is_registrated_user = await find_user_data(user_id=user_id, user_name=user_name)
    if is_registrated_user:
        result = await ban_users_handle(user_id=user_id, user_name=user_name)
        if result != "banned":
            await callback.message.answer_photo(photo="https://imgur.com/i4sEHgp", caption="‚Ä¢ ‚ùå <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚úÖ", parse_mode="HTML", reply_markup=back_keyboard)
        else:
            await callback.message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="‚Ä¢ ‚ùå <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–Ω–µ ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)
        await AdmButtonState.WAITING_FOR_CALLBACK_BUTTONS.set()
    else:
        attempts = await state.get_data()
        attempts_count = attempts.get("attempts", 0)
        if attempts_count >= 3:
            await callback.message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /ban ")
            await state.finish()
        else:
            await state.update_data(attempts=attempts_count + 1)
            await callback.message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="‚Ä¢ ‚ùå <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\nn–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>USERNAME</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∏–ª–∏ USERNAME –∑–∞–Ω–æ–≤–æ:", parse_mode="HTML", reply_markup=back_keyboard)
    await callback.answer("")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 
async def ban_user_handle(message: Message, state):
    user_id = message.from_user.id
    try:
        user_id = int(message.text)
        user_name = None
        is_registrated_user = await find_user_data(user_id=user_id)
        if is_registrated_user:
            result = await ban_users_handle(user_id=user_id)
            if result != "banned":
                await message.answer("‚Ä¢ ‚ùå <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚úÖ", parse_mode="HTML", reply_markup=back_keyboard)
            else:
                await message.answer("‚Ä¢ ‚ùå <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–Ω–µ ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)
            await state.finish()
        else:
            attempts = await state.get_data()
            if attempts.get("attempts", 0) >= 3:
                await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /ban ")
                await state.finish()
            else:
                await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                await message.answer("‚Ä¢ ‚ùå <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>ID</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∏–ª–∏ USERNAME –∑–∞–Ω–æ–≤–æ:", parse_mode="HTML", reply_markup=back_keyboard)
    except Exception as e:
        user_name = message.text
        user_id = None
        is_registrated_user = await find_user_data(user_name=user_name)
        if is_registrated_user:
            result = await ban_users_handle(user_name=user_name)
            if result != "banned":
                await message.answer("‚Ä¢ ‚ùå <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚úÖ", parse_mode="HTML", reply_markup=back_keyboard)
            else:
                await message.answer("‚Ä¢ ‚ùå <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–Ω–µ ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)

            await state.finish()
        else:
            attempts = await state.get_data()
            if attempts.get("attempts", 0) >= 3:
                await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /ban ")
                await state.finish()
            else:
                await state.update_data(attempts=attempts.get("attempts", 0) + 1)
                await message.answer("‚Ä¢ ‚ùå <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>USERNAME</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∏–ª–∏ USERNAME –∑–∞–Ω–æ–≤–æ:", parse_mode="HTML", reply_markup=back_keyboard)

"""************************************************************** –ü–û–ò–°–ö –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï *************************************"""

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def find_info_about_users_vpn(message: Message, state):
    try:
        user_id = int(message.text)
        user_name = None
    except Exception as e:
        user_name = message.text
        user_id = None
    vpn_data = await get_vpn_data(user_id=user_id, user_name=user_name)
    user_info = await find_user_data(user_name=user_name, user_id=user_id)
    if user_info:
        if vpn_data:
            for vpn in vpn_data:
                id = vpn[0]
                user_id = vpn[1]
                user_name = vpn[2]
                location = vpn[3]
                expiration_date = vpn[4]
                vpn_key = vpn[5]
                if expiration_date:
                    expiration_date_new = datetime.datetime.strptime(expiration_date, "%d.%m.%Y %H:%M:%S")
                    days_remaining = (expiration_date_new - datetime.datetime.now()).days
                    await bot.send_photo(photo="https://imgur.com/i4sEHgp",
                                        chat_id=message.from_user.id, 
                                        caption=f"‚Ä¢ üõ° <b>VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\nID:  <code>{id}</code>\nüìç –õ–æ–∫–∞—Ü–∏—è:  <code> {location}</code>\nüïò –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:   <code>{expiration_date}</code>\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å:   <code>{days_remaining}</code> –¥–Ω–µ–π\nüîë –ö–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: <pre>{vpn_key}</pre>\n", 
                                        parse_mode="HTML")
                else:
                    await message.answer_photo(photo="https://imgur.com/i4sEHgp", caption="‚Ä¢ üõ° <b>VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º–µ–µ—Ç—Å—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–π VPN, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.", parse_mode="HTML")
        else:
            await message.answer_photo(photo="https://imgur.com/i4sEHgp", caption="‚Ä¢ üõ° <b>VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞ –Ω–µ –∏–º–µ–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ VPN ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)
        await state.finish()
    else:
        attempts = await state.get_data()
        attempts_count = attempts.get("attempts", 0)
        if attempts_count >= 3:
            await message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /user_vpn ")
            await state.finish()
        else:
            await state.update_data(attempts=attempts_count + 1)
            await message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="‚Ä¢ üõ° <b>VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <code>USERNAME</code> –Ω–µ –Ω–∞–π–¥–µ—Ç ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ <code>USERNAME</code> –∏–ª–∏ <code>ID</code> –∑–∞–Ω–æ–≤–æ:", parse_mode="HTML", reply_markup=back_keyboard)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async def find_user_info_for_adm_panel(message: Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        user_id_for_find_info = int(message.text)
        user_name_for_find_info = None
    except ValueError:
        user_name_for_find_info = message.text
        user_id_for_find_info = None
    user_info = await find_user_data(user_id=user_id_for_find_info, user_name=user_name_for_find_info)
    await state.update_data(user_name=user_name_for_find_info, user_id=user_id_for_find_info)

    if user_info:
        id, user_id, user_name, balance, time_of_registration, referrer_id, used_promocodes, is_banned, vpns_count = user_info[0]
        used_promocodes_text = "-" if not used_promocodes else ", ".join(used_promocodes.split(","))
        is_banned = "-" if is_banned == 0 else "+"
        if referrer_id:
            ref_user_name = await get_referrer_info(user_id=referrer_id)
            for ref_id, ref_name in ref_user_name:
                referrer_username = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ <b>USERNAME</b>" if ref_name is None else "@" + (ref_user_name[0][1]) + " (ID: <code>" + str(ref_id) + "</code>)"
        else:
            referrer_username = "<code>-</code>"
        user_info_text = f"‚Ä¢ üóÉ <b>–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>:\n\nID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: <code>{id}</code>\nTelegram ID: <code>{user_id}</code>\nUsername –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{user_name}</code>\n–ë–∞–ª–∞–Ω—Å: <code>{balance}</code> ‚ÇΩ\n–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <code>{time_of_registration}</code>\n–†–µ—Ñ–µ—Ä–µ—Ä: {referrer_username}\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã: <code>{used_promocodes_text}</code>\n–ó–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{is_banned}</code>\n–ö–æ–ª-–≤–æ VPN –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: <code>{vpns_count}</code>"
        await message.answer_photo(photo="https://imgur.com/i4sEHgp", caption=user_info_text, reply_markup=user_find_data, parse_mode="HTML")
        await AdmButtonState.WAITING_FOR_CALLBACK_BUTTONS.set()

    elif user_id_for_find_info is None and user_info == []:
        attempts = await state.get_data()
        attempts_count = attempts.get("attempts", 0)
        if attempts_count >= 3:
            await message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /user_info ")
            await AdmButtonState.WAITING_FOR_CALLBACK_BUTTONS.set()
        else:
            await state.update_data(attempts=attempts_count + 1)
            await message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="‚Ä¢ üóÉ <b>–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>USERNAME</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∏–ª–∏ USERNAME –∑–∞–Ω–æ–≤–æ: ", parse_mode="HTML", reply_markup=back_keyboard)
    elif user_name_for_find_info is None and user_info == []:
        attempts = await state.get_data()
        attempts_count = attempts.get("attempts", 0)
        if attempts_count >= 3:
            await message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /user_info ", reply_markup=back_keyboard)
            await AdmButtonState.WAITING_FOR_CALLBACK_BUTTONS.set()
        else:
            await state.update_data(attempts=attempts_count + 1)
            await message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="‚Ä¢ üóÉ <b>–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>ID</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)


"""********************************************************* –ü–û–ò–°–ö –ò–ù–§–û–†–ú–ê–¶–ò–ò –û VPN –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–òÃÜ ****************************************************"""

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def vpn_info_handle(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id1 = int(data.get("user_id")) if data.get("user_id") else None
    user_name = data.get("user_name")

    user_info = await find_user_data(user_id=user_id1, user_name=user_name)
    if user_info:
        vpn_data = await get_vpn_data(user_id=user_id1, user_name=user_name)
        if vpn_data:
            for vpn in vpn_data:
                id, user_id, user_name, location, expiration_date, vpn_key, asd = vpn
                if expiration_date:
                    expiration_date_new = datetime.datetime.strptime(expiration_date, "%d.%m.%Y %H:%M:%S")
                    days_remaining = (expiration_date_new - datetime.datetime.now()).days
                    await bot.send_photo(photo="https://imgur.com/i4sEHgp",
                                        chat_id=callback.from_user.id, 
                                        caption=f"‚Ä¢ üõ° <b>VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\nID: <code>{id}</code>\nüìç –õ–æ–∫–∞—Ü–∏—è:  <code> {location}</code>\nüïò –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:   <code>{expiration_date}</code>\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å:   <code>{days_remaining}</code> –¥–Ω–µ–π\nüîë –ö–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: <pre>{vpn_key}</pre>\n", 
                                        parse_mode="HTML")
                else:
                    await callback.message.answer_photo(photo="https://imgur.com/i4sEHgp", caption="‚Ä¢ üõ° <b>VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º–µ–µ—Ç—Å—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–π VPN, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.", parse_mode="HTML")
                await AdmButtonState.WAITING_FOR_CALLBACK_BUTTONS.set()
        else:
            await callback.message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="‚Ä¢ üõ° <b>VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞ –Ω–µ –∏–º–µ–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ VPN ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)
            await AdmButtonState.WAITING_FOR_CALLBACK_BUTTONS.set()
    else:
        attempts = await state.get_data()
        attempts_count = attempts.get("attempts", 0)
        if attempts_count >= 3:
            await callback.message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /user_vpn")
            await state.finish()
        else:
            await state.update_data(attempts=attempts_count + 1)
            await callback.message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="‚Ä¢ üõ° <b>VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>USERNAME</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ <b>ID</b> –∏–ª–∏ <b>USERNAME</b> –∑–∞–Ω–æ–≤–æ: ", parse_mode="HTML", reply_markup=back_keyboard)
    await callback.answer("")

"""************************************************ –°–û–û–ë–©–ï–ù–ò–ï –û –°–†–û–ö–ê–• –û–ö–û–ù–ß–ê–ù–ò–Ø VPN ****************************************************"""

async def notification_moders_for_vpns_soon(days: int):
    while True:
        information_about_vpns = await check_vpn_expiration_for_days(days=days)
        if information_about_vpns != []:
            for info in information_about_vpns:
                user_id = info[0]
                user_name = info[1]
                expiration_date = info[2]
                file = info[3]
                
                notification_sent = await check_notification_sent(user_id, user_name, expiration_date)
                if not notification_sent:
                    await bot.send_photo(photo="https://imgur.com/hW9OgnB", chat_id=BLAZER_CHAT_TOKEN, caption=f"‚ùóÔ∏è <b>–í–∞–∂–Ω–æ!</b>\n\nVPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_name} (ID: <code>{user_id}</code>) —Å –¥–∞—Ç–æ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è <code>{expiration_date}</code> –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ <code>{days}</code> –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è.", parse_mode="HTML")
                    await bot.send_photo(photo="https://imgur.com/hW9OgnB", chat_id=ANUSH_CHAT_TOKEN, caption=f"‚ùóÔ∏è <b>–í–∞–∂–Ω–æ!</b>\n\nVPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_name} (ID: <code>{user_id}</code>) —Å –¥–∞—Ç–æ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è <code>{expiration_date}</code> –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ <code>{days}</code> –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è.", parse_mode="HTML")
                    
                    await bot.send_photo(photo="https://imgur.com/hW9OgnB", chat_id=user_id, caption=f"‚Ä¢ üõ° <b>–í–∞—à VPN</b>:\n\n–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ VPN –æ—Å—Ç–∞–ª–æ—Å—å <code>{days}</code> –¥–Ω–µ–π. \n–°—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è VPN: <code>{expiration_date}</code>\n\n<i>–ß—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å —Å–≤–æ–π VPN, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", parse_mode="HTML", reply_markup=extension_keyboard)
                    
                    await mark_notification_sent(user_id, user_name, expiration_date)
        await asyncio.sleep(1800)

notification_status = {}

async def check_notification_sent(user_id, user_name, expiration_date):
    return notification_status.get((user_id, user_name, expiration_date), False)

async def mark_notification_sent(user_id, user_name, expiration_date):
    notification_status[(user_id, user_name, expiration_date)] = True

async def notification_moders_for_vpns_end():
    while True:
        information_about_vpns = await check_expired_vpns()
        if information_about_vpns != []:
            for info in information_about_vpns:
                user_id = info[0]
                user_name = info[1]
                expiration_date = info[2]
                await bot.send_photo(photo="https://imgur.com/hW9OgnB", chat_id=BLAZER_CHAT_TOKEN, caption=f"‚ùóÔ∏è <b>–í–∞–∂–Ω–æ!</b>\n\nVPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_name} (ID: <code>{user_id}</code>) —Å –¥–∞—Ç–æ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è <code>{expiration_date}</code> –±—ã–ª —É–¥–∞–ª–µ–Ω c —Å–≤—è–∑–∏ —Å –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è. ‚úÖ", parse_mode="HTML")
                await bot.send_photo(photo="https://imgur.com/hW9OgnB", chat_id=ANUSH_CHAT_TOKEN, caption=f"‚ùóÔ∏è <b>–í–∞–∂–Ω–æ!</b>\n\nVPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_name} (ID: <code>{user_id}</code>) —Å –¥–∞—Ç–æ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è <code>{expiration_date}</code> –±—ã–ª —É–¥–∞–ª–µ–Ω c —Å–≤—è–∑–∏ —Å –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è. ‚úÖ", parse_mode="HTML")
                
                await bot.send_photo(photo="https://imgur.com/hW9OgnB", chat_id=user_id, caption=f"‚Ä¢ üõ° <b>–í–∞—à VPN</b>:\n\n–í–∞—à VPN –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω ‚úÖ\n–°—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è VPN: <code>{expiration_date}</code>\n\n<i>–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å VPN, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", parse_mode="HTML", reply_markup=buy_info_keyboard)
        await asyncio.sleep(60)

"""************************************************ –î–û–ë–ê–í–õ–ï–ù–ò–ï VPN ****************************************************"""

async def add_user_vpn(message: Message, state):
    try:
        user_id_for_add = int(message.text)
        user_name_for_add = None
    except Exception as e:
        user_name_for_add = message.text
        user_id_for_add = None
    
    user_info = await find_user_data(user_id=user_id_for_add, user_name=user_name_for_add)
    if user_info != []:
        user_id_for_add = user_info[0][1]
        user_name_for_add = user_info[0][2]
        await message.answer_photo(photo="https://imgur.com/hW9OgnB", caption="‚Ä¢ üõ°Ô∏è <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ VPN:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é: ", parse_mode="HTML", reply_markup=location_kb(user_name=user_name_for_add, user_id=user_id_for_add))
    else:
        attempts = await state.get_data()
        attempts_count = attempts.get("attempts", 0)
        if attempts_count >= 3:
            await message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /add_vpn")
            await state.finish()
        else:
            await state.update_data(attempts=attempts_count + 1)
            await message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="‚Ä¢ üõ°Ô∏è <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ VPN:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>USERNAME</b> –∏–ª–∏ <b>ID</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ <b>ID</b> –∏–ª–∏ <b>USERNAME</b> –∑–∞–Ω–æ–≤–æ: ", parse_mode="HTML", reply_markup=back_keyboard)


async def location_choose_def(callback: CallbackQuery, state: FSMContext):
    if callback.data.startswith("Sweden_callback"):
        user_id = callback.data.split("_")[2]
        user_name = await find_user_data(user_id=user_id)
        user_name = user_name[0][2]
        await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/Lf6OlGm", caption=f"‚Ä¢ üõ° <b>–í—ã–±–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é: <code>–®–≤–µ—Ü–∏—è</code> üá∏üá™\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ VPN:", parse_mode="HTML"), reply_markup=await vpn_connection_type_keyboard(location="–®–≤–µ—Ü–∏—è üá∏üá™", user_id=user_id))
    
    elif callback.data.startswith("Netherlands_callback"):
        user_id = callback.data.split("_")[2]
        user_name = await find_user_data(user_id=user_id)[2]

        await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/Lf6OlGm", caption=f"‚Ä¢ üõ° <b>–í—ã–±–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é: <code>–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã</code> üá≥üá±\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ VPN:", parse_mode="HTML"), reply_markup=await vpn_connection_type_keyboard(location="–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã üá≥üá±", user_id=user_id))

    elif callback.data.startswith("Finland_callback"):
        user_id = callback.data.split("_")[2]
        user_name = await find_user_data(user_id=user_id)[2]

        await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/Lf6OlGm", caption=f"‚Ä¢ üõ° <b>–í—ã–±–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é: <code>–§–∏–Ω–ª—è–Ω–¥–∏—è</code> üá´üáÆ\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ VPN:",  parse_mode="HTML"), reply_markup=await vpn_connection_type_keyboard(location="–§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ", user_id=user_id))

    elif callback.data.startswith("Germany_callback"):
        user_id = callback.data.split("_")[2]
        user_name = await find_user_data(user_id=user_id)[2]

        await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/Lf6OlGm", caption=f"‚Ä¢ üõ° <b>–í—ã–±–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–æ–∫–∞—Ü–∏—é: <code>–ì–µ—Ä–º–∞–Ω–∏—è</code> üá©üá™\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ VPN:",  parse_mode="HTML"), reply_markup=await vpn_connection_type_keyboard(location="–ì–µ—Ä–º–∞–Ω–∏—è üá©üá™", user_id=user_id))
    await callback.answer("")


async def choosing_vpn_connection_def(callback: CallbackQuery, state: FSMContext):
    location = callback.data.split(".")[1]
    user_id = callback.data.split('.')[2]
    if location == "–®–≤–µ—Ü–∏—è üá∏üá™":
        kb = pay_sweden_keyboard(user_id)
    elif location == "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã üá≥üá±":
        kb = pay_netherlands_keyboard(user_id)
    elif location == "–§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ":
        kb = pay_finland_keyboard(user_id)
    elif location == "–ì–µ—Ä–º–∞–Ω–∏—è üá©üá™":
        kb = pay_germany_keyboard(user_id)

    location = f"<code>{location.split(" ")[0]}</code> {location.split(" ")[1]}"
    await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/cXpphjT", caption=f"‚Ä¢ üõ° <b>–ü–æ–∫—É–ø–∫–∞ VPN:</b>\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏ VPN –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏: {location}\n–ü—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: <code>Shadowsocks</code> üß¶", parse_mode="HTML"), reply_markup=kb)
    await callback.answer('')

async def choosing_location_for_buying_VPN(callback: CallbackQuery, state: FSMContext):
    if "Buying_sweden" in callback.data:
        await buying_VPN_def(callback=callback, country="–®–≤–µ—Ü–∏—è üá∏üá™", user_id=callback.data.split(".")[1])
    elif "Buying_finland" in callback.data:
        await buying_VPN_def(callback=callback, country="–§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ", user_id=callback.data.split(".")[1])
    elif "Buying_germany" in callback.data:
        await buying_VPN_def(callback=callback, country="–ì–µ—Ä–º–∞–Ω–∏—è üá©üá™", user_id=callback.data.split(".")[1])
    elif "Buying_netherlands" in callback.data:
        await buying_VPN_def(callback=callback, country="–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã üá≥üá±", user_id=callback.data.split(".")[1])
    await callback.answer("")

async def buying_VPN_def(callback, country, user_id):
    user_name = await find_user_data(user_id=user_id)
    user_name = user_name[0][2]

    expiration_date = datetime.datetime.now() + datetime.timedelta(days=28) # —Å—Ä–æ–∫ –¥–µ–∏ÃÜ—Å—Ç–≤–∏—è VPN 28 –¥–Ω–µ–π
    vpn_id = await update_vpn_half_info(user_id=user_id, user_name=user_name, location=country, expiration_days=expiration_date.strftime("%d.%m.%Y %H:%M:%S")) # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ–ª–æ–≤–∏–Ω—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–ø–Ω –≤ –±–¥
    create_new_key(key_id=vpn_id, name=f"ID: {user_id}", data_limit_gb=200.0, location=country) # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è VPN
    vpn_key = find_keys_info(key_id=vpn_id, location=country) # –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞
    await update_vpn_other_info(vpn_key=vpn_key, vpn_id=vpn_id) # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–∞ –≤ –±–¥
    await addind_vpn_count(user_id=user_id)
    await bot.send_photo(photo="https://imgur.com/hW9OgnB", chat_id=user_id, caption=f"‚Ä¢ üõí <b>–ü–æ–∫—É–ø–∫–∞ VPN</b>:\n\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –≤–∞–º VPN –Ω–∞ <code>28</code> –¥–Ω–µ–π. ‚úÖ\n\nüîë –ö–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: <pre>{vpn_key}</pre>\n\n–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é VPN –Ω–∏–∂–µ –ø–æ –∫–Ω–æ–ø–∫–µ.", parse_mode="HTML", reply_markup=insturtion_keyboard)
    await callback.message.edit_media(media=InputMediaPhoto(media="https://imgur.com/hW9OgnB", caption=f"‚Ä¢ üõí <b>–ü–æ–∫—É–ø–∫–∞ VPN</b>:\n\nVPN –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user_name} (ID: <code>{user_id}</code>) ‚úÖ", parse_mode="HTML"), reply_markup=back_keyboard)
    await edit_operations_history(user_id=user_id, user_name=user_name, operations=(float(0)), description_of_operation="üõí –ü–æ–∫—É–ø–∫–∞ VPN")
    await callback.answer("")


"""*********************************************************************** –£–î–ê–õ–ï–ù–ò–ï VPN ***********************************************************************"""

async def deleting_user_vpn(message: Message, state):
    try:
        user_id_for_add = int(message.text)
        user_name_for_add = None
    except Exception as e:
        user_name_for_add = message.text
        user_id_for_add = None
    
    user_info = await find_user_data(user_id=user_id_for_add, user_name=user_name_for_add)
    if user_info != []:
        await message.answer_photo(photo="https://imgur.com/hW9OgnB", caption="‚Ä¢ üõí <b>–£–¥–∞–ª–µ–Ω–∏–µ VPN</b>:\n\n–í–≤–µ–¥–∏—Ç–µ <code>ID</code> VPN, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å: ", parse_mode="HTML", reply_markup=back_keyboard)
        await DeleteVpnForUsers.WAITING_FOR_USER_ID_FOR_DELETE.set()
    else:
        attempts = await state.get_data()
        attempts_count = attempts.get("attempts", 0)
        if attempts_count >= 3:
            await message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /user_vpn")
            await state.finish()
        else:
            await state.update_data(attempts=attempts_count + 1)
            await message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="‚Ä¢ üõ°Ô∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ VPN:</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>USERNAME</b> –∏–ª–∏ <b>ID</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ <b>ID</b> –∏–ª–∏ <b>USERNAME</b> –∑–∞–Ω–æ–≤–æ: ", parse_mode="HTML", reply_markup=back_keyboard)

async def handle_vpn_id(message: Message, state):
    try:
        vpn_id = int(message.text)
    except Exception as e:
        attempts = await state.get_data()
        attempts_count = attempts.get("attempts", 0)
        if attempts_count >= 3:
            await message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /delete_vpn")
            await state.finish()
        else:
            await state.update_data(attempts=attempts_count + 1)
            await message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="‚Ä¢ üõ°Ô∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ VPN:</b>\n\n–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π <b>ID</b> ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ <b>ID</b> –∑–∞–Ω–æ–≤–æ: ", parse_mode="HTML", reply_markup=back_keyboard)
    if await delete_vpn(vpn_id=vpn_id) == None:
        attempts = await state.get_data()
        attempts_count = attempts.get("attempts", 0)
        if attempts_count >= 3:
            await message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /delete_vpn")
            await state.finish()
        else:
            await state.update_data(attempts=attempts_count + 1)
            await message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="‚Ä¢ üõ°Ô∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ VPN:</b>\n\n–í—ã –≤–≤–µ–ª–∏ <b>ID</b>, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ <b>ID</b> –∑–∞–Ω–æ–≤–æ:", parse_mode="HTML", reply_markup=back_keyboard)
    else:
        await message.answer_photo(photo="https://imgur.com/hW9OgnB", caption="‚Ä¢ üõ°Ô∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ VPN:</b>\n\nVPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω ‚úÖ", parse_mode="HTML", reply_markup=back_keyboard)
        await state.finish()

"""*********************************************************************** –ò–°–¢–û–†–ò–Ø –û–ü–ï–†–ê–¶–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ***********************************************************************"""

async def handle_user_id_for_history(message: Message, state):
    try:
        user_id = int(message.text)
        user_name = None
    except Exception as e:
        user_id = None
        user_name = message.text
    
    user_info = await find_user_data(user_id=user_id, user_name=user_name)
    user_operation = await getting_operation_history(user_id=user_id, user_name=user_name)
    if user_info != []:
        if user_operation != []:
            message_text = "‚Ä¢ üìã <b>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>:\n\n"
            for operation in user_operation:
                id, user_db_id, user_db_name, operations, time_of_operation, description_of_operation = operation
                operations = operations.split(",")
                time_of_operation = time_of_operation.split(",")
                description_of_operation = description_of_operation.split(",")

                for i in range(len(operations)):
                    operation_value = operations[i]
                    if "-" not in operation_value:
                        operation_value = "+" + operation_value

                    message_text += f"<i>{time_of_operation[i]}</i> - <b>{description_of_operation[i]}</b>:  <code>{operation_value}</code> ‚ÇΩ\n"
            await message.answer_photo(photo="https://imgur.com/QnZumh4", caption=message_text, parse_mode="HTML", reply_markup=back_keyboard)
            await state.finish()
        else:
            await message.answer_photo(photo="https://imgur.com/weO3juR", caption="‚Ä¢ üìã <b>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>:\n\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π ‚ùå", parse_mode="HTML", reply_markup=back_keyboard)
            await state.finish()
    else:
        attempts = await state.get_data()
        attempts_count = attempts.get("attempts", 0)
        if attempts_count >= 3:
            await message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ - /user_history")
            await state.finish()
        else:
            await state.update_data(attempts=attempts_count + 1)
            await message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="‚Ä¢ üìã <b>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º <b>USERNAME</b> –∏–ª–∏ <b>ID</b> –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ <b>ID</b> –∏–ª–∏ <b>USERNAME</b> –∑–∞–Ω–æ–≤–æ: ", parse_mode="HTML", reply_markup=back_keyboard)

def register_adm_handlers(dp: Dispatcher) -> None:
    # dp.register_callback_query_handler(send_message, lambda c: "reply_buy_keyboard" in c.data)
    # dp.register_message_handler(handling_moder_file, state=BuyVPNStates.WAITING_FOR_MESSAGE_TEXT)
    # dp.register_callback_query_handler(process_answer, lambda c: "reply_keyboard" in c.data)
    # dp.register_message_handler(replying_for_moder, state=SupportStates.WAITING_FOR_MODERATOR_ANSWER, content_types=['text', 'document'])
    
    dp.register_callback_query_handler(adm_panel_handle, lambda c: c.data == "adm_panel_callback", state="*")
    dp.register_callback_query_handler(adm_panel_buttons_handler, lambda c: c.data == "addind_balance_callback" or c.data == "deleting_balance_callback" or c.data == "user_data_callback" or c.data == "vpn_user_callback" or c.data == "ban_user_callback" or c.data == "unban_user_callback" or c.data == "add_vpn_callback" or c.data == "delete_vpn_callback" or c.data == "user_history_callback", state="*")
    dp.register_callback_query_handler(unban_user2_handle, lambda c: c.data == "unban_user2_callback", state="*")
    dp.register_message_handler(unban_user_handle, state=UnbanUserState.WAITING_FOR_USER_ID)
    dp.register_callback_query_handler(ban_user2_handle, lambda c: c.data == "ban_user2_callback", state=AdmButtonState.WAITING_FOR_CALLBACK_BUTTONS)
    dp.register_message_handler(ban_user_handle, state=BanUserState.WAITING_FOR_USER_ID)
    dp.register_message_handler(find_info_about_users_vpn, state=UserVPNInfo.WAITING_FOR_USER_ID_FOR_USER_VPN_INFO)
    dp.register_message_handler(find_user_info_for_adm_panel, state=AdmButtonState.WAITING_FOR_USER_ID_FOR_USER_INFO)
    dp.register_callback_query_handler(vpn_info_handle, lambda c: c.data == "vpn_user2_callback", state=AdmButtonState.WAITING_FOR_CALLBACK_BUTTONS)
    dp.register_message_handler(handling_user_name, state=AdmCommandState.WAITING_ID_OF_USER_FOR_ADD)
    dp.register_message_handler(handle_for_adm_add_sum, state=AdmCommandState.WAITING_FOR_SUM_HANDLE_FOR_ADD)
    dp.register_message_handler(handling_user_name_for_delete, state=AdmCommandState.WAITING_ID_OF_USER_HANDLE_FOR_DELETE)
    dp.register_message_handler(handle_for_adm_delete_sum, state=AdmCommandState.WAITING_FOR_SUM_HANDLE_FOR_DELETE)
    dp.register_callback_query_handler(adding_balance_for_moder, lambda c: c.data == "about_yourself_callback", state=AdmCommandState.WAITING_ID_OF_USER_FOR_ADD)
    dp.register_callback_query_handler(deleting_balance_for_moder, lambda c: c.data == "about_yourself_to_delete_callback", state=AdmCommandState.WAITING_ID_OF_USER_HANDLE_FOR_DELETE)
    dp.register_message_handler(add_user_vpn, state=AddVpnForUsers.WAITING_FOR_USER_ID)
    dp.register_callback_query_handler(location_choose_def, lambda c: c.data.startswith("Sweden_callback") or c.data.startswith("Finland_callback") or c.data.startswith("Germany_callback") or c.data.startswith("Netherlands_callback"), state="*")
    dp.register_callback_query_handler(choosing_location_for_buying_VPN, lambda c: "Buying_sweden_adm" in c.data or "Buying_finland" in c.data or "Buying_germany" in c.data or "Buying_netherlands" in c.data, state="*")
    dp.register_callback_query_handler(choosing_vpn_connection_def, lambda c: "vpn_connection_type_adm" in c.data, state="*")
    dp.register_message_handler(deleting_user_vpn, state=DeleteVpnForUsers.WAITING_FOR_USER_ID)
    dp.register_message_handler(handle_vpn_id, state=DeleteVpnForUsers.WAITING_FOR_USER_ID_FOR_DELETE)
    dp.register_message_handler(handle_user_id_for_history, state=FindUserHistory.WAITING_FOR_USER_ID)