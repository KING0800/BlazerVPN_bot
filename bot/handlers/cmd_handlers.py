import os

from dotenv import load_dotenv

from aiogram import Dispatcher
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import Message
from datetime import datetime

from bot.handlers.user_handlers import taking_vpn_price

from bot.keyboards.user_keyboards import help_kb, balance_handle_keyboard, start_kb_handle, device_keyboard, support_to_moders, replenishment_balance, back_keyboard, support_keyboard, location_keyboard, buy_keyboard, addind_count_for_extend, extend_keyboard, numbers_for_replenishment
from bot.keyboards.adm_keyboards import about_yourself_to_add_keyboard, about_yourself_to_delete_keyboard

from bot.database.UserData import is_user_ban_check, get_balance, get_referrer_info
from bot.database.VpnData import get_vpn_data
from bot.database.TempData import save_temp_message
from bot.database.OperationsData import getting_operation_history
from bot.database.SupportData import getting_question


"""********************************************************************** –°–û–°–¢–û–Ø–ù–ò–Ø ******************************************************************"""

class PromocodeStates(StatesGroup):
    WAITING_FOR_USER_PROMOCODE = State()

class PaymentStates(StatesGroup):
    WAITING_FOR_AMOUNT = State()
    WAITING_FOR_USER_EMAIL_HANDLE = State()
    WAINING_FOR_PAYMENT_TYPE = State()
    WAITING_FOR_MESSAGE_TEXT = State()

class SupportStates(StatesGroup):
    WAITING_FOR_QUESTION = State()
    WAITING_FOR_MODERATOR_ANSWER = State()

class AdmCommandState(StatesGroup):
    WAITING_ID_OF_USER_FOR_DELETE = State()
    WAITING_ID_OF_USER_FOR_ADD = State()
    WAITING_ID_OF_USER_HANDLE_FOR_ADD = State()
    WAITING_ID_OF_USER_HANDLE_FOR_DELETE = State()
    WAITING_FOR_SUM_HANDLE_FOR_ADD = State()
    WAITING_FOR_SUM_HANDLE_FOR_DELETE = State()

class AdmButtonState(StatesGroup):
    WAITING_FOR_USER_ID_FOR_USER_INFO = State()
    WAITING_FOR_CALLBACK_BUTTONS = State()

class UserVPNInfo(StatesGroup):
    WAITING_FOR_USER_ID_FOR_USER_VPN_INFO = State()

class BanUserState(StatesGroup):
    WAITING_FOR_USER_ID = State()

class UnbanUserState(StatesGroup):
    WAITING_FOR_USER_ID = State()

# –∏–º–ø–æ—Ä—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv('.env')
ANUSH_CHAT_TOKEN = os.getenv("ANUSH_CHAT_TOKEN")
BLAZER_CHAT_TOKEN = os.getenv("BLAZER_CHAT_TOKEN")
HELPER_CHAT_TOKEN = os.getenv("HELPER_CHAT_TOKEN")

"""******************************************************************* –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –í–°–ï–• –ö–û–ú–ê–ù–î *******************************************************"""

async def handle_text(message: Message, state):
    user_id = message.from_user.id
    if await is_user_ban_check(user_id=user_id):
        await message.answer_photo(photo="https://imgur.com/zhPS0ja", caption="<b>‚Ä¢ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ‚ùå</b>\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ø—Ä–æ—Å–∏–≤ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: </i>", reply_markup=support_keyboard, parse_mode="HTML")
        return
    else:
        if message.text == "/help":
            if user_id == int(ANUSH_CHAT_TOKEN) or user_id == int(BLAZER_CHAT_TOKEN) or user_id == int(HELPER_CHAT_TOKEN):
                await message.answer_photo(photo="https://imgur.com/aQbOPS0",
                                           caption="<b>‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
                                "/start - –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n"
                                "/help - –£–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
                                "/balance - üíµ –£–∑–Ω–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å\n"
                                "/connect_with_dev - üßë‚Äçüíª –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –±–æ—Ç–∞\n"
                                "/buy - üõí –ö—É–ø–∏—Ç—å VPN\n"
                                "/extend_vpn - ‚åõÔ∏è –ü—Ä–æ–¥–ª–∏—Ç—å VPN\n"
                                "/replenishment - üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
                                "/support - üÜò –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
                                "/my_vpn - üõ°Ô∏è –ú–æ–∏ VPN\n"
                                "/ref_system - ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n"
                                "/promocode - üéü –ü—Ä–æ–º–æ–∫–æ–¥—ã\n"
                                "/history_of_operations - üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π\n"
                                "/instruction - üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é VPN\n"
                                "************** <code>–ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´</code> **************\n"
                                "/user_info - üóÉ –î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö\n"
                                "/user_vpn - üõ°Ô∏è VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                                "/add - üíµ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n"
                                "/delete - üíµ –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n"
                                "/ban - ‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                                "/unban - ‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n", reply_markup=start_kb_handle(user_id), parse_mode="HTML")
                
            else:
                await message.answer_photo(photo="https://imgur.com/aQbOPS0",
                                           caption="<b>‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
                                "/start - –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n"
                                "/help - –£–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
                                "/balance - üíµ –£–∑–Ω–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å\n"
                                "/connect_with_dev - üßë‚Äçüíª –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –±–æ—Ç–∞\n"
                                "/buy - üõí –ö—É–ø–∏—Ç—å VPN\n"
                                "/extend_vpn - ‚åõÔ∏è –ü—Ä–æ–¥–ª–∏—Ç—å VPN\n"
                                "/replenishment - üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
                                "/support - üÜò –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
                                "/my_vpn - üõ°Ô∏è –ú–æ–∏ VPN\n"
                                "/ref_system - ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n"
                                "/promocode - üéü –ü—Ä–æ–º–æ–∫–æ–¥—ã\n"
                                "/history_of_operations - üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π\n"
                                "/instruction - üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é VPN", reply_markup=start_kb_handle(user_id), parse_mode="HTML")
    
            
        elif message.text == "/balance":
            user_id = message.from_user.id
            balance = await get_balance(user_id=user_id)
            await message.answer_photo(photo="https://imgur.com/ATlnyXR", caption=f"‚Ä¢ üíµ <b>–ë–∞–ª–∞–Ω—Å</b>:\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: <code>{balance}</code> ‚ÇΩ\n\n<i>–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å, –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É - /replenishment</i>", reply_markup=balance_handle_keyboard, parse_mode="HTML")

        elif message.text == "/connect_with_dev":
            await message.answer_photo(photo="https://imgur.com/wz2wvor", caption="‚Ä¢ üßë‚Äçüíª <b>–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º</b>:\n\n–î–ª—è —Å–≤—è–∑–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ <b><a href = 'https://t.me/KING_08001'>—Å—Å—ã–ª–∫–µ</a></b>", reply_markup=help_kb, parse_mode="HTML")
  
        elif message.text == "/buy":
            await message.answer_photo(photo="https://imgur.com/7Qhm4tw", caption="‚Ä¢ üìç <b>–õ–æ–∫–∞—Ü–∏—è:</b>\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏:", reply_markup=location_keyboard, parse_mode="HTML")

        elif message.text == "/extend_vpn":
            user_id = message.from_user.id
            vpn_data = await get_vpn_data(user_id=user_id)      
            if vpn_data is not None:      
                numbers = 0
                vpn_info_text = ""
                for id, user_db_id, user_db_name, location, expiration_date, vpn_key, days_remaining in vpn_data:
                    numbers += 1
                    if expiration_date is not None:
                        expiration_date_new = datetime.datetime.strptime(expiration_date, "%d.%m.%Y %H:%M:%S")
                        days_remaining = (expiration_date_new - datetime.datetime.now()).days
                        vpn_info_text += f"{numbers}. ID: <code>{id}</code>\nüìç –õ–æ–∫–∞—Ü–∏—è:  <code> {location}</code>\nüïò –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:   <code>{expiration_date}</code>\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å:   <code>{days_remaining}</code> –¥–Ω–µ–π\n\n"
                    else:
                        vpn_info_text += f"{numbers}. –£ –≤–∞—Å –∏–º–µ–µ—Ç—Å—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–π VPN üõ°, –∫–æ—Ç–æ—Ä—ã–π –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.\n\n"
                        numbers -= 1
                kb_for_count = addind_count_for_extend(count=numbers)
                price = await taking_vpn_price(country=location)
                if numbers == 1:
                    await message.answer_photo(photo="https://imgur.com/Fv2UUEl", caption=f"‚Ä¢ üõ° <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN:</b>\n\n{vpn_info_text}<b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN –Ω–∞ 28 –¥–Ω–µ–π —Å—Ç–æ–∏—Ç <code>{price}</code> ‚ÇΩ üíµ\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–ª–∏—Ç—å VPN </b>üõ°", parse_mode="HTML", reply_markup=extend_keyboard)
                else:
                    await message.answer_photo(photo="https://imgur.com/Fv2UUEl", caption=f"‚Ä¢ üõ° <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN:</b>\n\n{vpn_info_text}<b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN –Ω–∞ 28 –¥–Ω–µ–π —Å—Ç–æ–∏—Ç <code>{price}</code> ‚ÇΩ üíµ. \n–í—ã–±–µ—Ä–∏—Ç–µ VPN </b>üõ°<b>, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å:</b>", reply_markup=kb_for_count, parse_mode="HTML") 
            else: 
                await message.answer_photo(photo="https://imgur.com/2RUdfMp", caption="‚Ä¢ üõ° <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN:</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç—É –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ VPN ‚ùå! \n\n<i>–í–∞–º –µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É -</i> /buy", parse_mode="HTML", reply_markup=buy_keyboard)

        elif message.text == "/replenishment":
            await message.answer_photo(photo="https://imgur.com/GedgOxd", caption="‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>:\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è üíµ, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ: ", parse_mode="HTML", reply_markup=numbers_for_replenishment)
            await PaymentStates.WAITING_FOR_AMOUNT.set()

        elif message.text == "/support":
            await message.answer_photo(photo="https://imgur.com/K4hLFUD", caption="‚Ä¢ üÜò <b>–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>:\n\n–ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", parse_mode="HTML", reply_markup=support_to_moders)

        elif message.text == "/ref_system":
            text = ""
            referrals = await get_referrer_info(user_id)
            if referrals:
                text = f"‚Ä¢ ü§ù <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>:\n<pre>https://t.me/blazervpnbot?start={user_id}</pre>\n\n<i>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å–æ —Å–≤–æ–∏–º–∏ –∑–Ω–∞–∫–æ–º—ã–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å <code>20</code> ‚ÇΩ —Å–µ–±–µ –Ω–∞ –±–∞–ª–∞–Ω—Å.</i>\n\n"
                
                text += "<b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:</b>\n\n"
                for referer_id, referer_name in referrals:
                    if referer_name: 
                        text += f"@{referer_name} (ID: <code>{referer_id}</code>) \n"
                    else:
                        text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ USERNAME (ID: <code>{referer_id}</code>)\n"
            else:
                text += "‚Ä¢ ü§ù <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>:\n\n–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤."
            await message.answer_photo(photo="https://imgur.com/UcKZLFn", caption=text, parse_mode="HTML", reply_markup=back_keyboard)

        elif message.text == "/promocode":
            await message.answer_photo(photo="https://imgur.com/CwQn7Qv", caption="‚Ä¢ üéü <b>–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</b>:\n\n–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–æ–∫–æ–¥:", parse_mode="HTML", reply_markup=back_keyboard)
            await PromocodeStates.WAITING_FOR_USER_PROMOCODE.set()

        elif message.text == "/instruction":
            await message.answer_photo(photo="https://imgur.com/undefined", caption="‚Ä¢ üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é VPN üõ°:", parse_mode="HTML", reply_markup=device_keyboard)            

        elif message.text == "/my_vpn":
            vpn_data = await get_vpn_data(user_id=user_id)
            if vpn_data != None:
                vpn_info_text = "‚Ä¢ üõ° <b>–í–∞—à–∏ VPN</b>:\n\n"
                numbers = 0
                for vpn in vpn_data:
                    numbers += 1
                    location = vpn[3]
                    expiration_date = vpn[4]
                    vpn_key = vpn[5]
                    if expiration_date is not None:
                        expiration_date_new = datetime.datetime.strptime(str(expiration_date), "%d.%m.%Y %H:%M:%S")
                        days_remaining = (expiration_date_new - datetime.datetime.now()).days
                        vpn_info_text += f"{numbers}. ID: <code>{vpn[0]}</code>\nüìç –õ–æ–∫–∞—Ü–∏—è:  <code> {location}</code>\nüïò –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:   <code>{expiration_date}</code>\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å:   <code>{days_remaining}</code> –¥–Ω–µ–π\nüîë –ö–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: <pre>{vpn_key}</pre>\n\n"
                    else:
                        vpn_info_text += f"{numbers}. –£ –≤–∞—Å –∏–º–µ–µ—Ç—Å—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–π VPN üõ°, –∫–æ—Ç–æ—Ä—ã–π –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.\n\n"
                        numbers -= 1

                await message.answer_photo(photo="https://imgur.com/4NwMie5", caption=vpn_info_text, parse_mode="HTML", reply_markup=buy_keyboard)
            else:
                await message.answer_photo(photo="https://imgur.com/weO3juR", caption=f"‚Ä¢ üõ° <b>–í–∞—à–∏ VPN</b>:\n\n–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ VPN ‚ùå\n\n<i>–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å VPN, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É</i> - /buy", parse_mode="HTML", reply_markup=buy_keyboard)
        
        elif message.text == "/history_of_operations":
            user_name = message.from_user.username
            user_id = message.from_user.id
            operation_history = await getting_operation_history(user_id=user_id)
            if operation_history is None or operation_history == []:
                await message.answer_photo("https://imgur.com/weO3juR", caption="‚Ä¢ üìã <b>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</b>:\n\n–£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π ‚ùå", parse_mode="HTML", reply_markup=replenishment_balance)
                return
            message_text = "‚Ä¢ üìã <b>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</b>:\n\n"
            for operation in operation_history:
                id, user_db_id, user_db_name, operations, time_of_operation, description_of_operation = operation
                operations = operations.split(",")
                time_of_operation = time_of_operation.split(",")
                description_of_operation = description_of_operation.split(",")

                for i in range(len(operations)):
                    operation_value = operations[i]
                    if "-" not in operation_value:
                        operation_value = "+" + operation_value

                    message_text += f"<i>{time_of_operation[i]}</i> - <b>{description_of_operation[i]}</b>:  <code>{operation_value}</code> ‚ÇΩ\n"
            await message.answer_photo(photo="https://imgur.com/QnZumh4", caption=message_text, parse_mode="HTML", reply_markup=back_keyboard)

            await message.answer(message_text, reply_markup=back_keyboard, parse_mode="HTML")

        ##### ADM COMMANDS
        elif message.text == "/add":
            if message.from_user.id == int(ANUSH_CHAT_TOKEN) or message.from_user.id == int(BLAZER_CHAT_TOKEN) or message.from_user.id == int(HELPER_CHAT_TOKEN):
                await message.answer_photo(photo="https://imgur.com/i4sEHgp", caption="‚Ä¢ üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b>\n\n–í–≤–µ–¥–∏—Ç–µ <b>ID</b> –∏–ª–∏ <b>USERNAME</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", parse_mode="HTML", reply_markup=about_yourself_to_add_keyboard)
                await AdmCommandState.WAITING_ID_OF_USER_FOR_ADD.set()
            else:
                await message.answer_photo(photo="https://imgur.com/weO3juR", caption="‚Ä¢ ‚ùå <b>–û—à–∏–±–∫–∞:</b>\n\n–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ! ‚ùå\n\n<i>–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ</i> - /help", parse_mode="HTML", reply_markup=back_keyboard)
                
        elif message.text == "/delete":
            if message.from_user.id == int(ANUSH_CHAT_TOKEN) or message.from_user.id == int(BLAZER_CHAT_TOKEN) or message.from_user.id == int(HELPER_CHAT_TOKEN):
                await message.answer_photo(photo="https://imgur.com/i4sEHgp", caption="‚Ä¢ üíµ <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b>\n\n–í–≤–µ–¥–∏—Ç–µ <b>ID</b> –∏–ª–∏ <b>USERNAME</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", parse_mode="HTML", reply_markup=about_yourself_to_delete_keyboard)
                await AdmCommandState.WAITING_ID_OF_USER_HANDLE_FOR_DELETE.set()
            else:
                await message.answer_photo(photo="https://imgur.com/weO3juR", caption="‚Ä¢ ‚ùå <b>–û—à–∏–±–∫–∞:</b>\n\n–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ! ‚ùå\n\n<i>–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ</i> - /help", parse_mode="HTML", reply_markup=back_keyboard)
                
        elif message.text == "/ban":
            if message.from_user.id == int(ANUSH_CHAT_TOKEN) or message.from_user.id == int(BLAZER_CHAT_TOKEN) or message.from_user.id == int(HELPER_CHAT_TOKEN):
                await message.answer_photo(photo="https://imgur.com/i4sEHgp", caption="‚Ä¢ ‚ùå <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ USERNAME –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:", parse_mode="HTML", reply_markup=back_keyboard)
                await BanUserState.WAITING_FOR_USER_ID.set()
            else:
                await message.answer_photo(photo="https://imgur.com/weO3juR", caption="‚Ä¢ ‚ùå <b>–û—à–∏–±–∫–∞:</b>\n\n–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ! ‚ùå\n\n<i>–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ</i> - /help", parse_mode="HTML", reply_markup=back_keyboard)

        elif message.text == "/unban":
            if message.from_user.id == int(ANUSH_CHAT_TOKEN) or message.from_user.id == int(BLAZER_CHAT_TOKEN) or message.from_user.id == int(HELPER_CHAT_TOKEN):
                await message.answer_photo(photo="https://imgur.com/i4sEHgp", caption="‚Ä¢ ‚úÖ <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ USERNAME –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:", parse_mode="HTML", reply_markup=back_keyboard)
                await UnbanUserState.WAITING_FOR_USER_ID.set()
            else:
                await message.answer_photo(photo="https://imgur.com/weO3juR", caption="‚Ä¢ ‚ùå <b>–û—à–∏–±–∫–∞:</b>\n\n–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ! ‚ùå\n\n<i>–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ</i> - /help", parse_mode="HTML", reply_markup=back_keyboard)

        elif message.text == "/user_info":
            if message.from_user.id == int(ANUSH_CHAT_TOKEN) or message.from_user.id == int(BLAZER_CHAT_TOKEN) or message.from_user.id == int(HELPER_CHAT_TOKEN):
                await message.answer_photo(photo="https://imgur.com/i4sEHgp", caption="‚Ä¢ üóÉ <b>–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ USERNAME –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å: ", parse_mode="HTML", reply_markup=back_keyboard)
                await AdmButtonState.WAITING_FOR_USER_ID_FOR_USER_INFO.set()
            else:
                await message.answer_photo(photo="https://imgur.com/weO3juR", caption="‚Ä¢ ‚ùå <b>–û—à–∏–±–∫–∞:</b>\n\n–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ! ‚ùå\n\n<i>–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ</i> - /help", parse_mode="HTML", reply_markup=back_keyboard)

        elif message.text == "/user_vpn":
            if message.from_user.id == int(ANUSH_CHAT_TOKEN) or message.from_user.id == int(BLAZER_CHAT_TOKEN) or message.from_user.id == int(HELPER_CHAT_TOKEN):
                await message.answer_photo(photo="https://imgur.com/i4sEHgp", caption="‚Ä¢ üõ°Ô∏è <b>VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ USERNAME –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ VPN –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å: ", parse_mode="HTML", reply_markup=back_keyboard)
                await UserVPNInfo.WAITING_FOR_USER_ID_FOR_USER_VPN_INFO.set()
            else:
                await message.answer_photo(photo="https://imgur.com/weO3juR", caption="‚Ä¢ ‚ùå <b>–û—à–∏–±–∫–∞:</b>\n\n–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ! ‚ùå\n\n<i>–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ</i> - /help", parse_mode="HTML", reply_markup=back_keyboard)
        else:
            await message.answer_photo(photo="https://imgur.com/weO3juR", caption="‚Ä¢ ‚ùå <b>–û—à–∏–±–∫–∞:</b>\n\n–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (/help)", reply_markup=start_kb_handle(user_id), parse_mode="HTML")


def register_command_handlers(dp: Dispatcher) -> None:
    dp.register_message_handler(handle_text, content_types=['text'])